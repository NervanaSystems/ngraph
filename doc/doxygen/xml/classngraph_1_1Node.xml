<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classngraph_1_1Node" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>ngraph::Node</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; Node &gt;</basecompoundref>
    <derivedcompoundref refid="classngraph_1_1op_1_1Constant" prot="public" virt="non-virtual">ngraph::op::Constant</derivedcompoundref>
    <derivedcompoundref refid="classngraph_1_1op_1_1FunctionCall" prot="public" virt="non-virtual">ngraph::op::FunctionCall</derivedcompoundref>
    <derivedcompoundref refid="classngraph_1_1op_1_1GetOutputElement" prot="public" virt="non-virtual">ngraph::op::GetOutputElement</derivedcompoundref>
    <derivedcompoundref refid="classngraph_1_1op_1_1Op" prot="public" virt="non-virtual">ngraph::op::Op</derivedcompoundref>
    <derivedcompoundref refid="classngraph_1_1pattern_1_1op_1_1Pattern" prot="public" virt="non-virtual">ngraph::pattern::op::Pattern</derivedcompoundref>
    <derivedcompoundref refid="classngraph_1_1xla_1_1op_1_1Tuple" prot="public" virt="non-virtual">ngraph::xla::op::Tuple</derivedcompoundref>
    <includes refid="node_8hpp" local="no">node.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classngraph_1_1Node_1acb7e15e5bd3da01a48020ccf4f0e6b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class autodiff::Adjoints</definition>
        <argsstring></argsstring>
        <name>autodiff::Adjoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="48" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classngraph_1_1Node_1a360414cffaaabf2b3cb659cc7244b3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class descriptor::Input</definition>
        <argsstring></argsstring>
        <name>descriptor::Input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="49" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classngraph_1_1Node_1a0ae74ebc4b4d1ccf1d591763aaf47507" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void replace_node_users_arguments</definition>
        <argsstring>(std::shared_ptr&lt; Node &gt; target, std::shared_ptr&lt; Node &gt; replacement)</argsstring>
        <name>replace_node_users_arguments</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="classngraph_1_1Node_1a0cf3374865c171a6d862bc6a18125905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Node &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>out</defname>
        </param>
        <param>
          <type>const <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="99" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="194" bodyend="206"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classngraph_1_1Node_1aa58e8eb953c65c957dbdc56d7aa1dca5" prot="public" static="no" mutable="no">
        <type>std::unordered_set&lt; <ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref> * &gt;</type>
        <definition>std::unordered_set&lt;descriptor::Tensor*&gt; ngraph::Node::liveness_live_list</definition>
        <argsstring></argsstring>
        <name>liveness_live_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="152" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1Node_1a572f0f0ef5cb7d309a86b1ffddda7da1" prot="public" static="no" mutable="no">
        <type>std::unordered_set&lt; <ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref> * &gt;</type>
        <definition>std::unordered_set&lt;descriptor::Tensor*&gt; ngraph::Node::liveness_new_list</definition>
        <argsstring></argsstring>
        <name>liveness_new_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="153" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1Node_1a4f36c2c5ae51d1073d5bc23ab44cd72f" prot="public" static="no" mutable="no">
        <type>std::unordered_set&lt; <ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref> * &gt;</type>
        <definition>std::unordered_set&lt;descriptor::Tensor*&gt; ngraph::Node::liveness_free_list</definition>
        <argsstring></argsstring>
        <name>liveness_free_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="154" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classngraph_1_1Node_1a9d06e17d8a569f809d6d322edb405b24" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string ngraph::Node::m_node_type</definition>
        <argsstring></argsstring>
        <name>m_node_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="174" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1Node_1ad0f9c97f26a1ad8a42b7308f0e4773f5" prot="protected" static="no" mutable="no">
        <type>std::multiset&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> * &gt;</type>
        <definition>std::multiset&lt;Node*&gt; ngraph::Node::m_users</definition>
        <argsstring></argsstring>
        <name>m_users</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="175" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1Node_1af72ec96a91723b94174886a947835f93" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string ngraph::Node::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="176" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1Node_1ae927d96858146fd4aad4f7a9d6c03e8e" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t ngraph::Node::m_instance_id</definition>
        <argsstring></argsstring>
        <name>m_instance_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="177" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1Node_1a4f55bb2b70a88ddcc407a2930da034e7" prot="protected" static="no" mutable="no">
        <type>std::deque&lt; <ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">descriptor::Input</ref> &gt;</type>
        <definition>std::deque&lt;descriptor::Input&gt; ngraph::Node::m_inputs</definition>
        <argsstring></argsstring>
        <name>m_inputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="179" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1Node_1a177ab91b7609c16e8d57e1a7182f2bd0" prot="protected" static="no" mutable="no">
        <type>std::deque&lt; <ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">descriptor::Output</ref> &gt;</type>
        <definition>std::deque&lt;descriptor::Output&gt; ngraph::Node::m_outputs</definition>
        <argsstring></argsstring>
        <name>m_outputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="180" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1Node_1a034da5cfe5401a01045f2fd8a9374ca7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ngraph::Node::m_is_output</definition>
        <argsstring></argsstring>
        <name>m_is_output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="181" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1Node_1a881dacc03050bbe8dc679455c99bfaa8" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> *, <ref refid="classngraph_1_1autodiff_1_1Adjoints" kindref="compound">autodiff::Adjoints</ref> &gt;</type>
        <definition>std::unordered_map&lt;Node*, autodiff::Adjoints&gt; ngraph::Node::m_adjoint_map</definition>
        <argsstring></argsstring>
        <name>m_adjoint_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="182" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classngraph_1_1Node_1afc2e9023e2895f9d7465062ce7bbd49e" prot="protected" static="yes" mutable="no">
        <type>std::atomic&lt; size_t &gt;</type>
        <definition>atomic&lt; size_t &gt; Node::m_next_instance_id</definition>
        <argsstring></argsstring>
        <name>m_next_instance_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="178" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classngraph_1_1Node_1a86a3e522150e260079e4740f6ac010a7" prot="private" static="no" mutable="no">
        <type><ref refid="namespacengraph_1a193a29e9e6878bb1690debde6f87bdee" kindref="member">Nodes</ref></type>
        <definition>Nodes ngraph::Node::m_arguments</definition>
        <argsstring></argsstring>
        <name>m_arguments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="185" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classngraph_1_1Node_1a0259d67ef3d6d82e38dbafa62d1463e2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Node::Node</definition>
        <argsstring>(const std::string &amp;node_type, const Nodes &amp;arguments)</argsstring>
        <name>Node</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>node_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a193a29e9e6878bb1690debde6f87bdee" kindref="member">Nodes</ref> &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="54" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="32" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a2a6579e8a1f70539b8e47d100eb06ae6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ngraph::Node::~Node</definition>
        <argsstring>()</argsstring>
        <name>~Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="55" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="55" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a423c05a93bb628e8c311b631fb6a582c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ngraph::Node::generate_adjoints</definition>
        <argsstring>(autodiff::Adjoints &amp;adjoints, const std::shared_ptr&lt; Node &gt; &amp;delta)</argsstring>
        <name>generate_adjoints</name>
        <reimplementedby refid="classngraph_1_1op_1_1Concat_1a09fce0c4f670ea33d705a4b7b4832865">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Concat_1a615a3b3d4d8397d1a86781a4cd5a60f0">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Parameter_1ac31024251c13cd11b09563f0dfa5c0cb">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Negative_1a296960c3bd01fe3ddddffa009f7a848d">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Log_1ac8d1273497fd23851530abc2feac6365">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Exp_1a3ba5d9794e355322bc8dfce7cbaf14fb">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Divide_1a3845db4b7797f512b89c10c7953df27f">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Cosh_1a154bec418dc65598bf3e7caf8dd4e022">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Cos_1a17eb8a76e8b842fa008082ccffe83fb5">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Multiply_1a81b1f137d5feb89d56334218c0bf3121">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Minimum_1aaf918e819471707db7ecafa3c81dfa78">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Convert_1ae67aa9510a10cff21c4573f1007642d8">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Maximum_1a1b6e515c6d1fc27e3d6014f483d4d4e8">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Relu_1aaa8659e01ac78fe1c5bb18109bf0d922">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Broadcast_1a1fd238bcec5083abb5735685dc1decab">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Abs_1a0decec5e95ee6e1b4b678a8ac823ddfa">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Add_1a77aee036269400dd1c8c083e3ffecc8e">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Tanh_1a45af31d7f8d78f103166eae6d57802ff">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Tan_1aadf1a762952428ba5e269fea437d4c66">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Sqrt_1a4b3ffa5fc4353f57cdaad0fd9d8c30be">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Sinh_1ab632d128b5efb89b1ace2750f363fdb3">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Sin_1ac58013cfef68d951ca3fce7f93b77b57">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Subtract_1a16fa1ea4a756e55fce2e5c688fc8fc4d">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Power_1a91d949cd173e442586fcbeb41817301f">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Select_1ae4787eae23290ce8c333cb27d43e9d93">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Dot_1aa09f47ed7453d584e1a07216a071b377">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Reverse_1a2fff8b55a628dafeda37142e81a63f9a">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Pad_1a9ae5b4730de9d4ee025e226f450be5e6">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Reshape_1add3f4688598f09b0f893353b68e55c71">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1AvgPool_1a5bde08ada11985df7e6729554c42459e">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Slice_1aa5c0d1496f39d9e93fb39bc1f92c8c20">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1ReplaceSlice_1ae55a1db6fa15bebd54cdc29fe6299c97">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1MaxPool_1a5dc91fd9036d00cfd713428580205c6a">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Sum_1a2c775a6182a724a6c7766e5869cd258a">generate_adjoints</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Convolution_1a1f9e1534e9d557cc62889a0014eec31c">generate_adjoints</reimplementedby>
        <param>
          <type><ref refid="classngraph_1_1autodiff_1_1Adjoints" kindref="compound">autodiff::Adjoints</ref> &amp;</type>
          <declname>adjoints</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="62" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a1bac19895a096bb5772f6a6c120b3813" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Node::add_output</definition>
        <argsstring>(const element::Type &amp;element_type, const Shape &amp;shape)</argsstring>
        <name>add_output</name>
        <param>
          <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
          <declname>element_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="172" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="62" bodyend="73"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classngraph_1_1Node_1a92598fdffd86cf6fd3adf0081e041d2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string ngraph::Node::description</definition>
        <argsstring>() const</argsstring>
        <name>description</name>
        <briefdescription>
<para>The class name, must not contain spaces. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="69" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1ab0228a9136af1c06e6c32503871aa037" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Node::get_name</definition>
        <argsstring>() const</argsstring>
        <name>get_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="70" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="121" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a21c1e9e47d5447ba37982d1bbc57e79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Node::set_name</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>set_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="71" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="135" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a99c230728fde81ca9e64ed393d0728c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ngraph::Node::clear_arguments</definition>
        <argsstring>()</argsstring>
        <name>clear_arguments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="72" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a1ca1186be7560ca6fd3a4bc1819526a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::multiset&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> * &gt; &amp;</type>
        <definition>const std::multiset&lt;Node*&gt;&amp; ngraph::Node::users</definition>
        <argsstring>() const</argsstring>
        <name>users</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="73" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a49900b3c7bc6ee44c466a622ccf52f71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Node::get_node_id</definition>
        <argsstring>() const</argsstring>
        <name>get_node_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="74" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="114" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_ad69bb7920f3c6898754e0e938461fa8c_1ad69bb7920f3c6898754e0e938461fa8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ngraph::Node::is_same_op_type</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;node) const</argsstring>
        <name>is_same_op_type</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if this has the same implementing class as node. This will be used by the pattern matcher when comparing a pattern graph against the graph. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="79" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a0a2d35a1430bc4671184eec8e1425640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ngraph::Node::set_value_type_checked</definition>
        <argsstring>(const std::shared_ptr&lt; const TensorViewType &gt; &amp;value_type)</argsstring>
        <name>set_value_type_checked</name>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classngraph_1_1TensorViewType" kindref="compound">TensorViewType</ref> &gt; &amp;</type>
          <declname>value_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a7500930e175b8f522d26988796727ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Node::set_value_type_checked</definition>
        <argsstring>(const element::Type &amp;element_type, const Shape &amp;shape)</argsstring>
        <name>set_value_type_checked</name>
        <param>
          <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
          <declname>element_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="91" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="50" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1ab700ac2bc2dec9138e3e1575b49075c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Node::is_parameter</definition>
        <argsstring>() const</argsstring>
        <name>is_parameter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="93" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1ad3ae6e9bcbf2462a074847fdf47ab986" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Node::is_output</definition>
        <argsstring>() const</argsstring>
        <name>is_output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="94" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a7bcdb7230a14c3c76a38392bfeacea1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Node::set_is_output</definition>
        <argsstring>()</argsstring>
        <name>set_is_output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="95" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="100" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1aa560b6ff7736831265cf1ce1346e6376" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Node::is_constant</definition>
        <argsstring>() const</argsstring>
        <name>is_constant</name>
        <reimplementedby refid="classngraph_1_1op_1_1Constant_1a421d22b5f559556fd7e1ec0e0b60cd0b">is_constant</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="96" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1ad0a48043e7858c06a2c91b25c2e88030" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool ngraph::Node::is_commutative</definition>
        <argsstring>()</argsstring>
        <name>is_commutative</name>
        <reimplementedby refid="classngraph_1_1op_1_1Maximum_1ab04787ba72d3c3d7c61815d5dc7085df">is_commutative</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Multiply_1a7c385163c68757c557158c377018d12a">is_commutative</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Add_1a9f783dac46a81424bd328852d350502b">is_commutative</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="97" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a7a189270f6c1d02aa62c11b82d837bfb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ngraph::Node::get_instance_id</definition>
        <argsstring>() const</argsstring>
        <name>get_instance_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="98" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a3e88cf704f45f337a48d79a16a54e2c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::deque&lt; <ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">descriptor::Input</ref> &gt; &amp;</type>
        <definition>std::deque&lt;descriptor::Input&gt;&amp; ngraph::Node::get_inputs</definition>
        <argsstring>()</argsstring>
        <name>get_inputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="102" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a3d47e40f640c1469db01a33611a993e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::deque&lt; <ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">descriptor::Input</ref> &gt; &amp;</type>
        <definition>const std::deque&lt;descriptor::Input&gt;&amp; ngraph::Node::get_inputs</definition>
        <argsstring>() const</argsstring>
        <name>get_inputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="104" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1ac9aae122c66b9d82c240fd35c1e45250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::deque&lt; <ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">descriptor::Output</ref> &gt; &amp;</type>
        <definition>std::deque&lt; descriptor::Output &gt; &amp; Node::get_outputs</definition>
        <argsstring>()</argsstring>
        <name>get_outputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="107" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1aed735e2ef3cda31846ec7f0a85ebd5d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::deque&lt; <ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">descriptor::Output</ref> &gt; &amp;</type>
        <definition>const std::deque&lt; descriptor::Output &gt; &amp; Node::get_outputs</definition>
        <argsstring>() const</argsstring>
        <name>get_outputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="110" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a9257d1be4e21fd9b4e834ee763c9ab03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Node::get_output_size</definition>
        <argsstring>() const</argsstring>
        <name>get_output_size</name>
        <briefdescription>
<para>Returns the number of outputs on the for the node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="114" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a91ccdcd6a30ca5a265c74f0f2734210b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
        <definition>const element::Type &amp; Node::get_output_element_type</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>get_output_element_type</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the element type for output i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="117" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a08ce613a6a22b1083c05321f0dced2a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
        <definition>const element::Type &amp; Node::get_element_type</definition>
        <argsstring>() const</argsstring>
        <name>get_element_type</name>
        <briefdescription>
<para>Checks that there is exactly one output and returns its element type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="120" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="219" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a29bad373294c6939549d3302c6c5b45c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref> &amp;</type>
        <definition>const Shape &amp; Node::get_output_shape</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>get_output_shape</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the shape for output i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="123" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a7a690a13f82f2420e221be4ef0987f56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref> &amp;</type>
        <definition>const Shape &amp; Node::get_shape</definition>
        <argsstring>() const</argsstring>
        <name>get_shape</name>
        <briefdescription>
<para>Checks that there is exactly one output and returns its shape. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="126" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="233" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a0cb34ea18330939c53fbf7fe15603c32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref> &amp;</type>
        <definition>descriptor::Tensor &amp; Node::get_output_tensor</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>get_output_tensor</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the tensor for output i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="129" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a1d7465ea8dda0f2f22c13929656d4291" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref> &amp;</type>
        <definition>descriptor::Tensor &amp; Node::get_output_tensor</definition>
        <argsstring>() const</argsstring>
        <name>get_output_tensor</name>
        <briefdescription>
<para>Checks that there is exactly one output and returns its tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="132" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="267" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a45ae2b4b094d1d91d1c867dc30143d7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1descriptor_1_1TensorView" kindref="compound">descriptor::TensorView</ref> &gt;</type>
        <definition>shared_ptr&lt; descriptor::TensorView &gt; Node::get_output_tensor_view</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>get_output_tensor_view</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the tensor view of output i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="135" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a75b38938bbc73474c8ea083b36da876c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1descriptor_1_1TensorView" kindref="compound">descriptor::TensorView</ref> &gt;</type>
        <definition>shared_ptr&lt; descriptor::TensorView &gt; Node::get_output_tensor_view</definition>
        <argsstring>() const</argsstring>
        <name>get_output_tensor_view</name>
        <briefdescription>
<para>Checks that there is exactly one output and returns its tensor view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="138" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="247" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a68967e741c4045d22b712c5f644f5fa7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::set&lt; <ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">descriptor::Input</ref> * &gt; &amp;</type>
        <definition>const std::set&lt; descriptor::Input * &gt; &amp; Node::get_output_inputs</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>get_output_inputs</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the set of inputs using output i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="141" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a69c6620b65b11187bf367a2d0e440699" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Node::get_input_size</definition>
        <argsstring>() const</argsstring>
        <name>get_input_size</name>
        <briefdescription>
<para>Returns the number of inputs for the op. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="144" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="276" bodyend="279"/>
        <referencedby refid="classngraph_1_1op_1_1FunctionCall_ad97feff7bda8c71fcbe3ace7fba7897f_1ad97feff7bda8c71fcbe3ace7fba7897f" compoundref="function__call_8cpp" startline="23" endline="51">ngraph::op::FunctionCall::FunctionCall</referencedby>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a98841a99a32bdcf64a371ff2aed2abc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
        <definition>const element::Type &amp; Node::get_input_element_type</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>get_input_element_type</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the element type of input i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="147" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="281" bodyend="284"/>
        <referencedby refid="classngraph_1_1op_1_1FunctionCall_ad97feff7bda8c71fcbe3ace7fba7897f_1ad97feff7bda8c71fcbe3ace7fba7897f" compoundref="function__call_8cpp" startline="23" endline="51">ngraph::op::FunctionCall::FunctionCall</referencedby>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a9ff5f656d6b183cc00af753ec6b6144a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref> &amp;</type>
        <definition>const Shape &amp; Node::get_input_shape</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>get_input_shape</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the shape of input i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="150" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="286" bodyend="289"/>
        <referencedby refid="classngraph_1_1op_1_1FunctionCall_ad97feff7bda8c71fcbe3ace7fba7897f_1ad97feff7bda8c71fcbe3ace7fba7897f" compoundref="function__call_8cpp" startline="23" endline="51">ngraph::op::FunctionCall::FunctionCall</referencedby>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a5f3de445063d95cb31842e3a44e487c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Node &gt; Node::backprop_node</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;x, const std::shared_ptr&lt; Node &gt; &amp;c)</argsstring>
        <name>backprop_node</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="156" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="175" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1ac9b5aed803ef1f50a02a87dc81034ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacengraph_1a193a29e9e6878bb1690debde6f87bdee" kindref="member">Nodes</ref></type>
        <definition>Nodes Node::get_input_ops</definition>
        <argsstring>()</argsstring>
        <name>get_input_ops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="159" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="159" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1aa7aaefcd4db958482315af48cb221a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Node &gt; Node::get_input_op</definition>
        <argsstring>(size_t index)</argsstring>
        <name>get_input_op</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="161" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="147" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a0c3c1afcdb7effe100c653b86a2eb56e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;Node&gt; ngraph::Node::copy_with_new_args</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Node &gt;&gt; &amp;new_args) const =0</argsstring>
        <name>copy_with_new_args</name>
        <reimplementedby refid="classngraph_1_1op_1_1Not_1a4c3839ada32a48b55fd81a1441ef6374">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1FunctionCall_1ab5c6dc098c64225d1c39c338259edd2c">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Convert_1ad8c2c236e1bc50a4b198dbe158a16531">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Negative_1a0119d21334028d852f2a13ba8780aa4f">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Log_1a67d18aaa2a6c3400f8ca0afeda60ea72">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Floor_1a4ca44ebc80149f13c0ba03cbbbce906a">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Exp_1a45ac4051912f4c1bac29ee74b297191a">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Cosh_1afe17b0bd5941ba382e6b9f0ab132bead">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Cos_1a250d5e2036881b7eaeade9077e174ebf">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Concat_1a9af5b92712fe031f221094b9830999da">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Concat_1a9af5b92712fe031f221094b9830999da">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Ceiling_1adeba21c20b07cf7e24e2dea0c6de8024">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1NotEqual_1a72a9bdc4a817f470afd3fa3214914f35">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Multiply_1a4bfd3cf3dae73ab1e27d5e15075f817f">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Minimum_1ac9263e978f9d49659a39e2b96efa6735">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Maximum_1a28b9a2cbdd7bdec5658b283d85f9148f">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1LessEq_1a6effc1d74c47ef473ca7c4209f16fb2c">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Less_1aa388d9f04ad5fa3dc10f6aa8a4285af5">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1GreaterEq_1a062d3879ab3212b2654370bcf911f340">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Greater_1a835b2d95a4f5e0368c7069b3efe1808b">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Divide_1a73efa263c6d9a12cafc692994d85d5a7">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Broadcast_1a174c4bfd73f651ab67133acbfc806c36">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Relu_1a46e695577ac095e6b2a2ba75eae75671">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1BatchNorm_1a2853029dcc98d999dc09c953925fb027">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1MatmulBias_1afbc2bcf100ca87059c68db9d4a706711">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1pattern_1_1op_1_1Pattern_1a7da0f948ed40650b5b77010678b7f307">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Atan_1a0f084c29662c7989bad5b2d4eb6f3f4d">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Asin_1aa625a7f2d22e9a93f35861649cfad3e4">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Acos_1ab9d6c5c5b2dc7f97fd093f2f117b72ca">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Abs_1ab8dab05932d822907f6090e5b9b6cf59">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1runtime_1_1cpu_1_1op_1_1ConvertLayout_1a3beeb94cebeaa9976214dfb4e53227e2">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Add_1aabbc7229d8b132361958146ad64440d3">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Tanh_1aeccdc717f3aac9e63429edb8836be627">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Tan_1ac9970f721d24d09c18c8671aa147f08a">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Sqrt_1ad2450366fd5b932311eb8cdf51d44691">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Sinh_1a7ab8c0005f0d58420f4e7fcb4dd960eb">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Sin_1ac0800a2d3fda961865736957b2f9659b">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Subtract_1a0be671f7a0a1c19e902d8d4047446b88">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Sign_1a9b3daed4060b074c849cf4a4cc1c7c6c">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Power_1a536a4af65a9cc12e6867dddb5b2e92e2">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Equal_1a7aad1c2451e7ddeadb7f9b7093fec64a">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Select_1afae2baa26885cdcbd9aab1fc58253b35">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1xla_1_1op_1_1Tuple_1a9019a571cd2d3bbc7701def3a55c87a4">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Remainder_1aa236d6d1fb84c0de07094dd1b9b9b3a4">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1GetOutputElement_1a85b9b42e24b10bd50e70b233d17df99e">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Dot_1a4ed9928bba9f74aa7802496551641a41">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Reverse_1ae7a0da2780421ad1029f444e38352ce0">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1OneHot_1a11b24ad74cf827c0f655a1cb523361aa">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Parameter_1a1d6a992f1d820b2621a4e926bac8db32">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Min_1ae23fbdf9e5e4d9b339911b6984a687b4">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Max_1a436645c821f657a16496aaf8b565045c">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1ReluBackprop_1af6aec87f48e4315be2d1b9491ac62646">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1ReduceWindow_1ae898e0afcacd4ba3b834cef5e83d5f23">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Reshape_1a69fa73222083d08698ae7f204c8aa014">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1AvgPool_1ae8eb5e4394c821782ba262e70ec907a0">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Slice_1a8f8a64d6d92c1bd96f3c158a935eb110">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Pad_1a30bf514c278683de9d14fd4b6159b2ec">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1MaxPool_1aa5486620ea263d6ffe0c34533f33e45c">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1ReplaceSlice_1ae1cfbe685881de934dbf2ffeb3081478">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1SelectAndScatter_1a07a9895293cf1fd2ec328f60a488a421">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Product_1a8743823540672f2dac8ff3ff1fc871c0">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Sum_1af36e054942b2cb81928bb945cd037774">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Reduce_1a64bc402201057358dce9caf9a459bf6b">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1MaxPoolBackprop_1a70e2ffffd889128a16fda67693f6c5e5">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1AvgPoolBackprop_1a643170007fbd5515c6d353420a5d3a65">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Convolution_1a49dfeaf50c5a6ab1884e1e9129f323f8">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Constant_1ae0423164d6e64a12ee347c3666f89712">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1ConvolutionBackpropData_1ac66be7bc5e99d0ca56cafe0239407d38">copy_with_new_args</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1ConvolutionBackpropFilters_1a4e0a9bc79bf52780851b7074e7a2848b">copy_with_new_args</reimplementedby>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;&gt; &amp;</type>
          <declname>new_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1abb77c47e270bdf0622587ee86919b492" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classngraph_1_1Function" kindref="compound">Function</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; Function &gt; &gt; Node::get_functions</definition>
        <argsstring>() const</argsstring>
        <name>get_functions</name>
        <reimplementedby refid="classngraph_1_1op_1_1FunctionCall_a4a30060a7bc404461cc7fb070c48bd27_1a4a30060a7bc404461cc7fb070c48bd27">get_functions</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1ReduceWindow_ad88f0ec04ec6d01a5eb3f16bb250982d_1ad88f0ec04ec6d01a5eb3f16bb250982d">get_functions</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1SelectAndScatter_acf9a243e4cbaee4e1c39a31df9d5b84c_1acf9a243e4cbaee4e1c39a31df9d5b84c">get_functions</reimplementedby>
        <reimplementedby refid="classngraph_1_1op_1_1Reduce_ae3fde66e7e23c8b309c6cb26457faacb_1ae3fde66e7e23c8b309c6cb26457faacb">get_functions</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="166" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1Node_1a17548877a029631148b2fa00c2f11fcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Node::has_same_type</definition>
        <argsstring>(std::shared_ptr&lt; const Node &gt; node) const</argsstring>
        <name>has_same_type</name>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="169" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.cpp" bodystart="291" bodyend="306"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classngraph_1_1Node_1adf69835ede7a6b36c6d646ce9259eac0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacengraph_1a193a29e9e6878bb1690debde6f87bdee" kindref="member">Nodes</ref> &amp;</type>
        <definition>Nodes&amp; ngraph::Node::get_arguments_FOR_GRAPH_REWRITE_ONLY</definition>
        <argsstring>()</argsstring>
        <name>get_arguments_FOR_GRAPH_REWRITE_ONLY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="190" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="190" bodyend="190"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Nodes are the backbone of the graph of Value dataflow. Every node has zero or more nodes as arguments and one value, which is either a tensor view or a (possibly empty) tuple of values. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="231">
        <label>ngraph::op::Not</label>
        <link refid="classngraph_1_1op_1_1Not"/>
        <childnode refid="229" relation="public-inheritance">
        </childnode>
      </node>
      <node id="250">
        <label>ngraph::op::Tanh</label>
        <link refid="classngraph_1_1op_1_1Tanh"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="186">
        <label>ngraph::op::BatchNorm</label>
        <link refid="classngraph_1_1op_1_1BatchNorm"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="255">
        <label>ngraph::xla::op::Tuple</label>
        <link refid="classngraph_1_1xla_1_1op_1_1Tuple"/>
        <childnode refid="176" relation="public-inheritance">
        </childnode>
      </node>
      <node id="218">
        <label>ngraph::op::Multiply</label>
        <link refid="classngraph_1_1op_1_1Multiply"/>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="176">
        <label>ngraph::Node</label>
        <link refid="classngraph_1_1Node"/>
        <childnode refid="177" relation="public-inheritance">
        </childnode>
      </node>
      <node id="232">
        <label>ngraph::op::util::UnaryElementwiseArithmetic</label>
        <link refid="classngraph_1_1op_1_1util_1_1UnaryElementwiseArithmetic"/>
        <childnode refid="229" relation="public-inheritance">
        </childnode>
      </node>
      <node id="183">
        <label>ngraph::op::util::RequiresTensorViewArgs</label>
        <link refid="classngraph_1_1op_1_1util_1_1RequiresTensorViewArgs"/>
        <childnode refid="181" relation="public-inheritance">
        </childnode>
      </node>
      <node id="200">
        <label>ngraph::op::ReluBackprop</label>
        <link refid="classngraph_1_1op_1_1ReluBackprop"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="195">
        <label>ngraph::op::MaxPoolBackprop</label>
        <link refid="classngraph_1_1op_1_1MaxPoolBackprop"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="217">
        <label>ngraph::op::Minimum</label>
        <link refid="classngraph_1_1op_1_1Minimum"/>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="211">
        <label>ngraph::op::Sum</label>
        <link refid="classngraph_1_1op_1_1Sum"/>
        <childnode refid="207" relation="public-inheritance">
        </childnode>
      </node>
      <node id="236">
        <label>ngraph::op::Atan</label>
        <link refid="classngraph_1_1op_1_1Atan"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="238">
        <label>ngraph::op::Cos</label>
        <link refid="classngraph_1_1op_1_1Cos"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="247">
        <label>ngraph::op::Sinh</label>
        <link refid="classngraph_1_1op_1_1Sinh"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="244">
        <label>ngraph::op::Relu</label>
        <link refid="classngraph_1_1op_1_1Relu"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="249">
        <label>ngraph::op::Tan</label>
        <link refid="classngraph_1_1op_1_1Tan"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="221">
        <label>ngraph::op::Subtract</label>
        <link refid="classngraph_1_1op_1_1Subtract"/>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="201">
        <label>ngraph::op::ReplaceSlice</label>
        <link refid="classngraph_1_1op_1_1ReplaceSlice"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="197">
        <label>ngraph::op::Pad</label>
        <link refid="classngraph_1_1op_1_1Pad"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="239">
        <label>ngraph::op::Cosh</label>
        <link refid="classngraph_1_1op_1_1Cosh"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="224">
        <label>ngraph::op::Greater</label>
        <link refid="classngraph_1_1op_1_1Greater"/>
        <childnode refid="222" relation="public-inheritance">
        </childnode>
      </node>
      <node id="190">
        <label>ngraph::op::ConvolutionBackpropData</label>
        <link refid="classngraph_1_1op_1_1ConvolutionBackpropData"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="178">
        <label>ngraph::op::Constant</label>
        <link refid="classngraph_1_1op_1_1Constant"/>
        <childnode refid="176" relation="public-inheritance">
        </childnode>
      </node>
      <node id="213">
        <label>ngraph::op::util::BinaryElementwiseArithmetic</label>
        <link refid="classngraph_1_1op_1_1util_1_1BinaryElementwiseArithmetic"/>
        <childnode refid="212" relation="public-inheritance">
        </childnode>
      </node>
      <node id="194">
        <label>ngraph::op::MaxPool</label>
        <link refid="classngraph_1_1op_1_1MaxPool"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="235">
        <label>ngraph::op::Asin</label>
        <link refid="classngraph_1_1op_1_1Asin"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="234">
        <label>ngraph::op::Acos</label>
        <link refid="classngraph_1_1op_1_1Acos"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="223">
        <label>ngraph::op::Equal</label>
        <link refid="classngraph_1_1op_1_1Equal"/>
        <childnode refid="222" relation="public-inheritance">
        </childnode>
      </node>
      <node id="198">
        <label>ngraph::op::Reduce</label>
        <link refid="classngraph_1_1op_1_1Reduce"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="179">
        <label>ngraph::op::FunctionCall</label>
        <link refid="classngraph_1_1op_1_1FunctionCall"/>
        <childnode refid="176" relation="public-inheritance">
        </childnode>
      </node>
      <node id="212">
        <label>ngraph::op::util::BinaryElementwise</label>
        <link refid="classngraph_1_1op_1_1util_1_1BinaryElementwise"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="207">
        <label>ngraph::op::util::ArithmeticReduction</label>
        <link refid="classngraph_1_1op_1_1util_1_1ArithmeticReduction"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="209">
        <label>ngraph::op::Min</label>
        <link refid="classngraph_1_1op_1_1Min"/>
        <childnode refid="207" relation="public-inheritance">
        </childnode>
      </node>
      <node id="187">
        <label>ngraph::op::Broadcast</label>
        <link refid="classngraph_1_1op_1_1Broadcast"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="214">
        <label>ngraph::op::Add</label>
        <link refid="classngraph_1_1op_1_1Add"/>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="233">
        <label>ngraph::op::Abs</label>
        <link refid="classngraph_1_1op_1_1Abs"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="192">
        <label>ngraph::op::Dot</label>
        <link refid="classngraph_1_1op_1_1Dot"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="237">
        <label>ngraph::op::Ceiling</label>
        <link refid="classngraph_1_1op_1_1Ceiling"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="220">
        <label>ngraph::op::Remainder</label>
        <link refid="classngraph_1_1op_1_1Remainder"/>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="241">
        <label>ngraph::op::Floor</label>
        <link refid="classngraph_1_1op_1_1Floor"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="248">
        <label>ngraph::op::Sqrt</label>
        <link refid="classngraph_1_1op_1_1Sqrt"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="208">
        <label>ngraph::op::Max</label>
        <link refid="classngraph_1_1op_1_1Max"/>
        <childnode refid="207" relation="public-inheritance">
        </childnode>
      </node>
      <node id="222">
        <label>ngraph::op::util::BinaryElementwiseComparison</label>
        <link refid="classngraph_1_1op_1_1util_1_1BinaryElementwiseComparison"/>
        <childnode refid="212" relation="public-inheritance">
        </childnode>
      </node>
      <node id="251">
        <label>ngraph::runtime::cpu::op::ConvertLayout</label>
        <link refid="classngraph_1_1runtime_1_1cpu_1_1op_1_1ConvertLayout"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="228">
        <label>ngraph::op::NotEqual</label>
        <link refid="classngraph_1_1op_1_1NotEqual"/>
        <childnode refid="222" relation="public-inheritance">
        </childnode>
      </node>
      <node id="184">
        <label>ngraph::op::AvgPool</label>
        <link refid="classngraph_1_1op_1_1AvgPool"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="242">
        <label>ngraph::op::Log</label>
        <link refid="classngraph_1_1op_1_1Log"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="254">
        <label>ngraph::pattern::op::Label</label>
        <link refid="classngraph_1_1pattern_1_1op_1_1Label"/>
        <childnode refid="252" relation="public-inheritance">
        </childnode>
      </node>
      <node id="182">
        <label>ngraph::op::Parameter</label>
        <link refid="classngraph_1_1op_1_1Parameter"/>
        <childnode refid="181" relation="public-inheritance">
        </childnode>
      </node>
      <node id="240">
        <label>ngraph::op::Exp</label>
        <link refid="classngraph_1_1op_1_1Exp"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="205">
        <label>ngraph::op::SelectAndScatter</label>
        <link refid="classngraph_1_1op_1_1SelectAndScatter"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="180">
        <label>ngraph::op::GetOutputElement</label>
        <link refid="classngraph_1_1op_1_1GetOutputElement"/>
        <childnode refid="176" relation="public-inheritance">
        </childnode>
      </node>
      <node id="230">
        <label>ngraph::op::Convert</label>
        <link refid="classngraph_1_1op_1_1Convert"/>
        <childnode refid="229" relation="public-inheritance">
        </childnode>
      </node>
      <node id="202">
        <label>ngraph::op::Reshape</label>
        <link refid="classngraph_1_1op_1_1Reshape"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="177">
        <label>std::enable_shared_from_this&lt; Node &gt;</label>
      </node>
      <node id="188">
        <label>ngraph::op::Concat</label>
        <link refid="classngraph_1_1op_1_1Concat"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="253">
        <label>ngraph::pattern::op::Any</label>
        <link refid="classngraph_1_1pattern_1_1op_1_1Any"/>
        <childnode refid="252" relation="public-inheritance">
        </childnode>
      </node>
      <node id="252">
        <label>ngraph::pattern::op::Pattern</label>
        <link refid="classngraph_1_1pattern_1_1op_1_1Pattern"/>
        <childnode refid="176" relation="public-inheritance">
        </childnode>
      </node>
      <node id="219">
        <label>ngraph::op::Power</label>
        <link refid="classngraph_1_1op_1_1Power"/>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="243">
        <label>ngraph::op::Negative</label>
        <link refid="classngraph_1_1op_1_1Negative"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="181">
        <label>ngraph::op::Op</label>
        <link refid="classngraph_1_1op_1_1Op"/>
        <childnode refid="176" relation="public-inheritance">
        </childnode>
      </node>
      <node id="227">
        <label>ngraph::op::LessEq</label>
        <link refid="classngraph_1_1op_1_1LessEq"/>
        <childnode refid="222" relation="public-inheritance">
        </childnode>
      </node>
      <node id="210">
        <label>ngraph::op::Product</label>
        <link refid="classngraph_1_1op_1_1Product"/>
        <childnode refid="207" relation="public-inheritance">
        </childnode>
      </node>
      <node id="215">
        <label>ngraph::op::Divide</label>
        <link refid="classngraph_1_1op_1_1Divide"/>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="206">
        <label>ngraph::op::Slice</label>
        <link refid="classngraph_1_1op_1_1Slice"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="245">
        <label>ngraph::op::Sign</label>
        <link refid="classngraph_1_1op_1_1Sign"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="199">
        <label>ngraph::op::ReduceWindow</label>
        <link refid="classngraph_1_1op_1_1ReduceWindow"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="203">
        <label>ngraph::op::Reverse</label>
        <link refid="classngraph_1_1op_1_1Reverse"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="246">
        <label>ngraph::op::Sin</label>
        <link refid="classngraph_1_1op_1_1Sin"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="226">
        <label>ngraph::op::Less</label>
        <link refid="classngraph_1_1op_1_1Less"/>
        <childnode refid="222" relation="public-inheritance">
        </childnode>
      </node>
      <node id="204">
        <label>ngraph::op::Select</label>
        <link refid="classngraph_1_1op_1_1Select"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="191">
        <label>ngraph::op::ConvolutionBackpropFilters</label>
        <link refid="classngraph_1_1op_1_1ConvolutionBackpropFilters"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="185">
        <label>ngraph::op::AvgPoolBackprop</label>
        <link refid="classngraph_1_1op_1_1AvgPoolBackprop"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="196">
        <label>ngraph::op::OneHot</label>
        <link refid="classngraph_1_1op_1_1OneHot"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="193">
        <label>ngraph::op::MatmulBias</label>
        <link refid="classngraph_1_1op_1_1MatmulBias"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="229">
        <label>ngraph::op::util::UnaryElementwise</label>
        <link refid="classngraph_1_1op_1_1util_1_1UnaryElementwise"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="189">
        <label>ngraph::op::Convolution</label>
        <link refid="classngraph_1_1op_1_1Convolution"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="216">
        <label>ngraph::op::Maximum</label>
        <link refid="classngraph_1_1op_1_1Maximum"/>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="225">
        <label>ngraph::op::GreaterEq</label>
        <link refid="classngraph_1_1op_1_1GreaterEq"/>
        <childnode refid="222" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="256">
        <label>ngraph::Node</label>
        <link refid="classngraph_1_1Node"/>
        <childnode refid="257" relation="public-inheritance">
        </childnode>
        <childnode refid="258" relation="usage">
          <edgelabel>m_outputs</edgelabel>
        </childnode>
        <childnode refid="266" relation="usage">
          <edgelabel>liveness_live_list</edgelabel>
          <edgelabel>liveness_free_list</edgelabel>
          <edgelabel>liveness_new_list</edgelabel>
        </childnode>
        <childnode refid="274" relation="usage">
          <edgelabel>m_users</edgelabel>
        </childnode>
        <childnode refid="276" relation="usage">
          <edgelabel>m_inputs</edgelabel>
        </childnode>
        <childnode refid="277" relation="usage">
          <edgelabel>m_adjoint_map</edgelabel>
        </childnode>
        <childnode refid="269" relation="usage">
          <edgelabel>m_node_type</edgelabel>
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="263">
        <label>K</label>
      </node>
      <node id="265">
        <label>T</label>
      </node>
      <node id="274">
        <label>std::multiset&lt; ngraph::Node *&gt;</label>
        <childnode refid="256" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="275" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="280">
        <label>std::unordered_map&lt; K, T &gt;</label>
        <childnode refid="263" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="265" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="277">
        <label>std::unordered_map&lt; ngraph::Node *, ngraph::autodiff::Adjoints &gt;</label>
        <childnode refid="278" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="256" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="280" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *, ngraph::autodiff::Adjoints &gt;</edgelabel>
        </childnode>
      </node>
      <node id="268">
        <label>ngraph::element::Type</label>
        <link refid="classngraph_1_1element_1_1Type"/>
      </node>
      <node id="259">
        <label>ngraph::descriptor::Output</label>
        <link refid="classngraph_1_1descriptor_1_1Output"/>
        <childnode refid="260" relation="usage">
          <edgelabel>m_inputs</edgelabel>
        </childnode>
        <childnode refid="256" relation="usage">
          <edgelabel>m_node</edgelabel>
        </childnode>
      </node>
      <node id="267">
        <label>ngraph::descriptor::Tensor</label>
        <link refid="classngraph_1_1descriptor_1_1Tensor"/>
        <childnode refid="268" relation="usage">
          <edgelabel>m_element_type</edgelabel>
        </childnode>
        <childnode refid="269" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
        <childnode refid="271" relation="usage">
          <edgelabel>m_primary_tensor_view</edgelabel>
        </childnode>
      </node>
      <node id="271">
        <label>ngraph::descriptor::PrimaryTensorView</label>
        <link refid="classngraph_1_1descriptor_1_1PrimaryTensorView"/>
        <childnode refid="272" relation="public-inheritance">
        </childnode>
        <childnode refid="267" relation="usage">
          <edgelabel>m_tensor</edgelabel>
        </childnode>
      </node>
      <node id="272">
        <label>ngraph::descriptor::TensorView</label>
        <link refid="classngraph_1_1descriptor_1_1TensorView"/>
        <childnode refid="269" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="258">
        <label>std::deque&lt; ngraph::descriptor::Output &gt;</label>
        <childnode refid="259" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="264" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="270">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="257">
        <label>std::enable_shared_from_this&lt; Node &gt;</label>
      </node>
      <node id="260">
        <label>std::set&lt; ngraph::descriptor::Input *&gt;</label>
        <childnode refid="261" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="262" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Input *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="262">
        <label>std::set&lt; K &gt;</label>
        <childnode refid="263" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="261">
        <label>ngraph::descriptor::Input</label>
        <link refid="classngraph_1_1descriptor_1_1Input"/>
        <childnode refid="259" relation="usage">
          <edgelabel>m_output</edgelabel>
        </childnode>
        <childnode refid="256" relation="usage">
          <edgelabel>m_node</edgelabel>
        </childnode>
      </node>
      <node id="275">
        <label>std::multiset&lt; K &gt;</label>
        <childnode refid="263" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="276">
        <label>std::deque&lt; ngraph::descriptor::Input &gt;</label>
        <childnode refid="261" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="264" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Input &gt;</edgelabel>
        </childnode>
      </node>
      <node id="273">
        <label>std::unordered_set&lt; K &gt;</label>
        <childnode refid="263" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="279">
        <label>std::unordered_map&lt; ngraph::Node *, std::shared_ptr&lt; ngraph::Node &gt; &gt;</label>
        <childnode refid="256" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="280" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *, std::shared_ptr&lt; ngraph::Node &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="266">
        <label>std::unordered_set&lt; ngraph::descriptor::Tensor *&gt;</label>
        <childnode refid="267" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="273" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Tensor *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="278">
        <label>ngraph::autodiff::Adjoints</label>
        <link refid="classngraph_1_1autodiff_1_1Adjoints"/>
        <childnode refid="279" relation="usage">
          <edgelabel>m_adjoint_map</edgelabel>
        </childnode>
      </node>
      <node id="264">
        <label>std::deque&lt; T &gt;</label>
        <childnode refid="265" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="269">
        <label>std::string</label>
        <childnode refid="270" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" line="46" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/node.hpp" bodystart="45" bodyend="191"/>
    <listofallmembers>
      <member refid="classngraph_1_1Node_1a1bac19895a096bb5772f6a6c120b3813" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>add_output</name></member>
      <member refid="classngraph_1_1Node_1acb7e15e5bd3da01a48020ccf4f0e6b7e" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>autodiff::Adjoints</name></member>
      <member refid="classngraph_1_1Node_1a5f3de445063d95cb31842e3a44e487c8" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>backprop_node</name></member>
      <member refid="classngraph_1_1Node_1a99c230728fde81ca9e64ed393d0728c4" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>clear_arguments</name></member>
      <member refid="classngraph_1_1Node_1a0c3c1afcdb7effe100c653b86a2eb56e" prot="public" virt="pure-virtual"><scope>ngraph::Node</scope><name>copy_with_new_args</name></member>
      <member refid="classngraph_1_1Node_1a92598fdffd86cf6fd3adf0081e041d2f" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>description</name></member>
      <member refid="classngraph_1_1Node_1a360414cffaaabf2b3cb659cc7244b3bf" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>descriptor::Input</name></member>
      <member refid="classngraph_1_1Node_1a423c05a93bb628e8c311b631fb6a582c" prot="protected" virt="virtual"><scope>ngraph::Node</scope><name>generate_adjoints</name></member>
      <member refid="classngraph_1_1Node_1adf69835ede7a6b36c6d646ce9259eac0" prot="private" virt="non-virtual"><scope>ngraph::Node</scope><name>get_arguments_FOR_GRAPH_REWRITE_ONLY</name></member>
      <member refid="classngraph_1_1Node_1a08ce613a6a22b1083c05321f0dced2a6" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_element_type</name></member>
      <member refid="classngraph_1_1Node_1abb77c47e270bdf0622587ee86919b492" prot="public" virt="virtual"><scope>ngraph::Node</scope><name>get_functions</name></member>
      <member refid="classngraph_1_1Node_1a98841a99a32bdcf64a371ff2aed2abc1" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_input_element_type</name></member>
      <member refid="classngraph_1_1Node_1aa7aaefcd4db958482315af48cb221a6c" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_input_op</name></member>
      <member refid="classngraph_1_1Node_1ac9b5aed803ef1f50a02a87dc81034ffe" prot="public" virt="virtual"><scope>ngraph::Node</scope><name>get_input_ops</name></member>
      <member refid="classngraph_1_1Node_1a9ff5f656d6b183cc00af753ec6b6144a" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_input_shape</name></member>
      <member refid="classngraph_1_1Node_1a69c6620b65b11187bf367a2d0e440699" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_input_size</name></member>
      <member refid="classngraph_1_1Node_1a3e88cf704f45f337a48d79a16a54e2c7" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_inputs</name></member>
      <member refid="classngraph_1_1Node_1a3d47e40f640c1469db01a33611a993e0" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_inputs</name></member>
      <member refid="classngraph_1_1Node_1a7a189270f6c1d02aa62c11b82d837bfb" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_instance_id</name></member>
      <member refid="classngraph_1_1Node_1ab0228a9136af1c06e6c32503871aa037" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_name</name></member>
      <member refid="classngraph_1_1Node_1a49900b3c7bc6ee44c466a622ccf52f71" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_node_id</name></member>
      <member refid="classngraph_1_1Node_1a91ccdcd6a30ca5a265c74f0f2734210b" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_output_element_type</name></member>
      <member refid="classngraph_1_1Node_1a68967e741c4045d22b712c5f644f5fa7" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_output_inputs</name></member>
      <member refid="classngraph_1_1Node_1a29bad373294c6939549d3302c6c5b45c" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_output_shape</name></member>
      <member refid="classngraph_1_1Node_1a9257d1be4e21fd9b4e834ee763c9ab03" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_output_size</name></member>
      <member refid="classngraph_1_1Node_1a0cb34ea18330939c53fbf7fe15603c32" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_output_tensor</name></member>
      <member refid="classngraph_1_1Node_1a1d7465ea8dda0f2f22c13929656d4291" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_output_tensor</name></member>
      <member refid="classngraph_1_1Node_1a45ae2b4b094d1d91d1c867dc30143d7a" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_output_tensor_view</name></member>
      <member refid="classngraph_1_1Node_1a75b38938bbc73474c8ea083b36da876c" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_output_tensor_view</name></member>
      <member refid="classngraph_1_1Node_1ac9aae122c66b9d82c240fd35c1e45250" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_outputs</name></member>
      <member refid="classngraph_1_1Node_1aed735e2ef3cda31846ec7f0a85ebd5d8" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_outputs</name></member>
      <member refid="classngraph_1_1Node_1a7a690a13f82f2420e221be4ef0987f56" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>get_shape</name></member>
      <member refid="classngraph_1_1Node_1a17548877a029631148b2fa00c2f11fcb" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>has_same_type</name></member>
      <member refid="classngraph_1_1Node_1ad0a48043e7858c06a2c91b25c2e88030" prot="public" virt="virtual"><scope>ngraph::Node</scope><name>is_commutative</name></member>
      <member refid="classngraph_1_1Node_1aa560b6ff7736831265cf1ce1346e6376" prot="public" virt="virtual"><scope>ngraph::Node</scope><name>is_constant</name></member>
      <member refid="classngraph_1_1Node_1ad3ae6e9bcbf2462a074847fdf47ab986" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>is_output</name></member>
      <member refid="classngraph_1_1Node_1ab700ac2bc2dec9138e3e1575b49075c6" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>is_parameter</name></member>
      <member refid="classngraph_1_1Node_ad69bb7920f3c6898754e0e938461fa8c_1ad69bb7920f3c6898754e0e938461fa8c" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>is_same_op_type</name></member>
      <member refid="classngraph_1_1Node_1a4f36c2c5ae51d1073d5bc23ab44cd72f" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>liveness_free_list</name></member>
      <member refid="classngraph_1_1Node_1aa58e8eb953c65c957dbdc56d7aa1dca5" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>liveness_live_list</name></member>
      <member refid="classngraph_1_1Node_1a572f0f0ef5cb7d309a86b1ffddda7da1" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>liveness_new_list</name></member>
      <member refid="classngraph_1_1Node_1a881dacc03050bbe8dc679455c99bfaa8" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>m_adjoint_map</name></member>
      <member refid="classngraph_1_1Node_1a86a3e522150e260079e4740f6ac010a7" prot="private" virt="non-virtual"><scope>ngraph::Node</scope><name>m_arguments</name></member>
      <member refid="classngraph_1_1Node_1a4f55bb2b70a88ddcc407a2930da034e7" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>m_inputs</name></member>
      <member refid="classngraph_1_1Node_1ae927d96858146fd4aad4f7a9d6c03e8e" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>m_instance_id</name></member>
      <member refid="classngraph_1_1Node_1a034da5cfe5401a01045f2fd8a9374ca7" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>m_is_output</name></member>
      <member refid="classngraph_1_1Node_1af72ec96a91723b94174886a947835f93" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>m_name</name></member>
      <member refid="classngraph_1_1Node_1afc2e9023e2895f9d7465062ce7bbd49e" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>m_next_instance_id</name></member>
      <member refid="classngraph_1_1Node_1a9d06e17d8a569f809d6d322edb405b24" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>m_node_type</name></member>
      <member refid="classngraph_1_1Node_1a177ab91b7609c16e8d57e1a7182f2bd0" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>m_outputs</name></member>
      <member refid="classngraph_1_1Node_1ad0f9c97f26a1ad8a42b7308f0e4773f5" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>m_users</name></member>
      <member refid="classngraph_1_1Node_1a0259d67ef3d6d82e38dbafa62d1463e2" prot="protected" virt="non-virtual"><scope>ngraph::Node</scope><name>Node</name></member>
      <member refid="classngraph_1_1Node_1a0cf3374865c171a6d862bc6a18125905" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>operator&lt;&lt;</name></member>
      <member refid="classngraph_1_1Node_1a0ae74ebc4b4d1ccf1d591763aaf47507" prot="private" virt="non-virtual"><scope>ngraph::Node</scope><name>replace_node_users_arguments</name></member>
      <member refid="classngraph_1_1Node_1a7bcdb7230a14c3c76a38392bfeacea1a" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>set_is_output</name></member>
      <member refid="classngraph_1_1Node_1a21c1e9e47d5447ba37982d1bbc57e79c" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>set_name</name></member>
      <member refid="classngraph_1_1Node_1a0a2d35a1430bc4671184eec8e1425640" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>set_value_type_checked</name></member>
      <member refid="classngraph_1_1Node_1a7500930e175b8f522d26988796727ce1" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>set_value_type_checked</name></member>
      <member refid="classngraph_1_1Node_1a1ca1186be7560ca6fd3a4bc1819526a1" prot="public" virt="non-virtual"><scope>ngraph::Node</scope><name>users</name></member>
      <member refid="classngraph_1_1Node_1a2a6579e8a1f70539b8e47d100eb06ae6" prot="protected" virt="virtual"><scope>ngraph::Node</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

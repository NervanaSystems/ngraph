<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespaceanonymous__namespace_02xla__tuple_8cpp_03" kind="namespace" language="C++">
    <compoundname>anonymous_namespace{xla_tuple.cpp}</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceanonymous__namespace_02xla__tuple_8cpp_03_1aced0cf77dc6438dfe58e6d76882c1de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void anonymous_namespace{xla_tuple.cpp}::flatten</definition>
        <argsstring>(vector&lt; shared_ptr&lt; T &gt;&gt; &amp;nodes, shared_ptr&lt; Node &gt; node)</argsstring>
        <name>flatten</name>
        <param>
          <type>vector&lt; shared_ptr&lt; T &gt;&gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" line="72" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" bodystart="72" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceanonymous__namespace_02xla__tuple_8cpp_03_1aef3e1bb41ccb59fd5226d9cd57613869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>vector&lt; shared_ptr&lt; T &gt; &gt;</type>
        <definition>vector&lt;shared_ptr&lt;T&gt; &gt; anonymous_namespace{xla_tuple.cpp}::flatten</definition>
        <argsstring>(const Nodes &amp;nodes)</argsstring>
        <name>flatten</name>
        <param>
          <type>const <ref refid="namespacengraph_1a193a29e9e6878bb1690debde6f87bdee" kindref="member">Nodes</ref> &amp;</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" line="95" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" bodystart="95" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceanonymous__namespace_02xla__tuple_8cpp_03_1a6c7af69400a7d07225bf7d8641d6b364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void anonymous_namespace{xla_tuple.cpp}::flatten</definition>
        <argsstring>(runtime::TensorViewPtrs &amp;tensors, shared_ptr&lt; runtime::TensorView &gt; tensor)</argsstring>
        <name>flatten</name>
        <param>
          <type>runtime::TensorViewPtrs &amp;</type>
          <declname>tensors</declname>
        </param>
        <param>
          <type>shared_ptr&lt; <ref refid="classngraph_1_1runtime_1_1TensorView" kindref="compound">runtime::TensorView</ref> &gt;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" line="159" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" bodystart="159" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceanonymous__namespace_02xla__tuple_8cpp_03_1a66f446a0d5e7f27dfa5bac58a0a99e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>runtime::TensorViewPtrs</type>
        <definition>runtime::TensorViewPtrs anonymous_namespace{xla_tuple.cpp}::flatten</definition>
        <argsstring>(const runtime::TensorViewPtrs &amp;tensors)</argsstring>
        <name>flatten</name>
        <param>
          <type>const runtime::TensorViewPtrs &amp;</type>
          <declname>tensors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" line="176" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" bodystart="176" bodyend="184"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" line="69" column="1"/>
  </compounddef>
</doxygen>

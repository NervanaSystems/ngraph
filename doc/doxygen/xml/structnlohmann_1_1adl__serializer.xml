<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structnlohmann_1_1adl__serializer" kind="struct" language="C++" prot="public">
    <compoundname>nlohmann::adl_serializer</compoundname>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
      </param>
      <param>
        <type>typename</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structnlohmann_1_1adl__serializer_ab39cad07c1a2bf4414d6cae5215b4e7a_1ab39cad07c1a2bf4414d6cae5215b4e7a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void nlohmann::adl_serializer&lt; typename, typename &gt;::from_json</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, ValueType &amp;val) noexcept(noexcept(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), val)))</argsstring>
        <name>from_json</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>convert a JSON value to any value type </para>        </briefdescription>
        <detaileddescription>
<para>This function is usually called by the <computeroutput>get()</computeroutput> function of the <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> class (either explicit or via conversion operators).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to write to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6866" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6866" bodyend="6870"/>
      </memberdef>
      <memberdef kind="function" id="structnlohmann_1_1adl__serializer_adf8cd96afe6ab243b67392dfe35ace89_1adf8cd96afe6ab243b67392dfe35ace89" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void nlohmann::adl_serializer&lt; typename, typename &gt;::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, ValueType &amp;&amp;val) noexcept(noexcept(::nlohmann::to_json(j, std::forward&lt; ValueType &gt;(val))))</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ValueType &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>convert any value type to a JSON value </para>        </briefdescription>
        <detaileddescription>
<para>This function is usually called by the constructors of the <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> class.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to read from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6882" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6882" bodyend="6886"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>default JSONSerializer template argument </para>    </briefdescription>
    <detaileddescription>
<para>This serializer ignores the template arguments and uses ADL (<ulink url="http://en.cppreference.com/w/cpp/language/adl">argument-dependent lookup</ulink>) for serialization. </para>    </detaileddescription>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="136" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="136" bodyend="-1"/>
    <listofallmembers>
      <member refid="structnlohmann_1_1adl__serializer_ab39cad07c1a2bf4414d6cae5215b4e7a_1ab39cad07c1a2bf4414d6cae5215b4e7a" prot="public" virt="non-virtual"><scope>nlohmann::adl_serializer</scope><name>from_json</name></member>
      <member refid="structnlohmann_1_1adl__serializer_adf8cd96afe6ab243b67392dfe35ace89_1adf8cd96afe6ab243b67392dfe35ace89" prot="public" virt="non-virtual"><scope>nlohmann::adl_serializer</scope><name>to_json</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

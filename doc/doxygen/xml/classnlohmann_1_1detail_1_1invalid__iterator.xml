<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classnlohmann_1_1detail_1_1invalid__iterator" kind="class" language="C++" prot="public">
    <compoundname>nlohmann::detail::invalid_iterator</compoundname>
    <basecompoundref refid="classnlohmann_1_1detail_1_1exception" prot="public" virt="non-virtual">nlohmann::detail::exception</basecompoundref>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1invalid__iterator_1a4e849260a3caa1b288c7e619130c6c09" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1detail_1_1invalid__iterator" kindref="compound">invalid_iterator</ref></type>
        <definition>static invalid_iterator nlohmann::detail::invalid_iterator::create</definition>
        <argsstring>(int id_, const std::string &amp;what_arg)</argsstring>
        <name>create</name>
        <param>
          <type>int</type>
          <declname>id_</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fab45cffe084dd3d20d928bee85e7b0f21" kindref="member">std::string</ref> &amp;</type>
          <declname>what_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="353" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="353" bodyend="357"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1invalid__iterator_1adf4a6697420f3bddb4addfc0b98f6ee2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::invalid_iterator::invalid_iterator</definition>
        <argsstring>(int id_, const char *what_arg)</argsstring>
        <name>invalid_iterator</name>
        <param>
          <type>int</type>
          <declname>id_</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>what_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="360" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="360" bodyend="361"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>exception indicating errors with iterators </para>    </briefdescription>
    <detaileddescription>
<para>This exception is thrown if iterators passed to a library function do not match the expected semantics.</para><para>Exceptions have ids 2xx.</para><para><table rows="15" cols="3"><row>
<entry thead="yes"><para>name / id  </para></entry><entry thead="yes"><para>example message  </para></entry><entry thead="yes"><para>description ----------<mdash/>   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.201  </para></entry><entry thead="no"><para>iterators are not compatible  </para></entry><entry thead="no"><para>The iterators passed to constructor basic_json(InputIT first, InputIT last) are not compatible, meaning they do not belong to the same container. Therefore, the range (<emphasis>first</emphasis>, <emphasis>last</emphasis>) is invalid.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.202  </para></entry><entry thead="no"><para>iterator does not fit current value  </para></entry><entry thead="no"><para>In an erase or insert function, the passed iterator <emphasis>pos</emphasis> does not belong to the JSON value for which the function was called. It hence does not define a valid position for the deletion/insertion.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.203  </para></entry><entry thead="no"><para>iterators do not fit current value  </para></entry><entry thead="no"><para>Either iterator passed to function erase(IteratorType first, IteratorType last) does not belong to the JSON value from which values shall be erased. It hence does not define a valid range to delete values from.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.204  </para></entry><entry thead="no"><para>iterators out of range  </para></entry><entry thead="no"><para>When an iterator range for a primitive type (number, boolean, or string) is passed to a constructor or an erase function, this range has to be exactly (begin(), end()), because this is the only way the single stored value is expressed. All other ranges are invalid.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.205  </para></entry><entry thead="no"><para>iterator out of range  </para></entry><entry thead="no"><para>When an iterator for a primitive type (number, boolean, or string) is passed to an erase function, the iterator has to be the begin() iterator, because it is the only way to address the stored value. All other iterators are invalid.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.206  </para></entry><entry thead="no"><para>cannot construct with iterators from null  </para></entry><entry thead="no"><para>The iterators passed to constructor basic_json(InputIT first, InputIT last) belong to a JSON null value and hence to not define a valid range.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.207  </para></entry><entry thead="no"><para>cannot use key() for non-object iterators  </para></entry><entry thead="no"><para>The key() member function can only be used on iterators belonging to a JSON object, because other types do not have a concept of a key.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.208  </para></entry><entry thead="no"><para>cannot use operator[] for object iterators  </para></entry><entry thead="no"><para>The operator[] to specify a concrete offset cannot be used on iterators belonging to a JSON object, because JSON objects are unordered.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.209  </para></entry><entry thead="no"><para>cannot use offsets with object iterators  </para></entry><entry thead="no"><para>The offset operators (+, -, +=, -=) cannot be used on iterators belonging to a JSON object, because JSON objects are unordered.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.210  </para></entry><entry thead="no"><para>iterators do not fit  </para></entry><entry thead="no"><para>The iterator range passed to the insert function are not compatible, meaning they do not belong to the same container. Therefore, the range (<emphasis>first</emphasis>, <emphasis>last</emphasis>) is invalid.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.211  </para></entry><entry thead="no"><para>passed iterators may not belong to container  </para></entry><entry thead="no"><para>The iterator range passed to the insert function must not be a subrange of the container to insert to.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.212  </para></entry><entry thead="no"><para>cannot compare iterators of different containers  </para></entry><entry thead="no"><para>When two iterators are compared, they must belong to the same container.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.213  </para></entry><entry thead="no"><para>cannot compare order of object iterators  </para></entry><entry thead="no"><para>The order of object iterators cannot be compared, because JSON objects are unordered.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.214  </para></entry><entry thead="no"><para>cannot get value  </para></entry><entry thead="no"><para>Cannot get value for iterator: Either the iterator belongs to a null value or it is an iterator to a primitive type (number, boolean, or string), but the iterator is different to begin().   </para></entry></row>
</table>
</para><para>{The following code shows how an <computeroutput><ref refid="classnlohmann_1_1detail_1_1invalid__iterator" kindref="compound">invalid_iterator</ref></computeroutput> exception can be caught.,<ref refid="classnlohmann_1_1detail_1_1invalid__iterator" kindref="compound">invalid_iterator</ref>}</para><para><simplesect kind="see"><para><ref refid="classnlohmann_1_1detail_1_1exception" kindref="compound">exception</ref> for the base class of the library exceptions </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1detail_1_1parse__error" kindref="compound">parse_error</ref> for exceptions indicating a parse error </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1detail_1_1type__error" kindref="compound">type_error</ref> for exceptions indicating executing a member function with a wrong type </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1detail_1_1out__of__range" kindref="compound">out_of_range</ref> for exceptions indicating access out of the defined range </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1detail_1_1other__error" kindref="compound">other_error</ref> for exceptions indicating other library errors</para></simplesect>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="3646">
        <label>nlohmann::detail::invalid_iterator</label>
        <link refid="classnlohmann_1_1detail_1_1invalid__iterator"/>
        <childnode refid="3647" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3648">
        <label>std::exception</label>
      </node>
      <node id="3647">
        <label>nlohmann::detail::exception</label>
        <link refid="classnlohmann_1_1detail_1_1exception"/>
        <childnode refid="3648" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3649">
        <label>nlohmann::detail::invalid_iterator</label>
        <link refid="classnlohmann_1_1detail_1_1invalid__iterator"/>
        <childnode refid="3650" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3651">
        <label>std::exception</label>
      </node>
      <node id="3650">
        <label>nlohmann::detail::exception</label>
        <link refid="classnlohmann_1_1detail_1_1exception"/>
        <childnode refid="3651" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="351" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="350" bodyend="362"/>
    <listofallmembers>
      <member refid="classnlohmann_1_1detail_1_1invalid__iterator_1a4e849260a3caa1b288c7e619130c6c09" prot="public" virt="non-virtual"><scope>nlohmann::detail::invalid_iterator</scope><name>create</name></member>
      <member refid="classnlohmann_1_1detail_1_1exception_1ae323ad0d53bc724414c2233164e65657" prot="protected" virt="non-virtual"><scope>nlohmann::detail::invalid_iterator</scope><name>exception</name></member>
      <member refid="classnlohmann_1_1detail_1_1exception_1a0d4589a3fb54e81646d986c05efa3b9a" prot="public" virt="non-virtual"><scope>nlohmann::detail::invalid_iterator</scope><name>id</name></member>
      <member refid="classnlohmann_1_1detail_1_1invalid__iterator_1adf4a6697420f3bddb4addfc0b98f6ee2" prot="private" virt="non-virtual"><scope>nlohmann::detail::invalid_iterator</scope><name>invalid_iterator</name></member>
      <member refid="classnlohmann_1_1detail_1_1exception_1abf41a7e9178356314082284e6cfea278" prot="protected" virt="non-virtual"><scope>nlohmann::detail::invalid_iterator</scope><name>name</name></member>
      <member refid="classnlohmann_1_1detail_1_1exception_1a0672c25ecdf14d1a071d4d6478a65af0" prot="public" virt="non-virtual"><scope>nlohmann::detail::invalid_iterator</scope><name>what</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="cpu__external__function_8cpp" kind="file" language="C++">
    <compoundname>cpu_external_function.cpp</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">fstream</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">typeindex</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">unordered_map</includes>
    <includes refid="code__writer_8hpp" local="yes">ngraph/codegen/code_writer.hpp</includes>
    <includes refid="compiler_8hpp" local="yes">ngraph/codegen/compiler.hpp</includes>
    <includes refid="execution__engine_8hpp" local="yes">ngraph/codegen/execution_engine.hpp</includes>
    <includes refid="input_8hpp" local="yes">ngraph/descriptor/input.hpp</includes>
    <includes refid="output_8hpp" local="yes">ngraph/descriptor/output.hpp</includes>
    <includes refid="primary__tensor__view_8hpp" local="yes">ngraph/descriptor/primary_tensor_view.hpp</includes>
    <includes refid="file__util_8hpp" local="yes">ngraph/file_util.hpp</includes>
    <includes refid="function_8hpp" local="yes">ngraph/function.hpp</includes>
    <includes refid="graph__util_8hpp" local="yes">ngraph/graph_util.hpp</includes>
    <includes refid="node_8hpp" local="yes">ngraph/node.hpp</includes>
    <includes refid="ops_2abs_8hpp" local="yes">ngraph/ops/abs.hpp</includes>
    <includes refid="ops_2acos_8hpp" local="yes">ngraph/ops/acos.hpp</includes>
    <includes refid="ops_2add_8hpp" local="yes">ngraph/ops/add.hpp</includes>
    <includes refid="ops_2allreduce_8hpp" local="yes">ngraph/ops/allreduce.hpp</includes>
    <includes refid="ops_2asin_8hpp" local="yes">ngraph/ops/asin.hpp</includes>
    <includes refid="ops_2atan_8hpp" local="yes">ngraph/ops/atan.hpp</includes>
    <includes refid="ops_2avg__pool_8hpp" local="yes">ngraph/ops/avg_pool.hpp</includes>
    <includes refid="batch__norm_8hpp" local="yes">ngraph/ops/batch_norm.hpp</includes>
    <includes refid="ops_2broadcast_8hpp" local="yes">ngraph/ops/broadcast.hpp</includes>
    <includes refid="ops_2ceiling_8hpp" local="yes">ngraph/ops/ceiling.hpp</includes>
    <includes refid="concatenate_8hpp" local="yes">ngraph/ops/concatenate.hpp</includes>
    <includes refid="ops_2constant_8hpp" local="yes">ngraph/ops/constant.hpp</includes>
    <includes refid="ops_2convert_8hpp" local="yes">ngraph/ops/convert.hpp</includes>
    <includes refid="ops_2convolution_8hpp" local="yes">ngraph/ops/convolution.hpp</includes>
    <includes refid="ops_2cos_8hpp" local="yes">ngraph/ops/cos.hpp</includes>
    <includes refid="ops_2cosh_8hpp" local="yes">ngraph/ops/cosh.hpp</includes>
    <includes refid="ops_2divide_8hpp" local="yes">ngraph/ops/divide.hpp</includes>
    <includes refid="ops_2dot_8hpp" local="yes">ngraph/ops/dot.hpp</includes>
    <includes refid="ops_2equal_8hpp" local="yes">ngraph/ops/equal.hpp</includes>
    <includes refid="ops_2exp_8hpp" local="yes">ngraph/ops/exp.hpp</includes>
    <includes refid="ops_2floor_8hpp" local="yes">ngraph/ops/floor.hpp</includes>
    <includes refid="function__call_8hpp" local="yes">ngraph/ops/function_call.hpp</includes>
    <includes refid="get__output__element_8hpp" local="yes">ngraph/ops/get_output_element.hpp</includes>
    <includes refid="ops_2greater_8hpp" local="yes">ngraph/ops/greater.hpp</includes>
    <includes refid="ops_2greater__eq_8hpp" local="yes">ngraph/ops/greater_eq.hpp</includes>
    <includes refid="ops_2less_8hpp" local="yes">ngraph/ops/less.hpp</includes>
    <includes refid="ops_2less__eq_8hpp" local="yes">ngraph/ops/less_eq.hpp</includes>
    <includes refid="ops_2log_8hpp" local="yes">ngraph/ops/log.hpp</includes>
    <includes refid="ops_2max_8hpp" local="yes">ngraph/ops/max.hpp</includes>
    <includes refid="ops_2max__pool_8hpp" local="yes">ngraph/ops/max_pool.hpp</includes>
    <includes refid="ops_2maximum_8hpp" local="yes">ngraph/ops/maximum.hpp</includes>
    <includes refid="ops_2min_8hpp" local="yes">ngraph/ops/min.hpp</includes>
    <includes refid="ops_2minimum_8hpp" local="yes">ngraph/ops/minimum.hpp</includes>
    <includes refid="ops_2multiply_8hpp" local="yes">ngraph/ops/multiply.hpp</includes>
    <includes refid="negative_8hpp" local="yes">ngraph/ops/negative.hpp</includes>
    <includes refid="ops_2not_8hpp" local="yes">ngraph/ops/not.hpp</includes>
    <includes refid="ops_2not__equal_8hpp" local="yes">ngraph/ops/not_equal.hpp</includes>
    <includes refid="ops_2one__hot_8hpp" local="yes">ngraph/ops/one_hot.hpp</includes>
    <includes refid="op_8hpp" local="yes">ngraph/ops/op.hpp</includes>
    <includes refid="ops_2pad_8hpp" local="yes">ngraph/ops/pad.hpp</includes>
    <includes refid="parameter_8hpp" local="yes">ngraph/ops/parameter.hpp</includes>
    <includes refid="ops_2power_8hpp" local="yes">ngraph/ops/power.hpp</includes>
    <includes refid="ops_2product_8hpp" local="yes">ngraph/ops/product.hpp</includes>
    <includes refid="ops_2reduce_8hpp" local="yes">ngraph/ops/reduce.hpp</includes>
    <includes refid="ops_2reduce__window_8hpp" local="yes">ngraph/ops/reduce_window.hpp</includes>
    <includes refid="ops_2relu_8hpp" local="yes">ngraph/ops/relu.hpp</includes>
    <includes refid="remainder_8hpp" local="yes">ngraph/ops/remainder.hpp</includes>
    <includes refid="ops_2replace__slice_8hpp" local="yes">ngraph/ops/replace_slice.hpp</includes>
    <includes refid="ops_2reshape_8hpp" local="yes">ngraph/ops/reshape.hpp</includes>
    <includes refid="ops_2reverse_8hpp" local="yes">ngraph/ops/reverse.hpp</includes>
    <includes refid="ops_2select_8hpp" local="yes">ngraph/ops/select.hpp</includes>
    <includes refid="ops_2select__and__scatter_8hpp" local="yes">ngraph/ops/select_and_scatter.hpp</includes>
    <includes refid="ops_2sign_8hpp" local="yes">ngraph/ops/sign.hpp</includes>
    <includes refid="ops_2sin_8hpp" local="yes">ngraph/ops/sin.hpp</includes>
    <includes refid="ops_2sinh_8hpp" local="yes">ngraph/ops/sinh.hpp</includes>
    <includes refid="ops_2slice_8hpp" local="yes">ngraph/ops/slice.hpp</includes>
    <includes refid="ops_2sqrt_8hpp" local="yes">ngraph/ops/sqrt.hpp</includes>
    <includes refid="ops_2subtract_8hpp" local="yes">ngraph/ops/subtract.hpp</includes>
    <includes refid="ops_2sum_8hpp" local="yes">ngraph/ops/sum.hpp</includes>
    <includes refid="ops_2tan_8hpp" local="yes">ngraph/ops/tan.hpp</includes>
    <includes refid="ops_2tanh_8hpp" local="yes">ngraph/ops/tanh.hpp</includes>
    <includes refid="dump__sorted_8hpp" local="yes">ngraph/pass/dump_sorted.hpp</includes>
    <includes refid="liveness_8hpp" local="yes">ngraph/pass/liveness.hpp</includes>
    <includes refid="pass_2manager_8hpp" local="yes">ngraph/pass/manager.hpp</includes>
    <includes refid="memory__layout_8hpp" local="yes">ngraph/pass/memory_layout.hpp</includes>
    <includes refid="core__fusion_8hpp" local="yes">ngraph/pattern/core_fusion.hpp</includes>
    <includes refid="cpu__backend_8hpp" local="yes">ngraph/runtime/cpu/cpu_backend.hpp</includes>
    <includes refid="cpu__call__frame_8hpp" local="yes">ngraph/runtime/cpu/cpu_call_frame.hpp</includes>
    <includes refid="cpu__emitter_8hpp" local="yes">ngraph/runtime/cpu/cpu_emitter.hpp</includes>
    <includes refid="cpu__external__function_8hpp" local="yes">ngraph/runtime/cpu/cpu_external_function.hpp</includes>
    <includes refid="cpu__tensor__view_8hpp" local="yes">ngraph/runtime/cpu/cpu_tensor_view.hpp</includes>
    <includes refid="cpu__tracing_8hpp" local="yes">ngraph/runtime/cpu/cpu_tracing.hpp</includes>
    <includes refid="mkldnn__utils_8hpp" local="yes">ngraph/runtime/cpu/mkldnn_utils.hpp</includes>
    <includes refid="convert__layout_8hpp" local="yes">ngraph/runtime/cpu/ops/convert_layout.hpp</includes>
    <includes refid="matmul__bias_8hpp" local="yes">ngraph/runtime/cpu/ops/matmul_bias.hpp</includes>
    <includes refid="cpu__assignment_8hpp" local="yes">ngraph/runtime/cpu/pass/cpu_assignment.hpp</includes>
    <includes refid="cpu__fusion_8hpp" local="yes">ngraph/runtime/cpu/pass/cpu_fusion.hpp</includes>
    <includes refid="cpu__layout_8hpp" local="yes">ngraph/runtime/cpu/pass/cpu_layout.hpp</includes>
    <incdepgraph>
      <node id="12292">
        <label>list</label>
      </node>
      <node id="12409">
        <label>locale</label>
      </node>
      <node id="12366">
        <label>ngraph/ops/subtract.hpp</label>
        <link refid="ops_2subtract_8hpp_source"/>
        <childnode refid="12308" relation="include">
        </childnode>
      </node>
      <node id="12411">
        <label>valarray</label>
      </node>
      <node id="12388">
        <label>ngraph/descriptor/buffer_pos.hpp</label>
        <link refid="buffer__pos_8hpp_source"/>
        <childnode refid="12389" relation="include">
        </childnode>
        <childnode refid="12390" relation="include">
        </childnode>
      </node>
      <node id="12290">
        <label>atomic</label>
      </node>
      <node id="12327">
        <label>ngraph/ops/equal.hpp</label>
        <link refid="ops_2equal_8hpp_source"/>
        <childnode refid="12328" relation="include">
        </childnode>
      </node>
      <node id="12394">
        <label>ngraph/runtime/cpu/cpu_tensor_view_wrapper.hpp</label>
        <link refid="cpu__tensor__view__wrapper_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12286" relation="include">
        </childnode>
        <childnode refid="12281" relation="include">
        </childnode>
      </node>
      <node id="12325">
        <label>ngraph/ops/divide.hpp</label>
        <link refid="ops_2divide_8hpp_source"/>
        <childnode refid="12308" relation="include">
        </childnode>
      </node>
      <node id="12268">
        <label>ngraph/codegen/compiler.hpp</label>
        <link refid="compiler_8hpp_source"/>
        <childnode refid="12269" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
      </node>
      <node id="12413">
        <label>ngraph/runtime/cpu/ops/convert_layout.hpp</label>
        <link refid="convert__layout_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12406">
        <label>iomanip</label>
      </node>
      <node id="12269">
        <label>functional</label>
      </node>
      <node id="12415">
        <label>ngraph/runtime/cpu/pass/cpu_assignment.hpp</label>
        <link refid="cpu__assignment_8hpp_source"/>
        <childnode refid="12371" relation="include">
        </childnode>
        <childnode refid="12393" relation="include">
        </childnode>
        <childnode refid="12397" relation="include">
        </childnode>
      </node>
      <node id="12363">
        <label>ngraph/ops/sinh.hpp</label>
        <link refid="ops_2sinh_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12355">
        <label>ngraph/ops/remainder.hpp</label>
        <link refid="remainder_8hpp_source"/>
        <childnode refid="12308" relation="include">
        </childnode>
      </node>
      <node id="12376">
        <label>limits</label>
      </node>
      <node id="12396">
        <label>ngraph/runtime/external_function.hpp</label>
        <link refid="external__function_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12260" relation="include">
        </childnode>
        <childnode refid="12261" relation="include">
        </childnode>
        <childnode refid="12262" relation="include">
        </childnode>
        <childnode refid="12289" relation="include">
        </childnode>
      </node>
      <node id="12408">
        <label>iterator</label>
      </node>
      <node id="12302">
        <label>ngraph/ops/abs.hpp</label>
        <link refid="ops_2abs_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12398">
        <label>ngraph/runtime/cpu/cpu_tracing.hpp</label>
        <link refid="cpu__tracing_8hpp_source"/>
        <childnode refid="12385" relation="include">
        </childnode>
        <childnode refid="12292" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12399" relation="include">
        </childnode>
        <childnode refid="12393" relation="include">
        </childnode>
      </node>
      <node id="12354">
        <label>ngraph/ops/relu.hpp</label>
        <link refid="ops_2relu_8hpp_source"/>
        <childnode refid="12293" relation="include">
        </childnode>
        <childnode refid="12296" relation="include">
        </childnode>
        <childnode refid="12305" relation="include">
        </childnode>
        <childnode refid="12303" relation="include">
        </childnode>
        <childnode refid="12315" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
      </node>
      <node id="12273">
        <label>ngraph/descriptor/tensor.hpp</label>
        <link refid="tensor_8hpp_source"/>
        <childnode refid="12274" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12275" relation="include">
        </childnode>
      </node>
      <node id="12322">
        <label>ngraph/ops/convolution.hpp</label>
        <link refid="ops_2convolution_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12385">
        <label>cstdint</label>
      </node>
      <node id="12378">
        <label>ngraph/pass/graph_rewrite.hpp</label>
        <link refid="graph__rewrite_8hpp_source"/>
        <childnode refid="12269" relation="include">
        </childnode>
        <childnode refid="12279" relation="include">
        </childnode>
        <childnode refid="12371" relation="include">
        </childnode>
      </node>
      <node id="12275">
        <label>ngraph/types/type.hpp</label>
        <link refid="type_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12276" relation="include">
        </childnode>
        <childnode refid="12281" relation="include">
        </childnode>
      </node>
      <node id="12285">
        <label>ngraph/descriptor/output.hpp</label>
        <link refid="output_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12279" relation="include">
        </childnode>
        <childnode refid="12272" relation="include">
        </childnode>
        <childnode refid="12286" relation="include">
        </childnode>
      </node>
      <node id="12333">
        <label>ngraph/ops/greater.hpp</label>
        <link refid="ops_2greater_8hpp_source"/>
        <childnode refid="12328" relation="include">
        </childnode>
      </node>
      <node id="12293">
        <label>ngraph/node.hpp</label>
        <link refid="node_8hpp_source"/>
        <childnode refid="12290" relation="include">
        </childnode>
        <childnode refid="12266" relation="include">
        </childnode>
        <childnode refid="12274" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12279" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12260" relation="include">
        </childnode>
        <childnode refid="12262" relation="include">
        </childnode>
        <childnode refid="12294" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12295" relation="include">
        </childnode>
        <childnode refid="12278" relation="include">
        </childnode>
        <childnode refid="12272" relation="include">
        </childnode>
        <childnode refid="12285" relation="include">
        </childnode>
        <childnode refid="12273" relation="include">
        </childnode>
        <childnode refid="12275" relation="include">
        </childnode>
      </node>
      <node id="12381">
        <label>ngraph/runtime/cpu/cpu_call_frame.hpp</label>
        <link refid="cpu__call__frame_8hpp_source"/>
        <childnode refid="12269" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12289" relation="include">
        </childnode>
        <childnode refid="12382" relation="include">
        </childnode>
        <childnode refid="12384" relation="include">
        </childnode>
        <childnode refid="12391" relation="include">
        </childnode>
        <childnode refid="12383" relation="include">
        </childnode>
      </node>
      <node id="12323">
        <label>ngraph/ops/cos.hpp</label>
        <link refid="ops_2cos_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12356">
        <label>ngraph/ops/replace_slice.hpp</label>
        <link refid="ops_2replace__slice_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12403">
        <label>cmath</label>
      </node>
      <node id="12389">
        <label>cassert</label>
      </node>
      <node id="12265">
        <label>ngraph/log.hpp</label>
        <link refid="log_8hpp_source"/>
        <childnode refid="12266" relation="include">
        </childnode>
        <childnode refid="12264" relation="include">
        </childnode>
        <childnode refid="12267" relation="include">
        </childnode>
      </node>
      <node id="12267">
        <label>stdexcept</label>
      </node>
      <node id="12410">
        <label>numeric</label>
      </node>
      <node id="12371">
        <label>ngraph/pass/pass.hpp</label>
        <link refid="pass_8hpp_source"/>
        <childnode refid="12292" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12289" relation="include">
        </childnode>
        <childnode refid="12293" relation="include">
        </childnode>
        <childnode refid="12372" relation="include">
        </childnode>
      </node>
      <node id="12417">
        <label>ngraph/runtime/cpu/pass/cpu_layout.hpp</label>
        <link refid="cpu__layout_8hpp_source"/>
        <childnode refid="12371" relation="include">
        </childnode>
        <childnode refid="12393" relation="include">
        </childnode>
      </node>
      <node id="12305">
        <label>ngraph/ops/util/requires_tensor_view_args.hpp</label>
        <link refid="requires__tensor__view__args_8hpp_source"/>
        <childnode refid="12278" relation="include">
        </childnode>
        <childnode refid="12296" relation="include">
        </childnode>
      </node>
      <node id="12258">
        <label>string</label>
      </node>
      <node id="12324">
        <label>ngraph/ops/cosh.hpp</label>
        <link refid="ops_2cosh_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12395">
        <label>ngraph/runtime/cpu/mkldnn_emitter.hpp</label>
        <link refid="mkldnn__emitter_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12262" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12386" relation="include">
        </childnode>
        <childnode refid="12278" relation="include">
        </childnode>
      </node>
      <node id="12307">
        <label>ngraph/ops/add.hpp</label>
        <link refid="ops_2add_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12308" relation="include">
        </childnode>
      </node>
      <node id="12282">
        <label>map</label>
      </node>
      <node id="12391">
        <label>ngraph/runtime/cpu/cpu_runtime_context.hpp</label>
        <link refid="cpu__runtime__context_8hpp_source"/>
        <childnode refid="12301" relation="include">
        </childnode>
        <childnode refid="12385" relation="include">
        </childnode>
      </node>
      <node id="12340">
        <label>ngraph/ops/max_pool.hpp</label>
        <link refid="ops_2max__pool_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12370">
        <label>ngraph/pass/dump_sorted.hpp</label>
        <link refid="dump__sorted_8hpp_source"/>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12371" relation="include">
        </childnode>
      </node>
      <node id="12294">
        <label>unordered_set</label>
      </node>
      <node id="12310">
        <label>ngraph/ops/allreduce.hpp</label>
        <link refid="ops_2allreduce_8hpp_source"/>
      </node>
      <node id="12299">
        <label>ngraph/graph_util.hpp</label>
        <link refid="graph__util_8hpp_source"/>
        <childnode refid="12300" relation="include">
        </childnode>
        <childnode refid="12301" relation="include">
        </childnode>
        <childnode refid="12266" relation="include">
        </childnode>
        <childnode refid="12269" relation="include">
        </childnode>
        <childnode refid="12274" relation="include">
        </childnode>
        <childnode refid="12292" relation="include">
        </childnode>
        <childnode refid="12282" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12264" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12262" relation="include">
        </childnode>
        <childnode refid="12294" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
      </node>
      <node id="12379">
        <label>ngraph/runtime/cpu/cpu_backend.hpp</label>
        <link refid="cpu__backend_8hpp_source"/>
        <childnode refid="12380" relation="include">
        </childnode>
      </node>
      <node id="12390">
        <label>ngraph/descriptor/buffer.hpp</label>
        <link refid="buffer_8hpp_source"/>
      </node>
      <node id="12393">
        <label>ngraph/runtime/cpu/cpu_external_function.hpp</label>
        <link refid="cpu__external__function_8hpp_source"/>
        <childnode refid="12269" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12260" relation="include">
        </childnode>
        <childnode refid="12261" relation="include">
        </childnode>
        <childnode refid="12262" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12263" relation="include">
        </childnode>
        <childnode refid="12268" relation="include">
        </childnode>
        <childnode refid="12271" relation="include">
        </childnode>
        <childnode refid="12289" relation="include">
        </childnode>
        <childnode refid="12381" relation="include">
        </childnode>
        <childnode refid="12384" relation="include">
        </childnode>
        <childnode refid="12394" relation="include">
        </childnode>
        <childnode refid="12395" relation="include">
        </childnode>
        <childnode refid="12396" relation="include">
        </childnode>
      </node>
      <node id="12386">
        <label>mkldnn.hpp</label>
      </node>
      <node id="12256">
        <label>fstream</label>
      </node>
      <node id="12263">
        <label>ngraph/codegen/code_writer.hpp</label>
        <link refid="code__writer_8hpp_source"/>
        <childnode refid="12264" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12265" relation="include">
        </childnode>
      </node>
      <node id="12312">
        <label>ngraph/ops/atan.hpp</label>
        <link refid="ops_2atan_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12349">
        <label>ngraph/ops/pad.hpp</label>
        <link refid="ops_2pad_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12342">
        <label>ngraph/ops/min.hpp</label>
        <link refid="ops_2min_8hpp_source"/>
        <childnode refid="12339" relation="include">
        </childnode>
      </node>
      <node id="12348">
        <label>ngraph/ops/one_hot.hpp</label>
        <link refid="ops_2one__hot_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12336">
        <label>ngraph/ops/less_eq.hpp</label>
        <link refid="ops_2less__eq_8hpp_source"/>
        <childnode refid="12328" relation="include">
        </childnode>
      </node>
      <node id="12347">
        <label>ngraph/ops/not_equal.hpp</label>
        <link refid="ops_2not__equal_8hpp_source"/>
        <childnode refid="12328" relation="include">
        </childnode>
      </node>
      <node id="12281">
        <label>ngraph/types/element_type.hpp</label>
        <link refid="element__type_8hpp_source"/>
        <childnode refid="12282" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12264" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12283" relation="include">
        </childnode>
        <childnode refid="12278" relation="include">
        </childnode>
        <childnode refid="12284" relation="include">
        </childnode>
        <childnode refid="12265" relation="include">
        </childnode>
      </node>
      <node id="12331">
        <label>ngraph/ops/function_call.hpp</label>
        <link refid="function__call_8hpp_source"/>
        <childnode refid="12293" relation="include">
        </childnode>
      </node>
      <node id="12278">
        <label>ngraph/common.hpp</label>
        <link refid="common_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12279" relation="include">
        </childnode>
        <childnode refid="12280" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
      </node>
      <node id="12373">
        <label>ngraph/pass/liveness.hpp</label>
        <link refid="liveness_8hpp_source"/>
        <childnode refid="12273" relation="include">
        </childnode>
        <childnode refid="12371" relation="include">
        </childnode>
      </node>
      <node id="12399">
        <label>ngraph/json.hpp</label>
        <link refid="json_8hpp_source"/>
        <childnode refid="12300" relation="include">
        </childnode>
        <childnode refid="12400" relation="include">
        </childnode>
        <childnode refid="12389" relation="include">
        </childnode>
        <childnode refid="12401" relation="include">
        </childnode>
        <childnode refid="12402" relation="include">
        </childnode>
        <childnode refid="12403" relation="include">
        </childnode>
        <childnode refid="12404" relation="include">
        </childnode>
        <childnode refid="12385" relation="include">
        </childnode>
        <childnode refid="12255" relation="include">
        </childnode>
        <childnode refid="12320" relation="include">
        </childnode>
        <childnode refid="12405" relation="include">
        </childnode>
        <childnode refid="12269" relation="include">
        </childnode>
        <childnode refid="12291" relation="include">
        </childnode>
        <childnode refid="12406" relation="include">
        </childnode>
        <childnode refid="12407" relation="include">
        </childnode>
        <childnode refid="12408" relation="include">
        </childnode>
        <childnode refid="12376" relation="include">
        </childnode>
        <childnode refid="12409" relation="include">
        </childnode>
        <childnode refid="12282" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12410" relation="include">
        </childnode>
        <childnode refid="12264" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12283" relation="include">
        </childnode>
        <childnode refid="12280" relation="include">
        </childnode>
        <childnode refid="12411" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
      </node>
      <node id="12365">
        <label>ngraph/ops/sqrt.hpp</label>
        <link refid="ops_2sqrt_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12364">
        <label>ngraph/ops/slice.hpp</label>
        <link refid="ops_2slice_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12317">
        <label>ngraph/ops/ceiling.hpp</label>
        <link refid="ops_2ceiling_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12358">
        <label>ngraph/ops/reverse.hpp</label>
        <link refid="ops_2reverse_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12272">
        <label>ngraph/descriptor/input.hpp</label>
        <link refid="input_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12273" relation="include">
        </childnode>
        <childnode refid="12275" relation="include">
        </childnode>
      </node>
      <node id="12351">
        <label>ngraph/ops/product.hpp</label>
        <link refid="ops_2product_8hpp_source"/>
        <childnode refid="12339" relation="include">
        </childnode>
      </node>
      <node id="12367">
        <label>ngraph/ops/sum.hpp</label>
        <link refid="ops_2sum_8hpp_source"/>
        <childnode refid="12339" relation="include">
        </childnode>
      </node>
      <node id="12276">
        <label>ngraph/shape.hpp</label>
        <link refid="shape_8hpp_source"/>
        <childnode refid="12277" relation="include">
        </childnode>
        <childnode refid="12274" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12278" relation="include">
        </childnode>
      </node>
      <node id="12352">
        <label>ngraph/ops/reduce.hpp</label>
        <link refid="ops_2reduce_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12326">
        <label>ngraph/ops/dot.hpp</label>
        <link refid="ops_2dot_8hpp_source"/>
        <childnode refid="12280" relation="include">
        </childnode>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12321">
        <label>ngraph/ops/convert.hpp</label>
        <link refid="ops_2convert_8hpp_source"/>
        <childnode refid="12304" relation="include">
        </childnode>
        <childnode refid="12275" relation="include">
        </childnode>
      </node>
      <node id="12295">
        <label>ngraph/autodiff/adjoints.hpp</label>
        <link refid="adjoints_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12262" relation="include">
        </childnode>
        <childnode refid="12278" relation="include">
        </childnode>
      </node>
      <node id="12298">
        <label>ngraph/ops/parameter.hpp</label>
        <link refid="parameter_8hpp_source"/>
        <childnode refid="12296" relation="include">
        </childnode>
        <childnode refid="12275" relation="include">
        </childnode>
      </node>
      <node id="12309">
        <label>ngraph/ops/util/binary_elementwise.hpp</label>
        <link refid="binary__elementwise_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12296">
        <label>ngraph/ops/op.hpp</label>
        <link refid="op_8hpp_source"/>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12278" relation="include">
        </childnode>
        <childnode refid="12293" relation="include">
        </childnode>
        <childnode refid="12297" relation="include">
        </childnode>
      </node>
      <node id="12330">
        <label>ngraph/ops/floor.hpp</label>
        <link refid="ops_2floor_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12369">
        <label>ngraph/ops/tanh.hpp</label>
        <link refid="ops_2tanh_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12261">
        <label>typeinfo</label>
      </node>
      <node id="12303">
        <label>ngraph/ops/util/unary_elementwise_arithmetic.hpp</label>
        <link refid="unary__elementwise__arithmetic_8hpp_source"/>
        <childnode refid="12304" relation="include">
        </childnode>
      </node>
      <node id="12277">
        <label>cstdio</label>
      </node>
      <node id="12259">
        <label>tuple</label>
      </node>
      <node id="12360">
        <label>ngraph/ops/select_and_scatter.hpp</label>
        <link refid="ops_2select__and__scatter_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12353">
        <label>ngraph/ops/reduce_window.hpp</label>
        <link refid="ops_2reduce__window_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12316">
        <label>ngraph/ops/broadcast.hpp</label>
        <link refid="ops_2broadcast_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12328">
        <label>ngraph/ops/util/binary_elementwise_comparison.hpp</label>
        <link refid="binary__elementwise__comparison_8hpp_source"/>
        <childnode refid="12309" relation="include">
        </childnode>
      </node>
      <node id="12382">
        <label>ngraph/runtime/call_frame.hpp</label>
        <link refid="call__frame_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12289" relation="include">
        </childnode>
        <childnode refid="12383" relation="include">
        </childnode>
      </node>
      <node id="12397">
        <label>ngraph/runtime/cpu/cpu_tensor_view.hpp</label>
        <link refid="cpu__tensor__view_8hpp_source"/>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12383" relation="include">
        </childnode>
        <childnode refid="12281" relation="include">
        </childnode>
      </node>
      <node id="12375">
        <label>ngraph/pass/memory_layout.hpp</label>
        <link refid="memory__layout_8hpp_source"/>
        <childnode refid="12376" relation="include">
        </childnode>
        <childnode refid="12292" relation="include">
        </childnode>
        <childnode refid="12264" relation="include">
        </childnode>
        <childnode refid="12371" relation="include">
        </childnode>
      </node>
      <node id="12270">
        <label>vector</label>
      </node>
      <node id="12254">
        <label>/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp</label>
        <link refid="cpu__external__function_8cpp"/>
        <childnode refid="12255" relation="include">
        </childnode>
        <childnode refid="12256" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12259" relation="include">
        </childnode>
        <childnode refid="12260" relation="include">
        </childnode>
        <childnode refid="12261" relation="include">
        </childnode>
        <childnode refid="12262" relation="include">
        </childnode>
        <childnode refid="12263" relation="include">
        </childnode>
        <childnode refid="12268" relation="include">
        </childnode>
        <childnode refid="12271" relation="include">
        </childnode>
        <childnode refid="12272" relation="include">
        </childnode>
        <childnode refid="12285" relation="include">
        </childnode>
        <childnode refid="12287" relation="include">
        </childnode>
        <childnode refid="12288" relation="include">
        </childnode>
        <childnode refid="12289" relation="include">
        </childnode>
        <childnode refid="12299" relation="include">
        </childnode>
        <childnode refid="12293" relation="include">
        </childnode>
        <childnode refid="12302" relation="include">
        </childnode>
        <childnode refid="12306" relation="include">
        </childnode>
        <childnode refid="12307" relation="include">
        </childnode>
        <childnode refid="12310" relation="include">
        </childnode>
        <childnode refid="12311" relation="include">
        </childnode>
        <childnode refid="12312" relation="include">
        </childnode>
        <childnode refid="12313" relation="include">
        </childnode>
        <childnode refid="12314" relation="include">
        </childnode>
        <childnode refid="12316" relation="include">
        </childnode>
        <childnode refid="12317" relation="include">
        </childnode>
        <childnode refid="12318" relation="include">
        </childnode>
        <childnode refid="12319" relation="include">
        </childnode>
        <childnode refid="12321" relation="include">
        </childnode>
        <childnode refid="12322" relation="include">
        </childnode>
        <childnode refid="12323" relation="include">
        </childnode>
        <childnode refid="12324" relation="include">
        </childnode>
        <childnode refid="12325" relation="include">
        </childnode>
        <childnode refid="12326" relation="include">
        </childnode>
        <childnode refid="12327" relation="include">
        </childnode>
        <childnode refid="12329" relation="include">
        </childnode>
        <childnode refid="12330" relation="include">
        </childnode>
        <childnode refid="12331" relation="include">
        </childnode>
        <childnode refid="12332" relation="include">
        </childnode>
        <childnode refid="12333" relation="include">
        </childnode>
        <childnode refid="12334" relation="include">
        </childnode>
        <childnode refid="12335" relation="include">
        </childnode>
        <childnode refid="12336" relation="include">
        </childnode>
        <childnode refid="12337" relation="include">
        </childnode>
        <childnode refid="12338" relation="include">
        </childnode>
        <childnode refid="12340" relation="include">
        </childnode>
        <childnode refid="12341" relation="include">
        </childnode>
        <childnode refid="12342" relation="include">
        </childnode>
        <childnode refid="12343" relation="include">
        </childnode>
        <childnode refid="12344" relation="include">
        </childnode>
        <childnode refid="12345" relation="include">
        </childnode>
        <childnode refid="12346" relation="include">
        </childnode>
        <childnode refid="12347" relation="include">
        </childnode>
        <childnode refid="12348" relation="include">
        </childnode>
        <childnode refid="12296" relation="include">
        </childnode>
        <childnode refid="12349" relation="include">
        </childnode>
        <childnode refid="12298" relation="include">
        </childnode>
        <childnode refid="12350" relation="include">
        </childnode>
        <childnode refid="12351" relation="include">
        </childnode>
        <childnode refid="12352" relation="include">
        </childnode>
        <childnode refid="12353" relation="include">
        </childnode>
        <childnode refid="12354" relation="include">
        </childnode>
        <childnode refid="12355" relation="include">
        </childnode>
        <childnode refid="12356" relation="include">
        </childnode>
        <childnode refid="12357" relation="include">
        </childnode>
        <childnode refid="12358" relation="include">
        </childnode>
        <childnode refid="12359" relation="include">
        </childnode>
        <childnode refid="12360" relation="include">
        </childnode>
        <childnode refid="12361" relation="include">
        </childnode>
        <childnode refid="12362" relation="include">
        </childnode>
        <childnode refid="12363" relation="include">
        </childnode>
        <childnode refid="12364" relation="include">
        </childnode>
        <childnode refid="12365" relation="include">
        </childnode>
        <childnode refid="12366" relation="include">
        </childnode>
        <childnode refid="12367" relation="include">
        </childnode>
        <childnode refid="12368" relation="include">
        </childnode>
        <childnode refid="12369" relation="include">
        </childnode>
        <childnode refid="12370" relation="include">
        </childnode>
        <childnode refid="12373" relation="include">
        </childnode>
        <childnode refid="12374" relation="include">
        </childnode>
        <childnode refid="12375" relation="include">
        </childnode>
        <childnode refid="12377" relation="include">
        </childnode>
        <childnode refid="12379" relation="include">
        </childnode>
        <childnode refid="12381" relation="include">
        </childnode>
        <childnode refid="12392" relation="include">
        </childnode>
        <childnode refid="12393" relation="include">
        </childnode>
        <childnode refid="12397" relation="include">
        </childnode>
        <childnode refid="12398" relation="include">
        </childnode>
        <childnode refid="12412" relation="include">
        </childnode>
        <childnode refid="12413" relation="include">
        </childnode>
        <childnode refid="12414" relation="include">
        </childnode>
        <childnode refid="12415" relation="include">
        </childnode>
        <childnode refid="12416" relation="include">
        </childnode>
        <childnode refid="12417" relation="include">
        </childnode>
      </node>
      <node id="12401">
        <label>ciso646</label>
      </node>
      <node id="12287">
        <label>ngraph/descriptor/primary_tensor_view.hpp</label>
        <link refid="primary__tensor__view_8hpp_source"/>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12273" relation="include">
        </childnode>
        <childnode refid="12286" relation="include">
        </childnode>
        <childnode refid="12265" relation="include">
        </childnode>
        <childnode refid="12276" relation="include">
        </childnode>
        <childnode refid="12275" relation="include">
        </childnode>
      </node>
      <node id="12414">
        <label>ngraph/runtime/cpu/ops/matmul_bias.hpp</label>
        <link refid="matmul__bias_8hpp_source"/>
        <childnode refid="12293" relation="include">
        </childnode>
        <childnode refid="12305" relation="include">
        </childnode>
        <childnode refid="12315" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
      </node>
      <node id="12377">
        <label>ngraph/pattern/core_fusion.hpp</label>
        <link refid="core__fusion_8hpp_source"/>
        <childnode refid="12378" relation="include">
        </childnode>
      </node>
      <node id="12337">
        <label>ngraph/ops/log.hpp</label>
        <link refid="ops_2log_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12368">
        <label>ngraph/ops/tan.hpp</label>
        <link refid="ops_2tan_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12280">
        <label>utility</label>
      </node>
      <node id="12400">
        <label>array</label>
      </node>
      <node id="12306">
        <label>ngraph/ops/acos.hpp</label>
        <link refid="ops_2acos_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12308">
        <label>ngraph/ops/util/binary_elementwise_arithmetic.hpp</label>
        <link refid="binary__elementwise__arithmetic_8hpp_source"/>
        <childnode refid="12309" relation="include">
        </childnode>
      </node>
      <node id="12264">
        <label>sstream</label>
      </node>
      <node id="12343">
        <label>ngraph/ops/minimum.hpp</label>
        <link refid="ops_2minimum_8hpp_source"/>
        <childnode refid="12308" relation="include">
        </childnode>
      </node>
      <node id="12319">
        <label>ngraph/ops/constant.hpp</label>
        <link refid="ops_2constant_8hpp_source"/>
        <childnode refid="12320" relation="include">
        </childnode>
        <childnode refid="12264" relation="include">
        </childnode>
        <childnode refid="12265" relation="include">
        </childnode>
        <childnode refid="12293" relation="include">
        </childnode>
        <childnode refid="12281" relation="include">
        </childnode>
        <childnode refid="12315" relation="include">
        </childnode>
      </node>
      <node id="12387">
        <label>ngraph/descriptor/layout/tensor_view_layout.hpp</label>
        <link refid="tensor__view__layout_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12259" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12388" relation="include">
        </childnode>
        <childnode refid="12286" relation="include">
        </childnode>
      </node>
      <node id="12332">
        <label>ngraph/ops/get_output_element.hpp</label>
        <link refid="get__output__element_8hpp_source"/>
        <childnode refid="12293" relation="include">
        </childnode>
      </node>
      <node id="12334">
        <label>ngraph/ops/greater_eq.hpp</label>
        <link refid="ops_2greater__eq_8hpp_source"/>
        <childnode refid="12328" relation="include">
        </childnode>
      </node>
      <node id="12380">
        <label>ngraph/runtime/backend.hpp</label>
        <link refid="backend_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12278" relation="include">
        </childnode>
        <childnode refid="12265" relation="include">
        </childnode>
        <childnode refid="12281" relation="include">
        </childnode>
      </node>
      <node id="12407">
        <label>iosfwd</label>
      </node>
      <node id="12255">
        <label>cstdlib</label>
      </node>
      <node id="12359">
        <label>ngraph/ops/select.hpp</label>
        <link refid="ops_2select_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12289">
        <label>ngraph/function.hpp</label>
        <link refid="function_8hpp_source"/>
        <childnode refid="12290" relation="include">
        </childnode>
        <childnode refid="12291" relation="include">
        </childnode>
        <childnode refid="12292" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12285" relation="include">
        </childnode>
        <childnode refid="12286" relation="include">
        </childnode>
        <childnode refid="12265" relation="include">
        </childnode>
        <childnode refid="12293" relation="include">
        </childnode>
        <childnode refid="12296" relation="include">
        </childnode>
        <childnode refid="12298" relation="include">
        </childnode>
        <childnode refid="12275" relation="include">
        </childnode>
      </node>
      <node id="12402">
        <label>clocale</label>
      </node>
      <node id="12344">
        <label>ngraph/ops/multiply.hpp</label>
        <link refid="ops_2multiply_8hpp_source"/>
        <childnode refid="12308" relation="include">
        </childnode>
      </node>
      <node id="12274">
        <label>iostream</label>
      </node>
      <node id="12304">
        <label>ngraph/ops/util/unary_elementwise.hpp</label>
        <link refid="unary__elementwise_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12297">
        <label>ngraph/ops/util/op_annotations.hpp</label>
        <link refid="op__annotations_8hpp_source"/>
      </node>
      <node id="12404">
        <label>cstddef</label>
      </node>
      <node id="12266">
        <label>deque</label>
      </node>
      <node id="12350">
        <label>ngraph/ops/power.hpp</label>
        <link refid="ops_2power_8hpp_source"/>
        <childnode refid="12308" relation="include">
        </childnode>
      </node>
      <node id="12262">
        <label>unordered_map</label>
      </node>
      <node id="12361">
        <label>ngraph/ops/sign.hpp</label>
        <link refid="ops_2sign_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12338">
        <label>ngraph/ops/max.hpp</label>
        <link refid="ops_2max_8hpp_source"/>
        <childnode refid="12339" relation="include">
        </childnode>
      </node>
      <node id="12412">
        <label>ngraph/runtime/cpu/mkldnn_utils.hpp</label>
        <link refid="mkldnn__utils_8hpp_source"/>
        <childnode refid="12386" relation="include">
        </childnode>
        <childnode refid="12293" relation="include">
        </childnode>
        <childnode refid="12384" relation="include">
        </childnode>
        <childnode refid="12281" relation="include">
        </childnode>
      </node>
      <node id="12345">
        <label>ngraph/ops/negative.hpp</label>
        <link refid="negative_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12301">
        <label>chrono</label>
      </node>
      <node id="12392">
        <label>ngraph/runtime/cpu/cpu_emitter.hpp</label>
        <link refid="cpu__emitter_8hpp_source"/>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12263" relation="include">
        </childnode>
        <childnode refid="12293" relation="include">
        </childnode>
        <childnode refid="12393" relation="include">
        </childnode>
        <childnode refid="12394" relation="include">
        </childnode>
      </node>
      <node id="12284">
        <label>ngraph/except.hpp</label>
        <link refid="except_8hpp_source"/>
        <childnode refid="12267" relation="include">
        </childnode>
      </node>
      <node id="12339">
        <label>ngraph/ops/util/arithmetic_reduction.hpp</label>
        <link refid="arithmetic__reduction_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12374">
        <label>ngraph/pass/manager.hpp</label>
        <link refid="pass_2manager_8hpp_source"/>
        <childnode refid="12292" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12372" relation="include">
        </childnode>
        <childnode refid="12371" relation="include">
        </childnode>
      </node>
      <node id="12346">
        <label>ngraph/ops/not.hpp</label>
        <link refid="ops_2not_8hpp_source"/>
        <childnode refid="12304" relation="include">
        </childnode>
      </node>
      <node id="12416">
        <label>ngraph/runtime/cpu/pass/cpu_fusion.hpp</label>
        <link refid="cpu__fusion_8hpp_source"/>
        <childnode refid="12378" relation="include">
        </childnode>
      </node>
      <node id="12311">
        <label>ngraph/ops/asin.hpp</label>
        <link refid="ops_2asin_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12283">
        <label>type_traits</label>
      </node>
      <node id="12279">
        <label>set</label>
      </node>
      <node id="12341">
        <label>ngraph/ops/maximum.hpp</label>
        <link refid="ops_2maximum_8hpp_source"/>
        <childnode refid="12308" relation="include">
        </childnode>
      </node>
      <node id="12335">
        <label>ngraph/ops/less.hpp</label>
        <link refid="ops_2less_8hpp_source"/>
        <childnode refid="12328" relation="include">
        </childnode>
      </node>
      <node id="12318">
        <label>ngraph/ops/concatenate.hpp</label>
        <link refid="concatenate_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12314">
        <label>ngraph/ops/batch_norm.hpp</label>
        <link refid="batch__norm_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12293" relation="include">
        </childnode>
        <childnode refid="12305" relation="include">
        </childnode>
        <childnode refid="12315" relation="include">
        </childnode>
      </node>
      <node id="12286">
        <label>ngraph/descriptor/tensor_view.hpp</label>
        <link refid="descriptor_2tensor__view_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12276" relation="include">
        </childnode>
      </node>
      <node id="12405">
        <label>forward_list</label>
      </node>
      <node id="12300">
        <label>algorithm</label>
      </node>
      <node id="12313">
        <label>ngraph/ops/avg_pool.hpp</label>
        <link refid="ops_2avg__pool_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12271">
        <label>ngraph/codegen/execution_engine.hpp</label>
        <link refid="execution__engine_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12268" relation="include">
        </childnode>
      </node>
      <node id="12315">
        <label>ngraph/util.hpp</label>
        <link refid="util_8hpp_source"/>
        <childnode refid="12300" relation="include">
        </childnode>
        <childnode refid="12301" relation="include">
        </childnode>
        <childnode refid="12266" relation="include">
        </childnode>
        <childnode refid="12269" relation="include">
        </childnode>
        <childnode refid="12274" relation="include">
        </childnode>
        <childnode refid="12292" relation="include">
        </childnode>
        <childnode refid="12282" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12264" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12262" relation="include">
        </childnode>
        <childnode refid="12294" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
      </node>
      <node id="12383">
        <label>ngraph/runtime/tensor_view.hpp</label>
        <link refid="runtime_2tensor__view_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12286" relation="include">
        </childnode>
        <childnode refid="12276" relation="include">
        </childnode>
        <childnode refid="12281" relation="include">
        </childnode>
        <childnode refid="12315" relation="include">
        </childnode>
      </node>
      <node id="12384">
        <label>ngraph/runtime/cpu/cpu_layout_descriptor.hpp</label>
        <link refid="cpu__layout__descriptor_8hpp_source"/>
        <childnode refid="12385" relation="include">
        </childnode>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12386" relation="include">
        </childnode>
        <childnode refid="12278" relation="include">
        </childnode>
        <childnode refid="12387" relation="include">
        </childnode>
        <childnode refid="12276" relation="include">
        </childnode>
        <childnode refid="12275" relation="include">
        </childnode>
      </node>
      <node id="12372">
        <label>ngraph/pass/manager_state.hpp</label>
        <link refid="manager__state_8hpp_source"/>
        <childnode refid="12257" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
        <childnode refid="12289" relation="include">
        </childnode>
      </node>
      <node id="12320">
        <label>cstring</label>
      </node>
      <node id="12257">
        <label>memory</label>
      </node>
      <node id="12357">
        <label>ngraph/ops/reshape.hpp</label>
        <link refid="ops_2reshape_8hpp_source"/>
        <childnode refid="12305" relation="include">
        </childnode>
      </node>
      <node id="12291">
        <label>initializer_list</label>
      </node>
      <node id="12329">
        <label>ngraph/ops/exp.hpp</label>
        <link refid="ops_2exp_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
      <node id="12288">
        <label>ngraph/file_util.hpp</label>
        <link refid="file__util_8hpp_source"/>
        <childnode refid="12269" relation="include">
        </childnode>
        <childnode refid="12258" relation="include">
        </childnode>
        <childnode refid="12270" relation="include">
        </childnode>
      </node>
      <node id="12260">
        <label>typeindex</label>
      </node>
      <node id="12362">
        <label>ngraph/ops/sin.hpp</label>
        <link refid="ops_2sin_8hpp_source"/>
        <childnode refid="12303" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classStaticInitializers" prot="public">StaticInitializers</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cpu__external__function_8cpp_1af07cefa33fbb18531cc33ed40e08bb49" prot="public" static="no">
        <name>TI</name>
        <param><defname>x</defname></param>
        <initializer>type_index(typeid(x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" line="167" column="9" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cpu__external__function_8cpp_1a9397b9b7c89bfa440e24cd823e04a4be" prot="public" static="yes" mutable="no">
        <type>const string</type>
        <definition>const string s_output_dir</definition>
        <argsstring></argsstring>
        <name>s_output_dir</name>
        <initializer>= &quot;cpu_codegen&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" line="122" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cpu__external__function_8cpp_1a5b1cf59d62a8bdd0b92413d8eb4645b5" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t s_memory_pool_alignment</definition>
        <argsstring></argsstring>
        <name>s_memory_pool_alignment</name>
        <initializer>= 4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" line="125" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cpu__external__function_8cpp_1a3254847d101e7107cd921b1e0da8fa89" prot="public" static="yes" mutable="no">
        <type><ref refid="classStaticInitializers" kindref="compound">StaticInitializers</ref></type>
        <definition>StaticInitializers s_static_initializers</definition>
        <argsstring></argsstring>
        <name>s_static_initializers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" line="165" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cpu__external__function_8cpp_1aacfad7bf9ca1bf84dd3b286d9c668d9c" prot="public" static="yes" mutable="no">
        <type>const runtime::cpu::OpMap</type>
        <definition>const runtime::cpu::OpMap dispatcher</definition>
        <argsstring></argsstring>
        <name>dispatcher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" line="169" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cpu__external__function_8cpp_1a5bddb174e7d7798f60d2f755741b0320" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>static string emit_string_array</definition>
        <argsstring>(const vector&lt; string &gt; &amp;s, size_t max_line_length)</argsstring>
        <name>emit_string_array</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_line_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" line="133" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp" bodystart="133" bodyend="163"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>2017-2018<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeindex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/codegen/code_writer.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/codegen/compiler.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/codegen/execution_engine.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/descriptor/input.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/descriptor/output.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/descriptor/primary_tensor_view.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/file_util.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/function.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/graph_util.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/node.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/abs.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/acos.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/add.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/allreduce.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/asin.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/atan.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/avg_pool.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/batch_norm.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/broadcast.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/ceiling.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/concatenate.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/constant.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/convert.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/convolution.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/cos.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/cosh.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/divide.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/dot.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/equal.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/exp.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/floor.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/function_call.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/get_output_element.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/greater.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/greater_eq.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/less.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/less_eq.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/log.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/max.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/max_pool.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/maximum.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/min.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/minimum.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/multiply.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/negative.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/not.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/not_equal.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/one_hot.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/op.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/pad.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/parameter.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/power.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/product.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/reduce.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/reduce_window.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/relu.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/remainder.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/replace_slice.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/reshape.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/reverse.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/select.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/select_and_scatter.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/sign.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/sin.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/sinh.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/slice.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/sqrt.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/subtract.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/sum.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/tan.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/tanh.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/pass/dump_sorted.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/pass/liveness.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/pass/manager.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/pass/memory_layout.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/pattern/core_fusion.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/cpu_backend.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/cpu_call_frame.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/cpu_emitter.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/cpu_external_function.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/cpu_tensor_view.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/cpu_tracing.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/mkldnn_utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/ops/convert_layout.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/ops/matmul_bias.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/pass/cpu_assignment.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/pass/cpu_fusion.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/runtime/cpu/pass/cpu_layout.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NGRAPH_DISTRIBUTED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/allreduce.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacengraph" kindref="compound">ngraph</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s_output_dir<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cpu_codegen&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Temporary<sp/>Memory<sp/>Pool<sp/>alignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s_memory_pool_alignment<sp/>=<sp/>4096;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="classStaticInitializers" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classStaticInitializers" kindref="compound">StaticInitializers</ref></highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classStaticInitializers" kindref="compound">StaticInitializers</ref>()<sp/>{<sp/>ngraph::file_util::remove_directory(s_output_dir);<sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>emit_string_array(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;string&gt;&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_line_length)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>line;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.size();<sp/>i++)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>value;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&lt;&lt;<sp/>s[i];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>value_string<sp/>=<sp/>value.str();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;size_t&gt;(line.tellp())<sp/>+<sp/>value_string.size()<sp/>+<sp/>1<sp/>&lt;=<sp/>max_line_length)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>&lt;&lt;<sp/>value_string;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>line.str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>&lt;&lt;<sp/>value_string;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>line.str();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classStaticInitializers" kindref="compound">StaticInitializers</ref><sp/>s_static_initializers;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TI(x)<sp/>type_index(typeid(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>runtime::cpu::OpMap<sp/>dispatcher{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Add" kindref="compound">ngraph::op::Add</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Add&gt;},</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NGRAPH_DISTRIBUTED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(ngraph::op::AllReduce),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::AllReduce&gt;},</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1MatmulBias" kindref="compound">ngraph::op::MatmulBias</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::MatmulBias&gt;},</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Dot" kindref="compound">ngraph::op::Dot</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Dot&gt;},</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Multiply" kindref="compound">ngraph::op::Multiply</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Multiply&gt;},</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Parameter" kindref="compound">ngraph::op::Parameter</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::nop},</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Abs" kindref="compound">ngraph::op::Abs</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Abs&gt;},</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Concat" kindref="compound">ngraph::op::Concat</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Concat&gt;},</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Divide" kindref="compound">ngraph::op::Divide</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Divide&gt;},</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Equal" kindref="compound">ngraph::op::Equal</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Equal&gt;},</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Greater" kindref="compound">ngraph::op::Greater</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Greater&gt;},</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1GreaterEq" kindref="compound">ngraph::op::GreaterEq</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::GreaterEq&gt;},</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Less" kindref="compound">ngraph::op::Less</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Less&gt;},</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1LessEq" kindref="compound">ngraph::op::LessEq</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::LessEq&gt;},</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Log" kindref="compound">ngraph::op::Log</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Log&gt;},</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Maximum" kindref="compound">ngraph::op::Maximum</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Maximum&gt;},</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Minimum" kindref="compound">ngraph::op::Minimum</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Minimum&gt;},</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Negative" kindref="compound">ngraph::op::Negative</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Negative&gt;},</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1NotEqual" kindref="compound">ngraph::op::NotEqual</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::NotEqual&gt;},</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Power" kindref="compound">ngraph::op::Power</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Power&gt;},</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Select" kindref="compound">ngraph::op::Select</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Select&gt;},</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Subtract" kindref="compound">ngraph::op::Subtract</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Subtract&gt;},</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Broadcast" kindref="compound">ngraph::op::Broadcast</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Broadcast&gt;},</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Convert" kindref="compound">ngraph::op::Convert</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Convert&gt;},</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Constant" kindref="compound">ngraph::op::Constant</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Constant&gt;},</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Reshape" kindref="compound">ngraph::op::Reshape</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Reshape&gt;},</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1FunctionCall" kindref="compound">ngraph::op::FunctionCall</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::FunctionCall&gt;},</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Reduce" kindref="compound">ngraph::op::Reduce</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Reduce&gt;},</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Sign" kindref="compound">ngraph::op::Sign</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Sign&gt;},</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Slice" kindref="compound">ngraph::op::Slice</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Slice&gt;},</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Sum" kindref="compound">ngraph::op::Sum</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Sum&gt;},</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Exp" kindref="compound">ngraph::op::Exp</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Exp&gt;},</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Sin" kindref="compound">ngraph::op::Sin</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Sin&gt;},</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Sinh" kindref="compound">ngraph::op::Sinh</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Sinh&gt;},</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Cos" kindref="compound">ngraph::op::Cos</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Cos&gt;},</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Cosh" kindref="compound">ngraph::op::Cosh</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Cosh&gt;},</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Tan" kindref="compound">ngraph::op::Tan</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Tan&gt;},</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Tanh" kindref="compound">ngraph::op::Tanh</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Tanh&gt;},</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Asin" kindref="compound">ngraph::op::Asin</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Asin&gt;},</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Acos" kindref="compound">ngraph::op::Acos</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Acos&gt;},</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Atan" kindref="compound">ngraph::op::Atan</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Atan&gt;},</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1ReplaceSlice" kindref="compound">ngraph::op::ReplaceSlice</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::ReplaceSlice&gt;},</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1OneHot" kindref="compound">ngraph::op::OneHot</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::OneHot&gt;},</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Floor" kindref="compound">ngraph::op::Floor</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Floor&gt;},</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Ceiling" kindref="compound">ngraph::op::Ceiling</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Ceiling&gt;},</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Sqrt" kindref="compound">ngraph::op::Sqrt</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Sqrt&gt;},</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Convolution" kindref="compound">ngraph::op::Convolution</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Convolution&gt;},</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1ConvolutionBackpropFilters" kindref="compound">ngraph::op::ConvolutionBackpropFilters</ref>),</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::ConvolutionBackpropFilters&gt;},</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1ConvolutionBackpropData" kindref="compound">ngraph::op::ConvolutionBackpropData</ref>),</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::ConvolutionBackpropData&gt;},</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1runtime_1_1cpu_1_1op_1_1ConvertLayout" kindref="compound">ngraph::runtime::cpu::op::ConvertLayout</ref>),</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;runtime::cpu::op::ConvertLayout&gt;},</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Not" kindref="compound">ngraph::op::Not</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Not&gt;},</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1MaxPool" kindref="compound">ngraph::op::MaxPool</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::MaxPool&gt;},</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Reverse" kindref="compound">ngraph::op::Reverse</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Reverse&gt;},</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1ReduceWindow" kindref="compound">ngraph::op::ReduceWindow</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::ReduceWindow&gt;},</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1SelectAndScatter" kindref="compound">ngraph::op::SelectAndScatter</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::SelectAndScatter&gt;},</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1AvgPool" kindref="compound">ngraph::op::AvgPool</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::AvgPool&gt;},</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1AvgPoolBackprop" kindref="compound">ngraph::op::AvgPoolBackprop</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::AvgPoolBackprop&gt;},</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Pad" kindref="compound">ngraph::op::Pad</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Pad&gt;},</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1BatchNorm" kindref="compound">ngraph::op::BatchNorm</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::BatchNorm&gt;},</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1MaxPoolBackprop" kindref="compound">ngraph::op::MaxPoolBackprop</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::MaxPoolBackprop&gt;},</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Product" kindref="compound">ngraph::op::Product</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Product&gt;},</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Max" kindref="compound">ngraph::op::Max</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Max&gt;},</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Min" kindref="compound">ngraph::op::Min</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Min&gt;},</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1Relu" kindref="compound">ngraph::op::Relu</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::Relu&gt;},</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{TI(<ref refid="classngraph_1_1op_1_1ReluBackprop" kindref="compound">ngraph::op::ReluBackprop</ref>),<sp/>&amp;runtime::cpu::CPU_Emitter::emit&lt;op::ReluBackprop&gt;},</highlight></codeline>
<codeline lineno="240"><highlight class="normal">};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">runtime::cpu::CPU_ExternalFunction::CPU_ExternalFunction(</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shared_ptr&lt;ngraph::Function&gt;&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>release_function)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespacengraph" kindref="compound">ngraph</ref>::runtime::ExternalFunction(function,<sp/>release_function)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_compiled_function(nullptr)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_emit_timing(<ref refid="namespacestd" kindref="compound">std</ref>::getenv(</highlight><highlight class="stringliteral">&quot;NGRAPH_CPU_EMIT_TIMING&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>nullptr)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_use_tbb(<ref refid="namespacestd" kindref="compound">std</ref>::getenv(</highlight><highlight class="stringliteral">&quot;NGRAPH_CPU_USE_TBB&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>nullptr)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>runtime::cpu::CPU_ExternalFunction::compile()</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_is_compiled)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>function_name<sp/>=<sp/>m_function-&gt;get_name();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mkldnn_emitter.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MKLDNNEmitter(shared_from_this()));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1pass_1_1Manager" kindref="compound">ngraph::pass::Manager</ref><sp/>pass_manager;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>pass_manager.register_pass&lt;<ref refid="classngraph_1_1pass_1_1CoreFusion" kindref="compound">ngraph::pass::CoreFusion</ref>&gt;();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>pass_manager.register_pass&lt;<ref refid="classngraph_1_1runtime_1_1cpu_1_1pass_1_1CPUFusion" kindref="compound">runtime::cpu::pass::CPUFusion</ref>&gt;();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>pass_manager.register_pass&lt;<ref refid="classngraph_1_1runtime_1_1cpu_1_1pass_1_1CPUAssignment" kindref="compound">runtime::cpu::pass::CPUAssignment</ref>&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>pass_manager.register_pass&lt;<ref refid="classngraph_1_1runtime_1_1cpu_1_1pass_1_1CPULayout" kindref="compound">runtime::cpu::pass::CPULayout</ref>&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>pass_manager.register_pass&lt;<ref refid="classngraph_1_1pass_1_1Liveness" kindref="compound">ngraph::pass::Liveness</ref>&gt;();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>pass_manager.register_pass&lt;<ref refid="classngraph_1_1pass_1_1MemoryLayout" kindref="compound">ngraph::pass::MemoryLayout</ref>&gt;(s_memory_pool_alignment);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>pass_manager.run_passes(m_function);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1codegen_1_1CodeWriter" kindref="compound">codegen::CodeWriter</ref><sp/>writer;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_mkldnn_headers<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Function&gt;<sp/>current_function<sp/>:<sp/>pass_manager.get_state().get_functions())</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Node&gt;<sp/>node<sp/>:<sp/>current_function-&gt;get_ordered_ops())</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ngraph::runtime::cpu::mkldnn_utils::IsMKLDNNOp(*node))</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_mkldnn_headers<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>+=</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;(//<sp/>Generated<sp/>by<sp/>the<sp/>nGraph<sp/>CPU<sp/>backend</highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral">#include<sp/>&lt;cmath&gt;</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral">#include<sp/>&quot;ngraph/except.hpp&quot;</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/aligned_buffer.hpp&quot;</highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/cpu/cpu_eigen_utils.hpp&quot;</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/cpu/cpu_kernels.hpp&quot;</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/cpu/cpu_runtime_context.hpp&quot;</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/cpu/mkldnn_invoke.hpp&quot;</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/avg_pool.hpp&quot;</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/broadcast.hpp&quot;</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/concat.hpp&quot;</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/convolution.hpp&quot;</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/dot.hpp&quot;</highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/max.hpp&quot;</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/max_pool.hpp&quot;</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/min.hpp&quot;</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/not.hpp&quot;</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/one_hot.hpp&quot;</highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/pad.hpp&quot;</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/product.hpp&quot;</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/reduce.hpp&quot;</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/reduce_window.hpp&quot;</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/relu.hpp&quot;</highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/replace_slice.hpp&quot;</highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/reshape.hpp&quot;</highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/reverse.hpp&quot;</highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/select_and_scatter.hpp&quot;</highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/slice.hpp&quot;</highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral">#include<sp/>&quot;ngraph/runtime/kernel/sum.hpp&quot;</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral">#include<sp/>&quot;ngraph/util.hpp&quot;</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral">using<sp/>namespace<sp/>ngraph::runtime::cpu::eigen;</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral">using<sp/>namespace<sp/>ngraph::runtime;</highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral">)&quot;;</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"></highlight><highlight class="preprocessor">#ifdef<sp/>NGRAPH_DISTRIBUTED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>&lt;mpi.h&gt;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_use_tbb)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>&lt;tbb/flow_graph.h&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(include_mkldnn_headers)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runtime::cpu::CPU_Emitter::emit_mkldnn_preamble(writer);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>pch_header_source<sp/>=<sp/>writer.get_code();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&quot;dso_handle&quot;<sp/>symbol<sp/>is<sp/>required<sp/>by<sp/>__cxa_atexit()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>enabled<sp/>because<sp/>the<sp/>JIT<sp/>uses<sp/>it<sp/>as<sp/>the<sp/>default<sp/>mechanism</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>register<sp/>cleanup<sp/>handlers.<sp/>We<sp/>use<sp/>it,<sp/>and<sp/>not<sp/>atexit(),<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>atexit()<sp/>happens<sp/>too<sp/>late,<sp/>when<sp/>the<sp/>JIT<sp/>is<sp/>no<sp/>longer<sp/>alive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;void<sp/>*__dso_handle<sp/>=<sp/>0;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_emit_timing)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;//<sp/>Declare<sp/>debug<sp/>timers\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>names;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Function&gt;<sp/>current_function<sp/>:<sp/>pass_manager.get_state().get_functions())</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Node&gt;<sp/>node<sp/>:<sp/>current_function-&gt;get_ordered_ops())</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;is_parameter()<sp/>&amp;&amp;<sp/>!node-&gt;is_constant())</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>names.push_back(node-&gt;get_name());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s<sp/>:<sp/>names)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ngraph::stopwatch<sp/>timer_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;extern<sp/>\&quot;C\&quot;<sp/>size_t<sp/>get_debug_timer_count()<sp/>{<sp/>return<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>names.size()</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;extern<sp/>\&quot;C\&quot;<sp/>const<sp/>char*<sp/>get_debug_timer_name(size_t<sp/>index)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent++;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>char*<sp/>rc;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;switch(index)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>names.size();<sp/>i++)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;case<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>rc<sp/>=<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>names[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;;<sp/>break;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;default:<sp/>rc<sp/>=<sp/>\&quot;\&quot;;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;return<sp/>rc;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent--;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;extern<sp/>\&quot;C\&quot;<sp/>const<sp/>size_t<sp/>get_debug_timer_microseconds(size_t<sp/>index)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent++;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;size_t<sp/>rc;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;switch(index)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>names.size();<sp/>i++)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;case<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>rc<sp/>=<sp/>timer_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>names[i]</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.get_total_microseconds();<sp/>break;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;default:<sp/>rc<sp/>=<sp/>0;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;return<sp/>rc;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent--;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;extern<sp/>\&quot;C\&quot;<sp/>const<sp/>size_t<sp/>get_debug_timer_call_count(size_t<sp/>index)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent++;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;size_t<sp/>rc;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;switch(index)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>names.size();<sp/>i++)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;case<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>rc<sp/>=<sp/>timer_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>names[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.get_call_count();<sp/>break;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;default:<sp/>rc<sp/>=<sp/>0;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;return<sp/>rc;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent--;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;//<sp/>Declare<sp/>all<sp/>constants\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Function&gt;<sp/>current_function<sp/>:<sp/>pass_manager.get_state().get_functions())</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Node&gt;<sp/>node<sp/>:<sp/>current_function-&gt;get_ordered_ops())</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1op_1_1Constant" kindref="compound">ngraph::op::Constant</ref>*<sp/>c<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Constant" kindref="compound">ngraph::op::Constant</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node.get());</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>tv<sp/>=<sp/>node-&gt;get_outputs()[0].get_tensor_view();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c_value_strings<sp/>=<sp/>c-&gt;<ref refid="classngraph_1_1op_1_1Constant_a1878da238e474f02555be8aa6244f310_1a1878da238e474f02555be8aa6244f310" kindref="member">get_value_strings</ref>();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tv-&gt;get_tensor().get_element_type().c_type_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>tv-&gt;get_tensor().get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>c_value_strings.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>=\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent++;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/>emit_string_array(c_value_strings,<sp/>100<sp/>-<sp/>writer.indent<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent--;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n};\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_variable_name_map[tv-&gt;get_tensor().get_name()]<sp/>=<sp/>tv-&gt;get_tensor().get_name();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;//<sp/>Declare<sp/>all<sp/>functions\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Function&gt;<sp/>f<sp/>:<sp/>pass_manager.get_state().get_functions())</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;extern<sp/>\&quot;C\&quot;<sp/>void<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>f-&gt;get_name()</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(void**<sp/>inputs,<sp/>void**<sp/>outputs,<sp/>cpu::CPURuntimeContext*<sp/>ctx);\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>for<sp/>loop<sp/>creates<sp/>a<sp/>collection<sp/>of<sp/>functions<sp/>that<sp/>are<sp/>called<sp/>more<sp/>than<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>emitting<sp/>them<sp/>as<sp/>globally<sp/>callable<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ops<sp/>implement<sp/>the<sp/>is_functionally_identical<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_map&lt;Node*,<sp/>string&gt;<sp/>match_functions;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Function&gt;<sp/>current_function<sp/>:<sp/>pass_manager.get_state().get_functions())</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>list&lt;shared_ptr&lt;Node&gt;&gt;&amp;<sp/>tmp<sp/>=<sp/>current_function-&gt;get_ordered_ops();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp.size()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>are<sp/>comparing<sp/>ops<sp/>there<sp/>must<sp/>be<sp/>at<sp/>least<sp/>two<sp/>ops<sp/>to<sp/>proceed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;shared_ptr&lt;Node&gt;&gt;<sp/>op_list{tmp.begin(),<sp/>tmp.end()};</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_map&lt;const<sp/>Node*,<sp/>string&gt;<sp/>node_cache;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>op_list.size();<sp/>i++)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_list[i]-&gt;is_constant()<sp/>||<sp/>op_list[i]-&gt;is_parameter())</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>&amp;<sp/>node<sp/>=<sp/>*op_list[i];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>handler<sp/>=<sp/>dispatcher.find(type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(node)));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handler<sp/>==<sp/>dispatcher.end())</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="structngraph_1_1ngraph__error" kindref="compound">ngraph_error</ref>(</highlight><highlight class="stringliteral">&quot;Unhandled<sp/>op<sp/>during<sp/>code<sp/>generation<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>node.<ref refid="classngraph_1_1Node_1a92598fdffd86cf6fd3adf0081e041d2f" kindref="member">description</ref>());</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>emit_op_as_function(node,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_cache.insert({&amp;node,<sp/>s});</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>op_list.size()<sp/>-<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op_list[i]-&gt;is_constant()<sp/>||<sp/>op_list[i]-&gt;is_parameter())</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contains_key(match_functions,<sp/>op_list[i].</highlight><highlight class="keyword">get</highlight><highlight class="normal">()))</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>match_function_name;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>op_list.size();<sp/>j++)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>*<sp/>op1<sp/>=<sp/>op_list[i].get();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>*<sp/>op2<sp/>=<sp/>op_list[j].get();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_functionally_identical(*op1,<sp/>*op2,<sp/>node_cache))</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match_function_name.empty())</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_function_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;func_&quot;</highlight><highlight class="normal"><sp/>+<sp/>op1-&gt;get_name();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_functions.insert({op1,<sp/>match_function_name});</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_functions.insert({op2,<sp/>match_function_name});</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!match_function_name.empty())</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/>emit_op_as_function(*op_list[i],<sp/>match_function_name);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Function&gt;<sp/>current_function<sp/>:<sp/>pass_manager.get_state().get_functions())</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set&lt;string&gt;<sp/>output_names;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Node&gt;<sp/>op<sp/>:<sp/>current_function-&gt;get_results())</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>tv<sp/>=<sp/>op-&gt;get_output_tensor_view();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_names.insert(tv-&gt;get_tensor().get_name());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set&lt;descriptor::TensorView*&gt;<sp/>constants;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Node&gt;<sp/>node<sp/>:<sp/>current_function-&gt;get_ordered_ops())</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dynamic_cast&lt;ngraph::op::Constant*&gt;(node.get()))</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>tv<sp/>=<sp/>node-&gt;get_outputs()[0].get_tensor_view();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constants.insert(tv.get());</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;extern<sp/>\&quot;C\&quot;<sp/>void<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>current_function-&gt;get_name();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(void**<sp/>inputs,<sp/>void**<sp/>outputs,<sp/>cpu::CPURuntimeContext*<sp/>ctx)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent++;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_use_tbb)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>This<sp/>should<sp/>be<sp/>static<sp/>but<sp/>we<sp/>don&apos;t<sp/>codegen<sp/>statics<sp/>correctly<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tbb::flow::graph<sp/>G;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execution<sp/>tracing<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(runtime::cpu::IsTracingEnabled()<sp/>&amp;&amp;<sp/>current_function-&gt;get_name()<sp/>==<sp/>function_name)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cpu::Timestamp<sp/>start_ts;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;int<sp/>profiler_count<sp/>=<sp/>0;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>temporaries_used<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>worst_case_tmp_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Node&gt;<sp/>node<sp/>:<sp/>current_function-&gt;get_ordered_ops())</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;liveness_new_list.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temporaries_used<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref>*<sp/>tensor<sp/>:<sp/>node-&gt;liveness_new_list)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst_case_tmp_size<sp/>+=<sp/>tensor-&gt;size();</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temporaries_used)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>temp_pool_size<sp/>=<sp/>current_function-&gt;get_temporary_pool_size();</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;//<sp/>Allocate<sp/>the<sp/>memory<sp/>pool\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;//<sp/>Memory<sp/>pool<sp/>size<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>temp_pool_size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>bytes\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;//<sp/>Worst<sp/>case<sp/>size<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>worst_case_tmp_size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>bytes\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ngraph::runtime::AlignedBuffer<sp/>memory_handler(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>temp_pool_size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>s_memory_pool_alignment<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;);\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;size_t<sp/>pool_base_ptr<sp/>=<sp/>(size_t)memory_handler.get_ptr();\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>temporaries<sp/>to<sp/>the<sp/>variable<sp/>name<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Node&gt;<sp/>node<sp/>:<sp/>current_function-&gt;get_ordered_ops())</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref>*<sp/>tensor<sp/>:<sp/>node-&gt;liveness_new_list)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;((&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tensor-&gt;get_element_type().c_type_string()</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;*)(pool_base_ptr<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tensor-&gt;get_pool_offset()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_variable_name_map[tensor-&gt;get_name()]<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>inputs<sp/>to<sp/>the<sp/>variable<sp/>name<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arg_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;ngraph::op::Parameter&gt;<sp/>param<sp/>:<sp/>current_function-&gt;get_parameters())</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>param-&gt;get_output_size();<sp/>++i)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>tv<sp/>=<sp/>param-&gt;get_output_tensor_view(i);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref>&amp;<sp/>et<sp/>=<sp/>tv-&gt;get_tensor_view_type()-&gt;get_element_type();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>et.c_type_string();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;((&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;*)(inputs[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>arg_index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_variable_name_map[tv-&gt;get_tensor().get_name()]<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_index++;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>output<sp/>alias<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_map&lt;descriptor::TensorView*,<sp/>vector&lt;size_t&gt;&gt;<sp/>output_alias_map;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;size_t&gt;<sp/>aliases;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>current_function-&gt;get_output_size();<sp/>++i)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Node&gt;<sp/>op<sp/>=<sp/>current_function-&gt;get_output_op(i);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>otv<sp/>=<sp/>op-&gt;get_output_tensor_view();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;size_t&gt;&amp;<sp/>al<sp/>=<sp/>output_alias_map[otv.get()];</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>al.push_back(output_index);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aliases.push_back(output_index);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_index++;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>outputs<sp/>to<sp/>the<sp/>variable<sp/>name<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>current_function-&gt;get_output_size();<sp/>++i)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Node&gt;<sp/>op<sp/>=<sp/>current_function-&gt;get_output_op(i);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>tv<sp/>=<sp/>op-&gt;get_output_tensor_view();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref>&amp;<sp/>et<sp/>=<sp/>tv-&gt;get_tensor_view_type()-&gt;get_element_type();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parameter_as_output<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;ngraph::op::Parameter&gt;<sp/>param<sp/>:<sp/>current_function-&gt;get_parameters())</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">descriptor::Output</ref>&amp;<sp/>pout<sp/>:<sp/>param-&gt;get_outputs())</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>ptv<sp/>=<sp/>pout.get_tensor_view();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tv<sp/>==<sp/>ptv)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter_as_output<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;memcpy(static_cast&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>et.c_type_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;*&gt;(outputs[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>output_index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_variable_name_map[ptv-&gt;get_tensor().get_name()]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptv-&gt;get_tensor().size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;);\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parameter_as_output<sp/>&amp;&amp;<sp/>!contains(aliases,<sp/>output_index))</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contains(constants,<sp/>tv.get()))</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;memcpy(outputs[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>output_index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;],<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>tv-&gt;get_tensor().get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tv-&gt;get_tensor().size()</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;);\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>et.c_type_string();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;((&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;*)(outputs[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>output_index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_variable_name_map[tv-&gt;get_tensor().get_name()]<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_index++;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Node&gt;<sp/>node<sp/>:<sp/>current_function-&gt;get_ordered_ops())</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>n<sp/>=<sp/>*node;<sp/></highlight><highlight class="comment">//<sp/>Work<sp/>around<sp/>a<sp/>compiler<sp/>warning<sp/>(*node<sp/>inside<sp/>typeid<sp/>may<sp/>have<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>shared<sp/>pointers,<sp/>which<sp/>is<sp/>fine<sp/>here<sp/>but<sp/>clang<sp/>doesn&apos;t<sp/>like<sp/>it.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>handler<sp/>=<sp/>dispatcher.find(type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(n)));</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handler<sp/>==<sp/>dispatcher.end())</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="structngraph_1_1ngraph__error" kindref="compound">ngraph_error</ref>(</highlight><highlight class="stringliteral">&quot;Unhandled<sp/>op<sp/>during<sp/>code<sp/>generation<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>node-&gt;<ref refid="classngraph_1_1Node_1a92598fdffd86cf6fd3adf0081e041d2f" kindref="member">description</ref>());</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;TensorViewWrapper&gt;<sp/>in;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>node_input_names;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>node_output_names;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">descriptor::Input</ref>&amp;<sp/>input<sp/>:<sp/>node-&gt;get_inputs())</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">descriptor::Output</ref>&amp;<sp/>output<sp/>=<sp/>input.get_output();</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>tv<sp/>=<sp/>output.get_tensor_view();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.push_back(</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TensorViewWrapper(tv,<sp/>m_variable_name_map[tv-&gt;get_tensor().get_name()]));</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_input_names.emplace_back(tv-&gt;get_tensor().get_name());</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;TensorViewWrapper&gt;<sp/>out;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">descriptor::Output</ref>&amp;<sp/>output<sp/>:<sp/>node-&gt;get_outputs())</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>tv<sp/>=<sp/>output.get_tensor_view();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TensorViewWrapper(tv,<sp/>m_variable_name_map[tv-&gt;get_tensor().get_name()]));</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_output_names.emplace_back(tv-&gt;get_tensor().get_name());</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Emit<sp/>operation<sp/>prologue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;is_parameter()<sp/>&amp;&amp;<sp/>!node-&gt;is_constant())</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_function-&gt;get_name()<sp/>==<sp/>function_name)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_op_attrs.emplace_back(</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="classngraph_1_1Node_1a92598fdffd86cf6fd3adf0081e041d2f" kindref="member">description</ref>(),<sp/>node_output_names,<sp/>node_input_names);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_use_tbb)</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tbb::flow::continue_node&lt;tbb::flow::continue_msg&gt;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;flowgraph_node_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>node-&gt;get_name()</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(G,<sp/>[&amp;](const<sp/>tbb::flow::continue_msg<sp/>&amp;msg)\n{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent++;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_emit_timing)</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit_debug_function_entry(writer,<sp/>node.get(),<sp/>in,<sp/>out);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(runtime::cpu::IsTracingEnabled()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_function-&gt;get_name()<sp/>==<sp/>function_name)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;start_ts<sp/>=<sp/>cpu::Clock::now();\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n//<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>parameter_nodes<sp/>=<sp/>node_input_names;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter_nodes.insert(</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter_nodes.end(),<sp/>node_output_names.begin(),<sp/>node_output_names.end());</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/>join(parameter_nodes);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Emit<sp/>operation<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>func_name;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>match_functions.find(node.get());</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>match_functions.end())</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler-&gt;second(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>writer,<sp/>node.get(),<sp/>in,<sp/>out);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>names;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorViewWrapper&amp;<sp/>tv<sp/>:<sp/>in)</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>names.push_back(tv.get_name());</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorViewWrapper&amp;<sp/>tv<sp/>:<sp/>out)</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>names.push_back(tv.get_name());</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/>func_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>join(names)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>ctx);\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Emit<sp/>operation<sp/>epilogue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;is_parameter()<sp/>&amp;&amp;<sp/>!node-&gt;is_constant())</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle_output_alias(writer,<sp/>*node,<sp/>output_alias_map);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_emit_timing)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit_debug_function_exit(writer,<sp/>node.get(),<sp/>in,<sp/>out);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(runtime::cpu::IsTracingEnabled()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_function-&gt;get_name()<sp/>==<sp/>function_name)</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ctx-&gt;op_durations[profiler_count++]<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(std::chrono::duration_cast&lt;cpu::Timescale&gt;(cpu::Clock::now()<sp/>-<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;start_ts)).count();\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_use_tbb)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent--;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;});\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_use_tbb)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>the<sp/>flow<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Node*&gt;<sp/>dependence_graph_heads;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traverse_nodes(</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_function,<sp/>[&amp;writer,<sp/>&amp;dependence_graph_heads](shared_ptr&lt;Node&gt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n-&gt;is_parameter()<sp/>&amp;&amp;<sp/>!n-&gt;is_constant())</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_head<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>:<sp/>n-&gt;get_input_ops())</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg-&gt;is_parameter()<sp/>&amp;&amp;<sp/>!arg-&gt;is_constant())</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_head<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tbb::flow::make_edge(flowgraph_node_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>arg-&gt;get_name()</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>flowgraph_node_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;);\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_head)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependence_graph_heads.emplace_back(n.get());</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>the<sp/>flow<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dependence_graph_heads.empty())</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classngraph_1_1Node" kindref="compound">Node</ref>*<sp/>n<sp/>:<sp/>dependence_graph_heads)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;flowgraph_node_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n-&gt;get_name()</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.try_put(tbb::flow::continue_msg());\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;try<sp/>{<sp/>G.wait_for_all();<sp/>}<sp/>catch(...)<sp/>{<sp/>throw;<sp/>}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent--;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>generated<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;}\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>layouts<sp/>assigned<sp/>for<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>parameter<sp/>:<sp/>m_function-&gt;get_parameters())</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>parameter-&gt;get_output_size();<sp/>++i)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tv<sp/>=<sp/>parameter-&gt;get_output_tensor_view(i);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tv-&gt;get_tensor_view_layout()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="structngraph_1_1ngraph__error" kindref="compound">ngraph_error</ref>(</highlight><highlight class="stringliteral">&quot;layout<sp/>missing<sp/>on<sp/>function<sp/>parameter&apos;s<sp/>tensor<sp/>view:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tv-&gt;get_name());</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter_layout_descriptors.emplace_back(</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_pointer_cast&lt;runtime::cpu::LayoutDescriptor&gt;(tv-&gt;get_tensor_view_layout()));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>layouts<sp/>assigned<sp/>for<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result_layout_descriptors.empty())</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="structngraph_1_1ngraph__error" kindref="compound">ngraph_error</ref>(</highlight><highlight class="stringliteral">&quot;Function<sp/>output<sp/>layouts<sp/>should<sp/>not<sp/>be<sp/>pre-assigned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_function-&gt;get_output_size();<sp/>++i)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>output<sp/>=<sp/>m_function-&gt;get_output_op(i);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>output-&gt;get_output_size();<sp/>++j)</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tv<sp/>=<sp/>output-&gt;get_output_tensor_view(j);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tv-&gt;get_tensor_view_layout()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="structngraph_1_1ngraph__error" kindref="compound">ngraph_error</ref>(</highlight><highlight class="stringliteral">&quot;layout<sp/>missing<sp/>on<sp/>function<sp/>output<sp/>tensor:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>tv-&gt;get_name());</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_layout_descriptors.emplace_back(</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_pointer_cast&lt;runtime::cpu::LayoutDescriptor&gt;(tv-&gt;get_tensor_view_layout()));</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Cleanup<sp/>and<sp/>make<sp/>this<sp/>a<sp/>utility<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>file_util::make_directory(s_output_dir);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>filename<sp/>=<sp/>file_util::path_join(s_output_dir,<sp/>function_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_codegen.cpp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>out(filename);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>code<sp/>=<sp/>writer.get_code();</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>code;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>out.close();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compiler.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1codegen_1_1Compiler" kindref="compound">codegen::Compiler</ref>());</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>m_execution_engine.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1codegen_1_1ExecutionEngine" kindref="compound">codegen::ExecutionEngine</ref>());</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compiler-&gt;set_precompiled_header_source(pch_header_source);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>codegen_module<sp/>=<sp/>m_compiler-&gt;compile(code);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codegen_module<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>runtime_error(</highlight><highlight class="stringliteral">&quot;function<sp/>failed<sp/>to<sp/>compile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>m_execution_engine-&gt;add_module(codegen_module);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>m_execution_engine-&gt;finalize();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compiled_function<sp/>=<sp/>m_execution_engine-&gt;find_function&lt;EntryPoint_t&gt;(function_name);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_compiled_function<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>runtime_error(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>find<sp/>compiled<sp/>function&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>m_is_compiled<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_release_function)</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>release_function();</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>runtime::cpu::CPU_ExternalFunction::handle_output_alias(</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1codegen_1_1CodeWriter" kindref="compound">codegen::CodeWriter</ref>&amp;<sp/>writer,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>&amp;<sp/>node,</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>unordered_map&lt;<ref refid="classngraph_1_1descriptor_1_1TensorView" kindref="compound">descriptor::TensorView</ref>*,<sp/>vector&lt;size_t&gt;&gt;&amp;<sp/>output_alias_map)</highlight></codeline>
<codeline lineno="886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">descriptor::Output</ref>&amp;<sp/>output<sp/>:<sp/>node.get_outputs())</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>otv<sp/>=<sp/>output.get_tensor_view();</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>output_alias_map.find(otv.get());</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>output_alias_map.end())</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;size_t&gt;&amp;<sp/>outputs<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outputs.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{<sp/><sp/><sp/><sp/>//<sp/>handle<sp/>output<sp/>alias<sp/>for<sp/>previous<sp/>op\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent++;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>outputs.size();<sp/>i++)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;memcpy(static_cast&lt;void*&gt;(outputs[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>outputs[i]</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]),<sp/>static_cast&lt;void*&gt;(outputs[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>outputs[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>otv-&gt;get_tensor().size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;);\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.indent--;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal">shared_ptr&lt;ngraph::runtime::CallFrame&gt;<sp/>runtime::cpu::CPU_ExternalFunction::make_call_frame()</highlight></codeline>
<codeline lineno="912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_is_compiled)</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile();</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_shared&lt;ngraph::runtime::cpu::CPU_CallFrame&gt;(shared_from_this(),</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_compiled_function);</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>runtime::cpu::LayoutDescriptorPtrs&amp;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>runtime::cpu::CPU_ExternalFunction::get_parameter_layout_descriptors()</highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parameter_layout_descriptors;</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>runtime::cpu::LayoutDescriptorPtrs&amp;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>runtime::cpu::CPU_ExternalFunction::get_result_layout_descriptors()</highlight></codeline>
<codeline lineno="930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result_layout_descriptors;</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>runtime::cpu::CPU_ExternalFunction::emit_debug_function_entry(</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1codegen_1_1CodeWriter" kindref="compound">codegen::CodeWriter</ref>&amp;<sp/>writer,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>*<sp/>node,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TensorViewWrapper&gt;&amp;<sp/>in,</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TensorViewWrapper&gt;&amp;<sp/>out)</highlight></codeline>
<codeline lineno="939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;timer_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.start();\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>runtime::cpu::CPU_ExternalFunction::emit_debug_function_exit(</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1codegen_1_1CodeWriter" kindref="compound">codegen::CodeWriter</ref>&amp;<sp/>writer,</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>*<sp/>node,</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TensorViewWrapper&gt;&amp;<sp/>in,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TensorViewWrapper&gt;&amp;<sp/>out)</highlight></codeline>
<codeline lineno="948"><highlight class="normal">{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;timer_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.stop();\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>runtime::cpu::CPU_ExternalFunction::is_functionally_identical(</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>&amp;<sp/>n1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>&amp;<sp/>n2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>unordered_map&lt;const<sp/>Node*,<sp/>string&gt;&amp;<sp/>node_cache)</highlight></codeline>
<codeline lineno="954"><highlight class="normal">{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_cache.at(&amp;n1)<sp/>==<sp/>node_cache.at(&amp;n2);</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>runtime::cpu::CPU_ExternalFunction::emit_op_as_function(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>&amp;<sp/>node,</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>function_name)</highlight></codeline>
<codeline lineno="960"><highlight class="normal">{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1codegen_1_1CodeWriter" kindref="compound">codegen::CodeWriter</ref><sp/>writer;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>void<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>function_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.indent++;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Work<sp/>around<sp/>a<sp/>compiler<sp/>warning<sp/>(*node<sp/>inside<sp/>typeid<sp/>may<sp/>have<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>shared<sp/>pointers,<sp/>which<sp/>is<sp/>fine<sp/>here<sp/>but<sp/>clang<sp/>doesn&apos;t<sp/>like<sp/>it.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>handler<sp/>=<sp/>dispatcher.find(type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(node)));</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;TensorViewWrapper&gt;<sp/>in;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arg_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>set&lt;string&gt;<sp/>arg_names;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">descriptor::Input</ref>&amp;<sp/>input<sp/>:<sp/>node.get_inputs())</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">descriptor::Output</ref>&amp;<sp/>output<sp/>=<sp/>input.get_output();</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>tv<sp/>=<sp/>output.get_tensor_view();</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TensorViewWrapper<sp/>tvw{tv,<sp/></highlight><highlight class="stringliteral">&quot;_arg&quot;</highlight><highlight class="normal"><sp/>+<sp/>to_string(arg_index)};</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!contains(arg_names,<sp/>tvw.get_name()))</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_names.insert(tvw.get_name());</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_index++<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/>tvw.get_type()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;*<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tvw.get_name();</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.push_back(tvw);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;TensorViewWrapper&gt;<sp/>out;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">descriptor::Output</ref>&amp;<sp/>output<sp/>:<sp/>node.get_outputs())</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;descriptor::TensorView&gt;<sp/>tv<sp/>=<sp/>output.get_tensor_view();</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TensorViewWrapper<sp/>tvw{tv,<sp/></highlight><highlight class="stringliteral">&quot;_out&quot;</highlight><highlight class="normal"><sp/>+<sp/>to_string(arg_index)};</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_index++<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/>tvw.get_type()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;*<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tvw.get_name();</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(tvw);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,\ncpu::CPURuntimeContext*<sp/>ctx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.indent--;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.indent++;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>handler-&gt;second(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>writer,<sp/>&amp;node,<sp/>in,<sp/>out);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.indent--;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>writer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>writer.get_code();</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>strip_comments(rc);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>runtime::cpu::CPU_ExternalFunction::strip_comments(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>out;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>s.size()<sp/>-<sp/>2)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>s[i<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>line<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>s[i<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multi-line<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(s[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>s[i<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>s[i];</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>s[i];</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/cpu/cpu_external_function.cpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespacengraph_1_1builder" kind="namespace" language="C++">
    <compoundname>ngraph::builder</compoundname>
    <innerclass refid="classngraph_1_1builder_1_1autobroadcast__incompatible__shapes" prot="public">ngraph::builder::autobroadcast_incompatible_shapes</innerclass>
    <innerclass refid="structngraph_1_1builder_1_1Autobroadcast__plan" prot="public">ngraph::builder::Autobroadcast_plan</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacengraph_1_1builder_1ab6b57afc41d92e090b0e2fcd3e25fecc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structngraph_1_1builder_1_1Autobroadcast__plan" kindref="compound">Autobroadcast_plan</ref></type>
        <definition>static Autobroadcast_plan ngraph::builder::compute_shapes_and_broadcast_axes</definition>
        <argsstring>(const ngraph::Shape &amp;arg1_in_shape, const ngraph::Shape &amp;arg2_in_shape)</argsstring>
        <name>compute_shapes_and_broadcast_axes</name>
        <param>
          <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">ngraph::Shape</ref> &amp;</type>
          <declname>arg1_in_shape</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">ngraph::Shape</ref> &amp;</type>
          <declname>arg2_in_shape</declname>
        </param>
        <briefdescription>
<para>Compute the details regarding what reshape and/or broadcast operations must be applied to arg1 and/or arg2, as well as what the final resulting shape shall be. </para>        </briefdescription>
        <detaileddescription>
<para>If this algorithm cannot handle the particular combination of shapes supplied as inputs, throw an <ref refid="classngraph_1_1builder_1_1autobroadcast__incompatible__shapes" kindref="compound">ngraph::builder::autobroadcast_incompatible_shapes</ref> exception.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classngraph_1_1builder_1_1autobroadcast__incompatible__shapes" kindref="compound">ngraph::builder::autobroadcast_incompatible_shapes</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.cpp" line="80" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.cpp" bodystart="80" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1builder_1af1788c131d386b1ec15b4da9819114b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;Node&gt; ngraph::builder::add_required_ops</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;node, const ngraph::Shape &amp;node_shape_after_possible_reshaping, const ngraph::AxisSet &amp;node_broadcast_axes, const ngraph::Shape &amp;node_final_shape)</argsstring>
        <name>add_required_ops</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">ngraph::Shape</ref> &amp;</type>
          <declname>node_shape_after_possible_reshaping</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a550e0ad172aface7ca88c0ae5539470a" kindref="member">ngraph::AxisSet</ref> &amp;</type>
          <declname>node_broadcast_axes</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">ngraph::Shape</ref> &amp;</type>
          <declname>node_final_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If necessary, wrap <computeroutput>node</computeroutput> with an additional reshape and/or broadcast op. Return a pointer to the node that produces the wrapped value. If no additional reshape or broadcast op was needed, simply return <computeroutput>node</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.cpp" line="154" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.cpp" bodystart="154" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1builder_ab9f0e14e239430367d6a5a47cc27b0eb_1ab9f0e14e239430367d6a5a47cc27b0eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;, std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &gt;</type>
        <definition>std::pair&lt; std::shared_ptr&lt; Node &gt;, std::shared_ptr&lt; Node &gt; &gt; ngraph::builder::numpy_broadcast</definition>
        <argsstring>(const std::pair&lt; std::shared_ptr&lt; Node &gt;, std::shared_ptr&lt; Node &gt;&gt; &amp;args)</argsstring>
        <name>numpy_broadcast</name>
        <param>
          <type>const std::pair&lt; std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;, std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;&gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Wrap two graph nodes, if necessary, to obtain values with identical shapes, using NumPy&apos;s auto-broadcast rules. </para>        </briefdescription>
        <detaileddescription>
<para>The elements in the std::pair returned by this function correspond to those supplied in the std::pair provided via <computeroutput>args</computeroutput>.</para><para>If <computeroutput>args.first</computeroutput> and <computeroutput>args.second</computeroutput> produce identical shapes, then the returned std::pair will have the same value as <computeroutput>args</computeroutput>.</para><para>If <computeroutput>args.first</computeroutput> and <computeroutput>args.second</computeroutput> produce different shapes, then this function creates new <ref refid="classngraph_1_1op_1_1Reshape" kindref="compound">ngraph::op::Reshape</ref> and/or <ref refid="classngraph_1_1op_1_1Broadcast" kindref="compound">ngraph::op::Broadcast</ref> nodes, as needed, to wrap <computeroutput>args.first</computeroutput> and/or <computeroutput>args.second</computeroutput> in a manner that yields values with the same shape.</para><para>There are some shape combinations which the autobroadcast algoritm cannot handle. An exception is thrown when such combinations are provided to this function.</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para><computeroutput>args.first</computeroutput> is not null</para></listitem><listitem><para><computeroutput>args.second</computeroutput> is not null</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>The <ref refid="classngraph_1_1Node" kindref="compound">ngraph::Node</ref> objects pointed to by <computeroutput>args.first</computeroutput> and <computeroutput>args.second</computeroutput> have not been altered by this function, except by possibly having added consumers of their values.</para></listitem><listitem><para>If an exception was not thrown, then the return value&apos;s <computeroutput>first</computeroutput> and <computeroutput>second</computeroutput> elements point to <ref refid="classngraph_1_1Node" kindref="compound">ngraph::Node</ref> objects whose output values have the same shape.</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classngraph_1_1builder_1_1autobroadcast__incompatible__shapes" kindref="compound">ngraph::builder::autobroadcast_incompatible_shapes</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.cpp" line="180" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.cpp" bodystart="180" bodyend="210"/>
        <references refid="namespacengraph_1_1builder_ab9f0e14e239430367d6a5a47cc27b0eb_1ab9f0e14e239430367d6a5a47cc27b0eb" compoundref="autobroadcast_8cpp" startline="180" endline="210">numpy_broadcast</references>
        <referencedby refid="namespacengraph_1_1builder_ab9f0e14e239430367d6a5a47cc27b0eb_1ab9f0e14e239430367d6a5a47cc27b0eb" compoundref="autobroadcast_8cpp" startline="180" endline="210">numpy_broadcast</referencedby>
        <referencedby refid="namespacengraph_1_1builder_ad991d766bdebcbbd294c4e2d6f4ab929_1ad991d766bdebcbbd294c4e2d6f4ab929" compoundref="autobroadcast_8hpp" startline="90" endline="96">make_with_numpy_broadcast</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1builder_ad991d766bdebcbbd294c4e2d6f4ab929_1ad991d766bdebcbbd294c4e2d6f4ab929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NodeType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; NodeType &gt;</type>
        <definition>std::shared_ptr&lt;NodeType&gt; ngraph::builder::make_with_numpy_broadcast</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;operand1_reshapeable, const std::shared_ptr&lt; Node &gt; &amp;operand2_reshapeable)</argsstring>
        <name>make_with_numpy_broadcast</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>operand1_reshapeable</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>operand2_reshapeable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <computeroutput>NodeType</computeroutput> node, and any additional nodes required to simulate NumPy-style autobroadcast semantics. Intended for binary operations such as &quot;Add&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">operand1_reshapeable</parametername>
</parameternamelist>
<parameterdescription>
<para>The first operand to supply to the <computeroutput>NodeType</computeroutput> constructor. Subject to being wrapped with additional nodes required for autobroadcasting. Must not be null.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operand2_reshapeable</parametername>
</parameternamelist>
<parameterdescription>
<para>The second operand to supply to the <computeroutput>NodeType</computeroutput> constructor. Subject to being wrapped with additional nodes required for autobroadcasting. Must not be null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sink node of any/all nodes created by this function. Will never be null.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classngraph_1_1builder_1_1autobroadcast__incompatible__shapes" kindref="compound">ngraph::builder::autobroadcast_incompatible_shapes</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.hpp" line="90" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.hpp" bodystart="90" bodyend="96"/>
        <references refid="namespacengraph_1_1builder_ab9f0e14e239430367d6a5a47cc27b0eb_1ab9f0e14e239430367d6a5a47cc27b0eb" compoundref="autobroadcast_8cpp" startline="180" endline="210">numpy_broadcast</references>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1builder_aef74aba6af2369a6bde07003db6e3124_1aef74aba6af2369a6bde07003db6e3124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NodeType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; NodeType &gt;</type>
        <definition>std::shared_ptr&lt;NodeType&gt; ngraph::builder::make_with_numpy_broadcast</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;operand1, const std::shared_ptr&lt; Node &gt; &amp;operand2_reshapeable, const std::shared_ptr&lt; Node &gt; &amp;operand3_reshapeable)</argsstring>
        <name>make_with_numpy_broadcast</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>operand1</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>operand2_reshapeable</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>operand3_reshapeable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <computeroutput>NodeType</computeroutput> node, and any additional nodes required to simulate NumPy-style autobroadcast semantics. Intended for non-binary operations such as &quot;Select&quot;, where precisely the second and third operands are subject to autobroadcast semantics.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">operand1</parametername>
</parameternamelist>
<parameterdescription>
<para>This operand is not subject to autobraodcast logic, and will be passed as-is as the first argument to the <computeroutput>NodeType</computeroutput> constructor.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operand2_reshapeable</parametername>
</parameternamelist>
<parameterdescription>
<para>The second operand to supply to the <computeroutput>NodeType</computeroutput> constructor. Subject to being wrapped with additional nodes required for autobroadcasting. Must not be null.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operand3_reshapeable</parametername>
</parameternamelist>
<parameterdescription>
<para>The third operand to supply to the <computeroutput>NodeType</computeroutput> constructor. Subject to being wrapped with additional nodes required for autobroadcasting. Must not be null.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sink node of any/all nodes created by this function. Will never be null.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classngraph_1_1builder_1_1autobroadcast__incompatible__shapes" kindref="compound">ngraph::builder::autobroadcast_incompatible_shapes</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.hpp" line="116" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.hpp" bodystart="116" bodyend="124"/>
        <references refid="namespacengraph_1_1builder_ab9f0e14e239430367d6a5a47cc27b0eb_1ab9f0e14e239430367d6a5a47cc27b0eb" compoundref="autobroadcast_8cpp" startline="180" endline="210">numpy_broadcast</references>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1builder_aa2d914823e6748b327765e653057970d_1aa2d914823e6748b327765e653057970d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Node &gt; ngraph::builder::numpy_transpose</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;node, AxisVector order={})</argsstring>
        <name>numpy_transpose</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="namespacengraph_1ace79ef4b996f377753162926c987a2dd" kindref="member">AxisVector</ref></type>
          <declname>order</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Implement&apos;s Numpy&apos;s multidimensional transpose op. Doubles as DimShuffle. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>order</computeroutput> is empty, the vector is transposed by reversing it&apos;s axes, i.e.</para><para>shape [1,2,4] becomes shape [4,2,1]</para><para>If <computeroutput>order</computeroutput> is provided, it should be a vector of unique axis positions ranging from 0 to N-1, when N is the length of the input shape. In this case, numpy_transpose acts like dimshuffle, so</para><para>shape [1,2,4] with order [1,2,0] becomes shape [2,4,1]</para><para><table rows="3" cols="3"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>node</computeroutput>  </para></entry><entry thead="no"><para><formula id="0">$E[d_0,\dots,d_{n-1}]~(n \geq 0)$</formula>  </para></entry><entry thead="no"><para>An input tensor of any shape   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>order</computeroutput>  </para></entry><entry thead="no"><para>AxisVector (empty default)  </para></entry><entry thead="no"><para>The axes to eliminate through reduction (0 indexed).   </para></entry></row>
</table>
</para><para><heading level="2">Output</heading>
</para><para><table rows="2" cols="2"><row>
<entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><formula id="1">$E[d_{n-1},\dots,d_0)]\textit{ or }E[d_{order[0]},\dots,d_{order[n-1]}]$</formula>  </para></entry><entry thead="no"><para>The tensor <formula id="2">$T$</formula>, where <formula id="2">$T$</formula> is the input tensor with the axes reordered via Numpy Transpose rules   </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/numpy_transpose.cpp" line="38" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/numpy_transpose.cpp" bodystart="38" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1builder_1a56d49fa0658450ebf073d3f3d99e3b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ngraph::builder::get_num_elements</definition>
        <argsstring>(const Shape &amp;shape, const AxisSet &amp;reduction_axes)</argsstring>
        <name>get_num_elements</name>
        <param>
          <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a550e0ad172aface7ca88c0ae5539470a" kindref="member">AxisSet</ref> &amp;</type>
          <declname>reduction_axes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/reduce_ops.cpp" line="33" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/reduce_ops.cpp" bodystart="33" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1builder_ae1f7d64ba30c461078416ff3fb65f7a4_1ae1f7d64ba30c461078416ff3fb65f7a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Node &gt; ngraph::builder::l2_norm</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;node, const AxisSet &amp;reduction_axes)</argsstring>
        <name>l2_norm</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a550e0ad172aface7ca88c0ae5539470a" kindref="member">AxisSet</ref> &amp;</type>
          <declname>reduction_axes</declname>
        </param>
        <briefdescription>
<para>Sum-based L2 Norm of a Tensor. </para>        </briefdescription>
        <detaileddescription>
<para>Calculates</para><para><formula id="3">$\left(\sum_{i=1}^{N} x_i^2\right)^{0.5}$</formula></para><para>Where <computeroutput>i</computeroutput> traverses all of the axes provided in <computeroutput>reduction_axes</computeroutput></para><para><heading level="2">Inputs</heading>
</para><para><table rows="3" cols="3"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>node</computeroutput>  </para></entry><entry thead="no"><para><formula id="4">$E[d_1,\dots,d_n]~(n \geq 0)$</formula>  </para></entry><entry thead="no"><para>An input tensor of any shape   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>reduction_axes</computeroutput>  </para></entry><entry thead="no"><para>AxesSet  </para></entry><entry thead="no"><para>The axes to eliminate through reduction (0 indexed).   </para></entry></row>
</table>
</para><para><heading level="2">Output</heading>
</para><para><table rows="2" cols="2"><row>
<entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><formula id="5">$E[\textit{delete}(A,d_1,\dots,d_n)]$</formula>  </para></entry><entry thead="no"><para>The tensor <formula id="2">$T$</formula>, where <formula id="2">$T$</formula> is the input tensor with the <computeroutput>reduction_axes</computeroutput> <formula id="6">$A$</formula> eliminated by reduction.   </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/reduce_ops.cpp" line="43" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/reduce_ops.cpp" bodystart="43" bodyend="53"/>
        <references refid="classngraph_1_1op_1_1Constant_a803a76dee878974952facf39055183b1_1a803a76dee878974952facf39055183b1" compoundref="ops_2constant_8hpp" startline="115" endline="118">ngraph::op::Constant::create</references>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1builder_ae85b2d61001376771c4268d37f6a816a_1ae85b2d61001376771c4268d37f6a816a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Node &gt; ngraph::builder::mean</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;node, const AxisSet &amp;reduction_axes)</argsstring>
        <name>mean</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a550e0ad172aface7ca88c0ae5539470a" kindref="member">AxisSet</ref> &amp;</type>
          <declname>reduction_axes</declname>
        </param>
        <briefdescription>
<para>Sum-based Mean of a Tensor. </para>        </briefdescription>
        <detaileddescription>
<para>Calculates</para><para><formula id="7">$\sum_{i=1}^{N} \frac{x_i}{N}$</formula></para><para>Where <computeroutput>i</computeroutput> traverses all of the axes provided in <computeroutput>reduction_axes</computeroutput></para><para><heading level="2">Inputs</heading>
</para><para><table rows="3" cols="3"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>node</computeroutput>  </para></entry><entry thead="no"><para><formula id="4">$E[d_1,\dots,d_n]~(n \geq 0)$</formula>  </para></entry><entry thead="no"><para>An input tensor of any shape   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>reduction_axes</computeroutput>  </para></entry><entry thead="no"><para>AxesSet  </para></entry><entry thead="no"><para>The axes to eliminate through reduction (0 indexed).   </para></entry></row>
</table>
</para><para><heading level="2">Output</heading>
</para><para><table rows="2" cols="2"><row>
<entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><formula id="5">$E[\textit{delete}(A,d_1,\dots,d_n)]$</formula>  </para></entry><entry thead="no"><para>The tensor <formula id="2">$T$</formula>, where <formula id="2">$T$</formula> is the input tensor with the <computeroutput>reduction_axes</computeroutput> <formula id="6">$A$</formula> eliminated by reduction.   </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/reduce_ops.cpp" line="55" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/reduce_ops.cpp" bodystart="55" bodyend="65"/>
        <references refid="classngraph_1_1op_1_1Constant_a803a76dee878974952facf39055183b1_1a803a76dee878974952facf39055183b1" compoundref="ops_2constant_8hpp" startline="115" endline="118">ngraph::op::Constant::create</references>
        <referencedby refid="namespacengraph_1_1builder_a7d0d9c205e6343ce056feb896a630c55_1a7d0d9c205e6343ce056feb896a630c55" compoundref="reduce__ops_8cpp" startline="83" endline="117">variance</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1builder_a2263cf8686e32b3c18fe9be59ad21984_1a2263cf8686e32b3c18fe9be59ad21984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Node &gt; ngraph::builder::std_dev</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;node, const AxisSet &amp;reduction_axes, const bool bessel_correction=false)</argsstring>
        <name>std_dev</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a550e0ad172aface7ca88c0ae5539470a" kindref="member">AxisSet</ref> &amp;</type>
          <declname>reduction_axes</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>bessel_correction</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sum-based Standard Deviation of a Tensor. </para>        </briefdescription>
        <detaileddescription>
<para>If bessel_correct is true, calculates</para><para><formula id="8">$\sqrt{\frac{\sum_{i=1}^{N}\left(x_i-\bar{x}\right)^2}{N-1}}$</formula></para><para>else, calculates</para><para><formula id="9">$\sqrt{\frac{\sum_{i=1}^{N}\left(x_i-\bar{x}\right)^2}{N}}$</formula></para><para>Where <computeroutput>i</computeroutput> traverses all of the axes provided in <computeroutput>reduction_axes</computeroutput> and <formula id="10">$\bar{x} = \sum_{i=1}^{N} \frac{x_i}{N}$</formula></para><para><heading level="2">Inputs</heading>
</para><para><table rows="4" cols="3"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>node</computeroutput>  </para></entry><entry thead="no"><para><formula id="4">$E[d_1,\dots,d_n]~(n \geq 0)$</formula>  </para></entry><entry thead="no"><para>An input tensor of any shape   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>reduction_axes</computeroutput>  </para></entry><entry thead="no"><para>AxesSet  </para></entry><entry thead="no"><para>The axes to eliminate through reduction (0 indexed).   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>bessel_correction</computeroutput>  </para></entry><entry thead="no"><para>bool (default = false)  </para></entry><entry thead="no"><para>Enable Bessel&apos;s correction to std_dev for Small sample sizes   </para></entry></row>
</table>
</para><para><heading level="2">Output</heading>
</para><para><table rows="2" cols="2"><row>
<entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><formula id="5">$E[\textit{delete}(A,d_1,\dots,d_n)]$</formula>  </para></entry><entry thead="no"><para>The tensor <formula id="2">$T$</formula>, where <formula id="2">$T$</formula> is the input tensor with the <computeroutput>reduction_axes</computeroutput> <formula id="6">$A$</formula> eliminated by reduction.   </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/reduce_ops.cpp" line="67" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/reduce_ops.cpp" bodystart="67" bodyend="77"/>
        <references refid="namespacengraph_1_1builder_a7d0d9c205e6343ce056feb896a630c55_1a7d0d9c205e6343ce056feb896a630c55" compoundref="reduce__ops_8cpp" startline="83" endline="117">variance</references>
        <references refid="classngraph_1_1op_1_1Constant_a803a76dee878974952facf39055183b1_1a803a76dee878974952facf39055183b1" compoundref="ops_2constant_8hpp" startline="115" endline="118">ngraph::op::Constant::create</references>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1builder_a7d0d9c205e6343ce056feb896a630c55_1a7d0d9c205e6343ce056feb896a630c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Node &gt; ngraph::builder::variance</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;node, const AxisSet &amp;reduction_axes, const bool bessel_correction=false)</argsstring>
        <name>variance</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a550e0ad172aface7ca88c0ae5539470a" kindref="member">AxisSet</ref> &amp;</type>
          <declname>reduction_axes</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>bessel_correction</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sum-based Variance of a Tensor. </para>        </briefdescription>
        <detaileddescription>
<para>If bessel_correct is true, calculates</para><para><formula id="11">$\frac{\sum_{i=1}^{N}\left(x_i-\bar{x}\right)^2}{N-1}$</formula></para><para>else, calculates</para><para><formula id="12">$\frac{\sum_{i=1}^{N}\left(x_i-\bar{x}\right)^2}{N}$</formula></para><para>Where <computeroutput>i</computeroutput> traverses all of the axes provided in <computeroutput>reduction_axes</computeroutput> and <formula id="10">$\bar{x} = \sum_{i=1}^{N} \frac{x_i}{N}$</formula></para><para><heading level="2">Inputs</heading>
</para><para><table rows="4" cols="3"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>node</computeroutput>  </para></entry><entry thead="no"><para><formula id="4">$E[d_1,\dots,d_n]~(n \geq 0)$</formula>  </para></entry><entry thead="no"><para>An input tensor of any shape   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>reduction_axes</computeroutput>  </para></entry><entry thead="no"><para>AxesSet  </para></entry><entry thead="no"><para>The axes to eliminate through reduction (0 indexed).   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>bessel_correction</computeroutput>  </para></entry><entry thead="no"><para>bool (default = false)  </para></entry><entry thead="no"><para>Enable Bessel&apos;s correction to std_dev for Small sample sizes   </para></entry></row>
</table>
</para><para><heading level="2">Output</heading>
</para><para><table rows="2" cols="2"><row>
<entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><formula id="5">$E[\textit{delete}(A,d_1,\dots,d_n)]$</formula>  </para></entry><entry thead="no"><para>The tensor <formula id="2">$T$</formula>, where <formula id="2">$T$</formula> is the input tensor with the <computeroutput>reduction_axes</computeroutput> <formula id="6">$A$</formula> eliminated by reduction.   </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/reduce_ops.cpp" line="83" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/reduce_ops.cpp" bodystart="83" bodyend="117"/>
        <references refid="namespacengraph_1_1builder_ae85b2d61001376771c4268d37f6a816a_1ae85b2d61001376771c4268d37f6a816a" compoundref="reduce__ops_8cpp" startline="55" endline="65">mean</references>
        <references refid="classngraph_1_1op_1_1Constant_a803a76dee878974952facf39055183b1_1a803a76dee878974952facf39055183b1" compoundref="ops_2constant_8hpp" startline="115" endline="118">ngraph::op::Constant::create</references>
        <referencedby refid="namespacengraph_1_1builder_a2263cf8686e32b3c18fe9be59ad21984_1a2263cf8686e32b3c18fe9be59ad21984" compoundref="reduce__ops_8cpp" startline="67" endline="77">std_dev</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Convenience functions that create addional graph nodes to implement commonly-used recipes, for example auto-broadcast. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/autobroadcast.cpp" line="33" column="1"/>
  </compounddef>
</doxygen>

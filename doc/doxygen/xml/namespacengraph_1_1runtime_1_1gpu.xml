<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespacengraph_1_1runtime_1_1gpu" kind="namespace" language="C++">
    <compoundname>ngraph::runtime::gpu</compoundname>
    <innerclass refid="classngraph_1_1runtime_1_1gpu_1_1GPU__Backend" prot="public">ngraph::runtime::gpu::GPU_Backend</innerclass>
    <innerclass refid="classngraph_1_1runtime_1_1gpu_1_1GPU__CallFrame" prot="public">ngraph::runtime::gpu::GPU_CallFrame</innerclass>
    <innerclass refid="classngraph_1_1runtime_1_1gpu_1_1GPU__Emitter" prot="public">ngraph::runtime::gpu::GPU_Emitter</innerclass>
    <innerclass refid="classngraph_1_1runtime_1_1gpu_1_1GPU__ExternalFunction" prot="public">ngraph::runtime::gpu::GPU_ExternalFunction</innerclass>
    <innerclass refid="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager" prot="public">ngraph::runtime::gpu::GPU_Manager</innerclass>
    <innerclass refid="classngraph_1_1runtime_1_1gpu_1_1GPU__TensorView" prot="public">ngraph::runtime::gpu::GPU_TensorView</innerclass>
    <innerclass refid="classngraph_1_1runtime_1_1gpu_1_1GPU__TensorViewWrapper" prot="public">ngraph::runtime::gpu::GPU_TensorViewWrapper</innerclass>
    <innernamespace refid="namespacengraph_1_1runtime_1_1gpu_1_1kernel">ngraph::runtime::gpu::kernel</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gpu__call__frame_8hpp_1aa84e12aeb9cd28d26c4b5db585c3f1a6" prot="public" static="no">
        <type>void(void **inputs, void **outputs, cublasHandle_t &amp;cublas_handle, cudnnHandle_t &amp;cudnn_handle)</type>
        <definition>using ngraph::runtime::gpu::EntryPoint_t = typedef void(void** inputs, void** outputs, cublasHandle_t&amp; cublas_handle, cudnnHandle_t&amp; cudnn_handle)</definition>
        <argsstring></argsstring>
        <name>EntryPoint_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_call_frame.hpp" line="41" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_call_frame.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gpu__call__frame_8hpp_1a380f457d66f17375ca26da73fc855902" prot="public" static="no">
        <type>std::function&lt; EntryPoint_t &gt;</type>
        <definition>using ngraph::runtime::gpu::EntryPoint = typedef std::function&lt;EntryPoint_t&gt;</definition>
        <argsstring></argsstring>
        <name>EntryPoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_call_frame.hpp" line="46" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_call_frame.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gpu__external__function_8hpp_1adbd0f5868f0a278953ecc0b8bd457de2" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="classngraph_1_1codegen_1_1CodeWriter" kindref="compound">codegen::CodeWriter</ref> &amp;, const <ref refid="classngraph_1_1Node" kindref="compound">ngraph::Node</ref> *, const std::vector&lt; <ref refid="classngraph_1_1runtime_1_1gpu_1_1GPU__TensorViewWrapper" kindref="compound">GPU_TensorViewWrapper</ref> &gt; &amp;inputs, const std::vector&lt; <ref refid="classngraph_1_1runtime_1_1gpu_1_1GPU__TensorViewWrapper" kindref="compound">GPU_TensorViewWrapper</ref> &gt; &amp;outputs)&gt;</type>
        <definition>using ngraph::runtime::gpu::OpFunction = typedef std::function&lt;void(codegen::CodeWriter&amp;, const ngraph::Node*, const std::vector&lt;GPU_TensorViewWrapper&gt;&amp; inputs, const std::vector&lt;GPU_TensorViewWrapper&gt;&amp; outputs)&gt;</definition>
        <argsstring></argsstring>
        <name>OpFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_external_function.hpp" line="43" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_external_function.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gpu__external__function_8hpp_1a6399511b6a7532d3f027c849f0eb34ab" prot="public" static="no">
        <type>std::unordered_map&lt; std::type_index, OpFunction &gt;</type>
        <definition>using ngraph::runtime::gpu::OpMap = typedef std::unordered_map&lt;std::type_index, OpFunction&gt;</definition>
        <argsstring></argsstring>
        <name>OpMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_external_function.hpp" line="49" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_external_function.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gpu__backend_8hpp_1a72c8264760aeabc0bd7e21bb6a2fc7e5" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t ngraph::runtime::gpu::alignment</definition>
        <argsstring></argsstring>
        <name>alignment</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_backend.hpp" line="27" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_backend.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gpu__util_8hpp_1a00526ba9b912417be5c551c2c1bcf8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ngraph::runtime::gpu::print_gpu_f32_tensor</definition>
        <argsstring>(void *p, size_t element_count, size_t element_size)</argsstring>
        <name>print_gpu_f32_tensor</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>element_count</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>element_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_util.hpp" line="25" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_util.cpp" bodystart="33" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="gpu__util_8hpp_1a82a19ea90c5b4bca8e153dbbd22a3ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ngraph::runtime::gpu::check_cuda_errors</definition>
        <argsstring>(CUresult err)</argsstring>
        <name>check_cuda_errors</name>
        <param>
          <type>CUresult</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_util.hpp" line="26" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_util.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="gpu__util_8hpp_1a180a68e12415ff5446f57205c3a137b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ngraph::runtime::gpu::create_gpu_buffer</definition>
        <argsstring>(size_t buffer_size)</argsstring>
        <name>create_gpu_buffer</name>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_util.hpp" line="27" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_util.cpp" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="gpu__util_8hpp_1a6487db8cc450ab241e11ff635cc0e7ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ngraph::runtime::gpu::cuda_memcpyDtD</definition>
        <argsstring>(void *d, void *s, size_t element_count, size_t element_size)</argsstring>
        <name>cuda_memcpyDtD</name>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>element_count</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>element_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_util.hpp" line="28" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_util.cpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="gpu__util_8hpp_1ad6911078194a573d759e1de4236f6ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ngraph::runtime::gpu::cuda_memcpyHtD</definition>
        <argsstring>(void *d, void *s, size_t buffer_size)</argsstring>
        <name>cuda_memcpyHtD</name>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_util.hpp" line="29" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_util.cpp" bodystart="63" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_backend.hpp" line="26" column="1"/>
  </compounddef>
</doxygen>

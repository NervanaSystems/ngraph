<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classngraph_1_1op_1_1util_1_1BinaryElementwise" kind="class" language="C++" prot="public">
    <compoundname>ngraph::op::util::BinaryElementwise</compoundname>
    <basecompoundref refid="classngraph_1_1op_1_1util_1_1RequiresTensorViewArgs" prot="public" virt="non-virtual">ngraph::op::util::RequiresTensorViewArgs</basecompoundref>
    <derivedcompoundref refid="classngraph_1_1op_1_1util_1_1BinaryElementwiseArithmetic" prot="public" virt="non-virtual">ngraph::op::util::BinaryElementwiseArithmetic</derivedcompoundref>
    <derivedcompoundref refid="classngraph_1_1op_1_1util_1_1BinaryElementwiseComparison" prot="public" virt="non-virtual">ngraph::op::util::BinaryElementwiseComparison</derivedcompoundref>
    <includes refid="binary__elementwise_8hpp" local="no">binary_elementwise.hpp</includes>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classngraph_1_1op_1_1util_1_1BinaryElementwise_a223e5be62b669557e82a5e188ff7f442_1a223e5be62b669557e82a5e188ff7f442" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>op::util::BinaryElementwise::BinaryElementwise</definition>
        <argsstring>(const std::string &amp;node_type, const element::Type &amp;result_element_type, const std::shared_ptr&lt; Node &gt; &amp;arg0, const std::shared_ptr&lt; Node &gt; &amp;arg1)</argsstring>
        <name>BinaryElementwise</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>node_type</declname>
        </param>
        <param>
          <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
          <declname>result_element_type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>arg0</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>arg1</declname>
        </param>
        <briefdescription>
<para>Constructs a biary elementwise operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg0</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classngraph_1_1Node" kindref="compound">Node</ref> that produces the first input tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classngraph_1_1Node" kindref="compound">Node</ref> that produces the second input tensor. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/ops/util/binary_elementwise.hpp" line="53" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/ops/util/binary_elementwise.cpp" bodystart="25" bodyend="39"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract base class for elementwise binary operations, i.e., operations where the same scalar binary operation is applied to each corresponding pair of elements in two same-shaped input tensors. </para>    </briefdescription>
    <detaileddescription>
<para>For example, if the underlying operation (determined by the subclass) is <formula id="136">$\mathit{op}(x,y)$</formula>, the input tensors <formula id="137">$[[x_0,y_0],[z_0,w_0]]$</formula> and <formula id="138">$[[x_1,y_1],[z_1,w_1]]$</formula> will be mapped to <formula id="139">$[[\mathit{op}(x_0,x_1),\mathit{op}(y_0,y_1)],[\mathit{op}(z_0,z_1),\mathit{op}(w_0,w_1)]]$</formula>.</para><para><heading level="2">Inputs</heading>
</para><para><table rows="3" cols="3"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>arg0</computeroutput>  </para></entry><entry thead="no"><para><formula id="140">$E_0[d_1,\dots,d_n]~(n \geq 0)$</formula>  </para></entry><entry thead="no"><para>A tensor of any shape. Subclasses may impose restrictions on the element type <formula id="141">$E_0$</formula>.   </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>arg1</computeroutput>  </para></entry><entry thead="no"><para><formula id="142">$E_1[d_1,\dots,d_n]~(n \geq 0)$</formula>  </para></entry><entry thead="no"><para>A tensor of the same shape as <computeroutput>arg0</computeroutput>. Subclasses may impose restrictions on the element type <formula id="143">$E_1$</formula>.   </para></entry></row>
</table>
</para><para><heading level="2">Output</heading>
</para><para><table rows="2" cols="2"><row>
<entry thead="yes"><para>Type  </para></entry><entry thead="yes"><para>Description   </para></entry></row>
<row>
<entry thead="no"><para><formula id="144">$E_2[d_1,\dots,d_n]$</formula>  </para></entry><entry thead="no"><para>The tensor <formula id="2">$T$</formula>, where <formula id="145">$T[i_1,\dots,i_n] = \mathit{op}(\texttt{arg0}[i_1,\dots,i_n],\texttt{arg1}[i_1,\dots,i_n])$</formula>. This will always have the same shape as the input tensors, but subclasses must determine the element type <formula id="146">$E_2$</formula>.   </para></entry></row>
</table>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2742">
        <label>ngraph::op::Multiply</label>
        <link refid="classngraph_1_1op_1_1Multiply"/>
        <childnode refid="2737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2735">
        <label>ngraph::Node</label>
        <link refid="classngraph_1_1Node"/>
        <childnode refid="2736" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2733">
        <label>ngraph::op::util::RequiresTensorViewArgs</label>
        <link refid="classngraph_1_1op_1_1util_1_1RequiresTensorViewArgs"/>
        <childnode refid="2734" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2741">
        <label>ngraph::op::Minimum</label>
        <link refid="classngraph_1_1op_1_1Minimum"/>
        <childnode refid="2737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2745">
        <label>ngraph::op::Subtract</label>
        <link refid="classngraph_1_1op_1_1Subtract"/>
        <childnode refid="2737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2748">
        <label>ngraph::op::Greater</label>
        <link refid="classngraph_1_1op_1_1Greater"/>
        <childnode refid="2746" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2737">
        <label>ngraph::op::util::BinaryElementwiseArithmetic</label>
        <link refid="classngraph_1_1op_1_1util_1_1BinaryElementwiseArithmetic"/>
        <childnode refid="2732" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2747">
        <label>ngraph::op::Equal</label>
        <link refid="classngraph_1_1op_1_1Equal"/>
        <childnode refid="2746" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2732">
        <label>ngraph::op::util::BinaryElementwise</label>
        <link refid="classngraph_1_1op_1_1util_1_1BinaryElementwise"/>
        <childnode refid="2733" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2738">
        <label>ngraph::op::Add</label>
        <link refid="classngraph_1_1op_1_1Add"/>
        <childnode refid="2737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2744">
        <label>ngraph::op::Remainder</label>
        <link refid="classngraph_1_1op_1_1Remainder"/>
        <childnode refid="2737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2746">
        <label>ngraph::op::util::BinaryElementwiseComparison</label>
        <link refid="classngraph_1_1op_1_1util_1_1BinaryElementwiseComparison"/>
        <childnode refid="2732" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2752">
        <label>ngraph::op::NotEqual</label>
        <link refid="classngraph_1_1op_1_1NotEqual"/>
        <childnode refid="2746" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2736">
        <label>std::enable_shared_from_this&lt; Node &gt;</label>
      </node>
      <node id="2743">
        <label>ngraph::op::Power</label>
        <link refid="classngraph_1_1op_1_1Power"/>
        <childnode refid="2737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2734">
        <label>ngraph::op::Op</label>
        <link refid="classngraph_1_1op_1_1Op"/>
        <childnode refid="2735" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2751">
        <label>ngraph::op::LessEq</label>
        <link refid="classngraph_1_1op_1_1LessEq"/>
        <childnode refid="2746" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2739">
        <label>ngraph::op::Divide</label>
        <link refid="classngraph_1_1op_1_1Divide"/>
        <childnode refid="2737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2750">
        <label>ngraph::op::Less</label>
        <link refid="classngraph_1_1op_1_1Less"/>
        <childnode refid="2746" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2740">
        <label>ngraph::op::Maximum</label>
        <link refid="classngraph_1_1op_1_1Maximum"/>
        <childnode refid="2737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2749">
        <label>ngraph::op::GreaterEq</label>
        <link refid="classngraph_1_1op_1_1GreaterEq"/>
        <childnode refid="2746" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2756">
        <label>ngraph::Node</label>
        <link refid="classngraph_1_1Node"/>
        <childnode refid="2757" relation="public-inheritance">
        </childnode>
        <childnode refid="2758" relation="usage">
          <edgelabel>m_outputs</edgelabel>
        </childnode>
        <childnode refid="2766" relation="usage">
          <edgelabel>liveness_live_list</edgelabel>
          <edgelabel>liveness_free_list</edgelabel>
          <edgelabel>liveness_new_list</edgelabel>
        </childnode>
        <childnode refid="2774" relation="usage">
          <edgelabel>m_users</edgelabel>
        </childnode>
        <childnode refid="2776" relation="usage">
          <edgelabel>m_inputs</edgelabel>
        </childnode>
        <childnode refid="2777" relation="usage">
          <edgelabel>m_adjoint_map</edgelabel>
        </childnode>
        <childnode refid="2769" relation="usage">
          <edgelabel>m_node_type</edgelabel>
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="2754">
        <label>ngraph::op::util::RequiresTensorViewArgs</label>
        <link refid="classngraph_1_1op_1_1util_1_1RequiresTensorViewArgs"/>
        <childnode refid="2755" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2763">
        <label>K</label>
      </node>
      <node id="2765">
        <label>T</label>
      </node>
      <node id="2774">
        <label>std::multiset&lt; ngraph::Node *&gt;</label>
        <childnode refid="2756" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="2775" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="2780">
        <label>std::unordered_map&lt; K, T &gt;</label>
        <childnode refid="2763" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="2765" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2777">
        <label>std::unordered_map&lt; ngraph::Node *, ngraph::autodiff::Adjoints &gt;</label>
        <childnode refid="2778" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="2756" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="2780" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *, ngraph::autodiff::Adjoints &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2768">
        <label>ngraph::element::Type</label>
        <link refid="classngraph_1_1element_1_1Type"/>
      </node>
      <node id="2759">
        <label>ngraph::descriptor::Output</label>
        <link refid="classngraph_1_1descriptor_1_1Output"/>
        <childnode refid="2760" relation="usage">
          <edgelabel>m_inputs</edgelabel>
        </childnode>
        <childnode refid="2756" relation="usage">
          <edgelabel>m_node</edgelabel>
        </childnode>
      </node>
      <node id="2753">
        <label>ngraph::op::util::BinaryElementwise</label>
        <link refid="classngraph_1_1op_1_1util_1_1BinaryElementwise"/>
        <childnode refid="2754" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2767">
        <label>ngraph::descriptor::Tensor</label>
        <link refid="classngraph_1_1descriptor_1_1Tensor"/>
        <childnode refid="2768" relation="usage">
          <edgelabel>m_element_type</edgelabel>
        </childnode>
        <childnode refid="2769" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
        <childnode refid="2771" relation="usage">
          <edgelabel>m_primary_tensor_view</edgelabel>
        </childnode>
      </node>
      <node id="2771">
        <label>ngraph::descriptor::PrimaryTensorView</label>
        <link refid="classngraph_1_1descriptor_1_1PrimaryTensorView"/>
        <childnode refid="2772" relation="public-inheritance">
        </childnode>
        <childnode refid="2767" relation="usage">
          <edgelabel>m_tensor</edgelabel>
        </childnode>
      </node>
      <node id="2772">
        <label>ngraph::descriptor::TensorView</label>
        <link refid="classngraph_1_1descriptor_1_1TensorView"/>
        <childnode refid="2769" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="2758">
        <label>std::deque&lt; ngraph::descriptor::Output &gt;</label>
        <childnode refid="2759" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="2764" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2770">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="2757">
        <label>std::enable_shared_from_this&lt; Node &gt;</label>
      </node>
      <node id="2760">
        <label>std::set&lt; ngraph::descriptor::Input *&gt;</label>
        <childnode refid="2761" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="2762" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Input *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="2755">
        <label>ngraph::op::Op</label>
        <link refid="classngraph_1_1op_1_1Op"/>
        <childnode refid="2756" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2762">
        <label>std::set&lt; K &gt;</label>
        <childnode refid="2763" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="2761">
        <label>ngraph::descriptor::Input</label>
        <link refid="classngraph_1_1descriptor_1_1Input"/>
        <childnode refid="2759" relation="usage">
          <edgelabel>m_output</edgelabel>
        </childnode>
        <childnode refid="2756" relation="usage">
          <edgelabel>m_node</edgelabel>
        </childnode>
      </node>
      <node id="2775">
        <label>std::multiset&lt; K &gt;</label>
        <childnode refid="2763" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="2776">
        <label>std::deque&lt; ngraph::descriptor::Input &gt;</label>
        <childnode refid="2761" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="2764" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Input &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2773">
        <label>std::unordered_set&lt; K &gt;</label>
        <childnode refid="2763" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="2779">
        <label>std::unordered_map&lt; ngraph::Node *, std::shared_ptr&lt; ngraph::Node &gt; &gt;</label>
        <childnode refid="2756" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="2780" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *, std::shared_ptr&lt; ngraph::Node &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2766">
        <label>std::unordered_set&lt; ngraph::descriptor::Tensor *&gt;</label>
        <childnode refid="2767" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="2773" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Tensor *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="2778">
        <label>ngraph::autodiff::Adjoints</label>
        <link refid="classngraph_1_1autodiff_1_1Adjoints"/>
        <childnode refid="2779" relation="usage">
          <edgelabel>m_adjoint_map</edgelabel>
        </childnode>
      </node>
      <node id="2764">
        <label>std::deque&lt; T &gt;</label>
        <childnode refid="2765" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2769">
        <label>std::string</label>
        <childnode refid="2770" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/ops/util/binary_elementwise.hpp" line="47" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/ops/util/binary_elementwise.hpp" bodystart="46" bodyend="57"/>
    <listofallmembers>
      <member refid="classngraph_1_1Node_1a1bac19895a096bb5772f6a6c120b3813" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>add_output</name></member>
      <member refid="classngraph_1_1Node_1a5f3de445063d95cb31842e3a44e487c8" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>backprop_node</name></member>
      <member refid="classngraph_1_1op_1_1util_1_1BinaryElementwise_a223e5be62b669557e82a5e188ff7f442_1a223e5be62b669557e82a5e188ff7f442" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>BinaryElementwise</name></member>
      <member refid="classngraph_1_1Node_1a99c230728fde81ca9e64ed393d0728c4" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>clear_arguments</name></member>
      <member refid="classngraph_1_1Node_1a0c3c1afcdb7effe100c653b86a2eb56e" prot="public" virt="pure-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>copy_with_new_args</name></member>
      <member refid="classngraph_1_1Node_1a92598fdffd86cf6fd3adf0081e041d2f" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>description</name></member>
      <member refid="classngraph_1_1Node_1a423c05a93bb628e8c311b631fb6a582c" prot="protected" virt="virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>generate_adjoints</name></member>
      <member refid="classngraph_1_1Node_1a08ce613a6a22b1083c05321f0dced2a6" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_element_type</name></member>
      <member refid="classngraph_1_1Node_1abb77c47e270bdf0622587ee86919b492" prot="public" virt="virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_functions</name></member>
      <member refid="classngraph_1_1Node_1a98841a99a32bdcf64a371ff2aed2abc1" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_input_element_type</name></member>
      <member refid="classngraph_1_1Node_1aa7aaefcd4db958482315af48cb221a6c" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_input_op</name></member>
      <member refid="classngraph_1_1Node_1ac9b5aed803ef1f50a02a87dc81034ffe" prot="public" virt="virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_input_ops</name></member>
      <member refid="classngraph_1_1Node_1a9ff5f656d6b183cc00af753ec6b6144a" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_input_shape</name></member>
      <member refid="classngraph_1_1Node_1a69c6620b65b11187bf367a2d0e440699" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_input_size</name></member>
      <member refid="classngraph_1_1Node_1a3e88cf704f45f337a48d79a16a54e2c7" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_inputs</name></member>
      <member refid="classngraph_1_1Node_1a3d47e40f640c1469db01a33611a993e0" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_inputs</name></member>
      <member refid="classngraph_1_1Node_1a7a189270f6c1d02aa62c11b82d837bfb" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_instance_id</name></member>
      <member refid="classngraph_1_1Node_1ab0228a9136af1c06e6c32503871aa037" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_name</name></member>
      <member refid="classngraph_1_1Node_1a49900b3c7bc6ee44c466a622ccf52f71" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_node_id</name></member>
      <member refid="classngraph_1_1op_1_1Op_1a4f467309aee6d72bb286c09cd09c4bbf" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_op_annotations</name></member>
      <member refid="classngraph_1_1Node_1a91ccdcd6a30ca5a265c74f0f2734210b" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_output_element_type</name></member>
      <member refid="classngraph_1_1Node_1a68967e741c4045d22b712c5f644f5fa7" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_output_inputs</name></member>
      <member refid="classngraph_1_1Node_1a29bad373294c6939549d3302c6c5b45c" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_output_shape</name></member>
      <member refid="classngraph_1_1Node_1a9257d1be4e21fd9b4e834ee763c9ab03" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_output_size</name></member>
      <member refid="classngraph_1_1Node_1a0cb34ea18330939c53fbf7fe15603c32" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_output_tensor</name></member>
      <member refid="classngraph_1_1Node_1a1d7465ea8dda0f2f22c13929656d4291" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_output_tensor</name></member>
      <member refid="classngraph_1_1Node_1a45ae2b4b094d1d91d1c867dc30143d7a" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_output_tensor_view</name></member>
      <member refid="classngraph_1_1Node_1a75b38938bbc73474c8ea083b36da876c" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_output_tensor_view</name></member>
      <member refid="classngraph_1_1Node_1ac9aae122c66b9d82c240fd35c1e45250" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_outputs</name></member>
      <member refid="classngraph_1_1Node_1aed735e2ef3cda31846ec7f0a85ebd5d8" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_outputs</name></member>
      <member refid="classngraph_1_1Node_1a7a690a13f82f2420e221be4ef0987f56" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>get_shape</name></member>
      <member refid="classngraph_1_1Node_1a17548877a029631148b2fa00c2f11fcb" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>has_same_type</name></member>
      <member refid="classngraph_1_1Node_1ad0a48043e7858c06a2c91b25c2e88030" prot="public" virt="virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>is_commutative</name></member>
      <member refid="classngraph_1_1Node_1aa560b6ff7736831265cf1ce1346e6376" prot="public" virt="virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>is_constant</name></member>
      <member refid="classngraph_1_1Node_1ad3ae6e9bcbf2462a074847fdf47ab986" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>is_output</name></member>
      <member refid="classngraph_1_1Node_1ab700ac2bc2dec9138e3e1575b49075c6" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>is_parameter</name></member>
      <member refid="classngraph_1_1Node_ad69bb7920f3c6898754e0e938461fa8c_1ad69bb7920f3c6898754e0e938461fa8c" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>is_same_op_type</name></member>
      <member refid="classngraph_1_1Node_1a4f36c2c5ae51d1073d5bc23ab44cd72f" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>liveness_free_list</name></member>
      <member refid="classngraph_1_1Node_1aa58e8eb953c65c957dbdc56d7aa1dca5" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>liveness_live_list</name></member>
      <member refid="classngraph_1_1Node_1a572f0f0ef5cb7d309a86b1ffddda7da1" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>liveness_new_list</name></member>
      <member refid="classngraph_1_1Node_1a881dacc03050bbe8dc679455c99bfaa8" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>m_adjoint_map</name></member>
      <member refid="classngraph_1_1Node_1a4f55bb2b70a88ddcc407a2930da034e7" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>m_inputs</name></member>
      <member refid="classngraph_1_1Node_1ae927d96858146fd4aad4f7a9d6c03e8e" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>m_instance_id</name></member>
      <member refid="classngraph_1_1Node_1a034da5cfe5401a01045f2fd8a9374ca7" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>m_is_output</name></member>
      <member refid="classngraph_1_1Node_1af72ec96a91723b94174886a947835f93" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>m_name</name></member>
      <member refid="classngraph_1_1Node_1afc2e9023e2895f9d7465062ce7bbd49e" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>m_next_instance_id</name></member>
      <member refid="classngraph_1_1Node_1a9d06e17d8a569f809d6d322edb405b24" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>m_node_type</name></member>
      <member refid="classngraph_1_1Node_1a177ab91b7609c16e8d57e1a7182f2bd0" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>m_outputs</name></member>
      <member refid="classngraph_1_1Node_1ad0f9c97f26a1ad8a42b7308f0e4773f5" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>m_users</name></member>
      <member refid="classngraph_1_1Node_1a0259d67ef3d6d82e38dbafa62d1463e2" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>Node</name></member>
      <member refid="classngraph_1_1op_1_1Op_1adfb9351528f9956627f25e07baa560fa" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>Op</name></member>
      <member refid="classngraph_1_1op_1_1util_1_1RequiresTensorViewArgs_a4ec9a470de62c9b1986d139f72717eb5_1a4ec9a470de62c9b1986d139f72717eb5" prot="protected" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>RequiresTensorViewArgs</name></member>
      <member refid="classngraph_1_1Node_1a7bcdb7230a14c3c76a38392bfeacea1a" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>set_is_output</name></member>
      <member refid="classngraph_1_1Node_1a21c1e9e47d5447ba37982d1bbc57e79c" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>set_name</name></member>
      <member refid="classngraph_1_1op_1_1Op_1aba75fd5c954f4480c2e4ddb4e1fc5f2a" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>set_op_annotations</name></member>
      <member refid="classngraph_1_1Node_1a0a2d35a1430bc4671184eec8e1425640" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>set_value_type_checked</name></member>
      <member refid="classngraph_1_1Node_1a7500930e175b8f522d26988796727ce1" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>set_value_type_checked</name></member>
      <member refid="classngraph_1_1Node_1a1ca1186be7560ca6fd3a4bc1819526a1" prot="public" virt="non-virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>users</name></member>
      <member refid="classngraph_1_1Node_1a2a6579e8a1f70539b8e47d100eb06ae6" prot="protected" virt="virtual"><scope>ngraph::op::util::BinaryElementwise</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

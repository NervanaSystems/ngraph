<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespacenlohmann_1_1detail" kind="namespace" language="C++">
    <compoundname>nlohmann::detail</compoundname>
    <innerclass refid="classnlohmann_1_1detail_1_1binary__reader" prot="public">nlohmann::detail::binary_reader</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1binary__writer" prot="public">nlohmann::detail::binary_writer</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1conjunction" prot="public">nlohmann::detail::conjunction</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1conjunction_3_01B1_01_4" prot="public">nlohmann::detail::conjunction&lt; B1 &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1conjunction_3_01B1_00_01Bn_8_8_8_01_4" prot="public">nlohmann::detail::conjunction&lt; B1, Bn... &gt;</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1exception" prot="public">nlohmann::detail::exception</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1external__constructor" prot="public">nlohmann::detail::external_constructor</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1array_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::array &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1boolean_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::boolean &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__float_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::number_float &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__integer_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::number_integer &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__unsigned_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::number_unsigned &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1object_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::object &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1string_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::string &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1from__json__fn" prot="public">nlohmann::detail::from_json_fn</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1has__from__json" prot="public">nlohmann::detail::has_from_json</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1has__non__default__from__json" prot="public">nlohmann::detail::has_non_default_from_json</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1has__to__json" prot="public">nlohmann::detail::has_to_json</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1index__sequence" prot="public">nlohmann::detail::index_sequence</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1input__adapter" prot="public">nlohmann::detail::input_adapter</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1input__adapter__protocol" prot="public">nlohmann::detail::input_adapter_protocol</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1input__buffer__adapter" prot="public">nlohmann::detail::input_buffer_adapter</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1input__stream__adapter" prot="public">nlohmann::detail::input_stream_adapter</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1internal__iterator" prot="public">nlohmann::detail::internal_iterator</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1invalid__iterator" prot="public">nlohmann::detail::invalid_iterator</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1is__basic__json" prot="public">nlohmann::detail::is_basic_json</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1is__basic__json_3_01NLOHMANN__BASIC__JSON__TPL_01_4" prot="public">nlohmann::detail::is_basic_json&lt; NLOHMANN_BASIC_JSON_TPL &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1is__basic__json__nested__type" prot="public">nlohmann::detail::is_basic_json_nested_type</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1is__compatible__array__type" prot="public">nlohmann::detail::is_compatible_array_type</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1is__compatible__integer__type" prot="public">nlohmann::detail::is_compatible_integer_type</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1is__compatible__integer__type__impl" prot="public">nlohmann::detail::is_compatible_integer_type_impl</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01true_00_01RealIntegerType_0064332c4ada80cab3523aebd66ccc012a" prot="public">nlohmann::detail::is_compatible_integer_type_impl&lt; true, RealIntegerType, CompatibleNumberIntegerType &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1is__compatible__object__type" prot="public">nlohmann::detail::is_compatible_object_type</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1is__compatible__object__type__impl" prot="public">nlohmann::detail::is_compatible_object_type_impl</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1is__compatible__object__type__impl_3_01true_00_01RealType_00_01CompatibleObjectType_01_4" prot="public">nlohmann::detail::is_compatible_object_type_impl&lt; true, RealType, CompatibleObjectType &gt;</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1iter__impl" prot="public">nlohmann::detail::iter_impl</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1iteration__proxy" prot="public">nlohmann::detail::iteration_proxy</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1json__ref" prot="public">nlohmann::detail::json_ref</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1json__reverse__iterator" prot="public">nlohmann::detail::json_reverse_iterator</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1lexer" prot="public">nlohmann::detail::lexer</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1make__index__sequence" prot="public">nlohmann::detail::make_index_sequence</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1make__index__sequence_3_010_01_4" prot="public">nlohmann::detail::make_index_sequence&lt; 0 &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1make__index__sequence_3_011_01_4" prot="public">nlohmann::detail::make_index_sequence&lt; 1 &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1merge__and__renumber" prot="public">nlohmann::detail::merge_and_renumber</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1merge__and__renumber_3_01index__sequence_3_01I1_8_8_8_01_4_00_01inde4885d6f1d93a04f25932afbd429c4793" prot="public">nlohmann::detail::merge_and_renumber&lt; index_sequence&lt; I1... &gt;, index_sequence&lt; I2... &gt; &gt;</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1negation" prot="public">nlohmann::detail::negation</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1other__error" prot="public">nlohmann::detail::other_error</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1out__of__range" prot="public">nlohmann::detail::out_of_range</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1output__adapter" prot="public">nlohmann::detail::output_adapter</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1output__adapter__protocol" prot="public">nlohmann::detail::output_adapter_protocol</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1output__stream__adapter" prot="public">nlohmann::detail::output_stream_adapter</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1output__string__adapter" prot="public">nlohmann::detail::output_string_adapter</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1output__vector__adapter" prot="public">nlohmann::detail::output_vector_adapter</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1parse__error" prot="public">nlohmann::detail::parse_error</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1parser" prot="public">nlohmann::detail::parser</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1primitive__iterator__t" prot="public">nlohmann::detail::primitive_iterator_t</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1priority__tag" prot="public">nlohmann::detail::priority_tag</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1priority__tag_3_010_01_4" prot="public">nlohmann::detail::priority_tag&lt; 0 &gt;</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1serializer" prot="public">nlohmann::detail::serializer</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1static__const" prot="public">nlohmann::detail::static_const</innerclass>
    <innerclass refid="structnlohmann_1_1detail_1_1to__json__fn" prot="public">nlohmann::detail::to_json_fn</innerclass>
    <innerclass refid="classnlohmann_1_1detail_1_1type__error" prot="public">nlohmann::detail::type_error</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980f" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>value_t</name>
        <enumvalue id="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fa37a6259cc0c1dae299a7866489dff0bd" prot="public">
          <name>null</name>
          <briefdescription>
<para>null value </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980faa8cfde6331bd59eb2ac96f8911c4b666" prot="public">
          <name>object</name>
          <briefdescription>
<para>object (unordered set of name/value pairs) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980faf1f713c9e000f5d3f280adbd124df4f5" prot="public">
          <name>array</name>
          <briefdescription>
<para>array (ordered collection of values) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fab45cffe084dd3d20d928bee85e7b0f21" prot="public">
          <name>string</name>
          <briefdescription>
<para>string value </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fa84e2c64f38f78ba3ea5c905ab5a2da27" prot="public">
          <name>boolean</name>
          <briefdescription>
<para>boolean value </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fa5763da164f8659d94a56e29df64b4bcc" prot="public">
          <name>number_integer</name>
          <briefdescription>
<para>number value (signed integer) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fadce7cc8ec29055c4158828921f2f265e" prot="public">
          <name>number_unsigned</name>
          <briefdescription>
<para>number value (unsigned integer) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fad9966ecb59667235a57b4b999a649eef" prot="public">
          <name>number_float</name>
          <briefdescription>
<para>number value (floating-point) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fa94708897ec9db8647dfe695714c98e46" prot="public">
          <name>discarded</name>
          <briefdescription>
<para>discarded by the the parser callback function </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the JSON type enumeration </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration collects the different JSON types. It is internally used to distinguish the stored values, and the functions <ref refid="classnlohmann_1_1basic__json_a8faa039ca82427ed29c486ffd00600c3_1a8faa039ca82427ed29c486ffd00600c3" kindref="member">basic_json::is_null()</ref>, <ref refid="classnlohmann_1_1basic__json_af8f511af124e82e4579f444b4175787c_1af8f511af124e82e4579f444b4175787c" kindref="member">basic_json::is_object()</ref>, <ref refid="classnlohmann_1_1basic__json_aef9ce5dd2381caee1f8ddcdb5bdd9c65_1aef9ce5dd2381caee1f8ddcdb5bdd9c65" kindref="member">basic_json::is_array()</ref>, <ref refid="classnlohmann_1_1basic__json_a69b596a4a6683b362095c9a139637396_1a69b596a4a6683b362095c9a139637396" kindref="member">basic_json::is_string()</ref>, <ref refid="classnlohmann_1_1basic__json_a943e8cb182d0f2365c76d64b42eaa6fd_1a943e8cb182d0f2365c76d64b42eaa6fd" kindref="member">basic_json::is_boolean()</ref>, <ref refid="classnlohmann_1_1basic__json_a2b9852390abb4b1ef5fac6984e2fc0f3_1a2b9852390abb4b1ef5fac6984e2fc0f3" kindref="member">basic_json::is_number()</ref> (with <ref refid="classnlohmann_1_1basic__json_abac8af76067f1e8fdca9052882c74428_1abac8af76067f1e8fdca9052882c74428" kindref="member">basic_json::is_number_integer()</ref>, <ref refid="classnlohmann_1_1basic__json_abc7378cba0613a78b9aad1c8e7044bb0_1abc7378cba0613a78b9aad1c8e7044bb0" kindref="member">basic_json::is_number_unsigned()</ref>, and <ref refid="classnlohmann_1_1basic__json_a33b4bf898b857c962e798fc7f6e86e70_1a33b4bf898b857c962e798fc7f6e86e70" kindref="member">basic_json::is_number_float()</ref>), <ref refid="classnlohmann_1_1basic__json_aabe623bc8304c2ba92d96d91f390fab4_1aabe623bc8304c2ba92d96d91f390fab4" kindref="member">basic_json::is_discarded()</ref>, <ref refid="classnlohmann_1_1basic__json_a6362b88718eb5c6d4fed6a61eed44b95_1a6362b88718eb5c6d4fed6a61eed44b95" kindref="member">basic_json::is_primitive()</ref>, and <ref refid="classnlohmann_1_1basic__json_a9f68a0af820c3ced7f9d17851ce4c22d_1a9f68a0af820c3ced7f9d17851ce4c22d" kindref="member">basic_json::is_structured()</ref> rely on it.</para><para><simplesect kind="note"><para>There are three enumeration entries (number_integer, number_unsigned, and number_float), because the library distinguishes these three types for numbers: <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">basic_json::number_unsigned_t</ref> is used for unsigned integers, <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">basic_json::number_integer_t</ref> is used for signed integers, and <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">basic_json::number_float_t</ref> is used for floating-point numbers or to approximate integers which do not fit in the limits of their respective type.</para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_aed115142bd0c6c66c864700e0467df55_1aed115142bd0c6c66c864700e0467df55" kindref="member">basic_json::basic_json(const value_t value_type)</ref> <ndash/> create a JSON value with the default value for a given type</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="526" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="525" bodyend="536"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; B, T &gt;::type</type>
        <definition>using nlohmann::detail::enable_if_t = typedef typename std::enable_if&lt;B, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>enable_if_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="578" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type</type>
        <definition>using nlohmann::detail::uncvref_t = typedef typename std::remove_cv&lt;typename std::remove_reference&lt;T&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>uncvref_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="581" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenlohmann_1_1detail_1a24800493c6ec02ce033dcbb47b7fd28e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structnlohmann_1_1detail_1_1make__index__sequence" kindref="compound">make_index_sequence</ref>&lt; sizeof...(Ts)&gt;</type>
        <definition>using nlohmann::detail::index_sequence_for = typedef make_index_sequence&lt;sizeof...(Ts)&gt;</definition>
        <argsstring></argsstring>
        <name>index_sequence_for</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="614" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenlohmann_1_1detail_1ae132f8cd5bb24c5e9b40ad0eafedf1c2" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="structnlohmann_1_1detail_1_1input__adapter__protocol" kindref="compound">input_adapter_protocol</ref> &gt;</type>
        <definition>using nlohmann::detail::input_adapter_t = typedef std::shared_ptr&lt;input_adapter_protocol&gt;</definition>
        <argsstring></argsstring>
        <name>input_adapter_t</name>
        <briefdescription>
<para>a type to simplify interfaces </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1434" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="structnlohmann_1_1detail_1_1output__adapter__protocol" kindref="compound">output_adapter_protocol</ref>&lt; CharType &gt; &gt;</type>
        <definition>using nlohmann::detail::output_adapter_t = typedef std::shared_ptr&lt;output_adapter_protocol&lt;CharType&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>output_adapter_t</name>
        <briefdescription>
<para>a type to simplify interfaces </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="4398" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="4398" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenlohmann_1_1detail_a09169efff3bd1771fff29bd92cea19e0_1a09169efff3bd1771fff29bd92cea19e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nlohmann::detail::operator&lt;</definition>
        <argsstring>(const value_t lhs, const value_t rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980f" kindref="member">value_t</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980f" kindref="member">value_t</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison operator for JSON types </para>        </briefdescription>
        <detaileddescription>
<para>Returns an ordering that is similar to Python:<itemizedlist>
<listitem><para>order: null &lt; boolean &lt; number &lt; object &lt; array &lt; string</para></listitem><listitem><para>furthermore, each type is not smaller than itself</para></listitem></itemizedlist>
</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="547" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="547" bodyend="564"/>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fa94708897ec9db8647dfe695714c98e46">discarded</references>
        <referencedby refid="classnlohmann_1_1detail_1_1iter__impl_a634f85da575cb60b012a687efa26e11a_1a634f85da575cb60b012a687efa26e11a" compoundref="json_8hpp" startline="4034" endline="4037">nlohmann::detail::iter_impl&lt; BasicJsonType &gt;::operator&gt;=</referencedby>
        <referencedby refid="structstd_1_1less_3_01_1_1nlohmann_1_1detail_1_1value__t_01_4_a76d2a6c170cfd74f3b1882be1b5a6671_1a76d2a6c170cfd74f3b1882be1b5a6671" compoundref="json_8hpp" startline="14667" endline="14671">std::less&lt; ::nlohmann::detail::value_t &gt;::operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a7b2601c238073c43a07862768b319cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::NLOHMANN_JSON_HAS_HELPER</definition>
        <argsstring>(mapped_type)</argsstring>
        <name>NLOHMANN_JSON_HAS_HELPER</name>
        <param>
          <type>mapped_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="831" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1ad19328f0c4ffe2890ecafb7c89e0355b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::NLOHMANN_JSON_HAS_HELPER</definition>
        <argsstring>(key_type)</argsstring>
        <name>NLOHMANN_JSON_HAS_HELPER</name>
        <param>
          <type>key_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="832" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1af3e900eb1e0b107c812f7babbb94e69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::NLOHMANN_JSON_HAS_HELPER</definition>
        <argsstring>(value_type)</argsstring>
        <name>NLOHMANN_JSON_HAS_HELPER</name>
        <param>
          <type>value_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="833" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a6648328c4b1466fdc48f1fcfbff23e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::NLOHMANN_JSON_HAS_HELPER</definition>
        <argsstring>(iterator)</argsstring>
        <name>NLOHMANN_JSON_HAS_HELPER</name>
        <param>
          <type>iterator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_same&lt; T, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, T b) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="966" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="966" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a7356ed05cdbbb080cee80e1211e1c6c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleString</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_constructible&lt; typename BasicJsonType::string_t, CompatibleString &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleString &amp;s)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="974" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="974" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a4aa1ca6b7c61bf19d1f30ea5b669f68e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::string_t &amp;&amp;s)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::string_t &amp;&amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="980" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="980" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a22bffdc8bc7e43af380ba2050696b230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename FloatType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_floating_point&lt; FloatType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, FloatType val) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>FloatType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="987" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="987" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1ae5fd66b5517b3b5a6c6b9fd9f29ba8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleNumberUnsignedType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_integer_type&lt; typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, CompatibleNumberUnsignedType val) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleNumberUnsignedType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="996" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="996" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a91fe576be579c8c2fdd14610605c6dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleNumberIntegerType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_integer_type&lt; typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, CompatibleNumberIntegerType val) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleNumberIntegerType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1005" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1005" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a0c8b159dba71981d6c555d284cf6e2bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_enum&lt; EnumType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, EnumType e) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>EnumType</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1012" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1012" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1aeca6fb5fede5ed1e12a4420d98a5692b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::vector&lt; bool &gt; &amp;e)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1019" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1019" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a3afebc132c5ff83f9cd160e52030fdfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_array_type&lt; BasicJsonType, CompatibleArrayType &gt;::value or std::is_same&lt; typename BasicJsonType::array_t, CompatibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleArrayType &amp;arr)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1030" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1030" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1afd18898316e9a20a6458877d2ee27d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_convertible&lt; T, BasicJsonType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, std::valarray&lt; T &gt; arr)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::valarray&lt; T &gt;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1037" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1037" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1aa0fd1b5788e9ba37e31da43dda738cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::array_t &amp;&amp;arr)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::array_t &amp;&amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1043" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1043" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a24c9c12f3839c94e09532f08de85e949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleObjectType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_object_type&lt; BasicJsonType, CompatibleObjectType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleObjectType &amp;obj)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleObjectType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1052" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1052" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1ac9f7a5542851c61d93740148eaec509f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::object_t &amp;&amp;obj)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::object_t &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1058" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1058" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a8c4d301fc51996e3c5c1257fb92ace20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>enable_if_t&lt; not std::is_constructible&lt; typename BasicJsonType::string_t, T(&amp;)[N]&gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, T(&amp;arr)[N])</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1067" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1067" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1aa30611f74062379d3420c40487cf3bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::pair&lt; Args... &gt; &amp;p)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::pair&lt; Args... &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1073" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1073" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a510dfa15b01e9a8afe31600a27b28199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;j, const Tuple &amp;t, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>to_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const Tuple &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="structnlohmann_1_1detail_1_1index__sequence" kindref="compound">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1079" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1079" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1aa7a47b08eee864c2c108c04954919648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1085" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1085" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a85955b9c6dd31846e4b8e891f78614b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ArithmeticType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_arithmetic&lt; ArithmeticType &gt;::value and not std::is_same&lt; ArithmeticType, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::get_arithmetic_value</definition>
        <argsstring>(const BasicJsonType &amp;j, ArithmeticType &amp;val)</argsstring>
        <name>get_arithmetic_value</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ArithmeticType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1100" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1100" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a58117f225f43d03e3a0a4a6f3d77c9d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::boolean_t &amp;b)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::boolean_t &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1126" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1126" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1ad74d89f77ada7a57eff38b43d4bf2335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::string_t &amp;s)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::string_t &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1136" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1136" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a7cb5dd7d46a60e65f9a8e0873b3f7dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_float_t &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_float_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1146" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1146" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1ace4d5680ba413d9fd897ccb5d9c61a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_unsigned_t &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_unsigned_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1152" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1152" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a047d881e611fcac709dc318f730a1732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_integer_t &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_integer_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1158" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1158" bodyend="1161"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a5440d650150d01e8015133521351b459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_enum&lt; EnumType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, EnumType &amp;e)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>EnumType &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1165" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1165" bodyend="1170"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1abc62958462b916726b89f25fa381a129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::array_t &amp;arr)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::array_t &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1173" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1173" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a5cfb765aad92795abd7fda29d017272a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_convertible&lt; BasicJsonType, T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::forward_list&lt; T, Allocator &gt; &amp;l)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::forward_list&lt; T, Allocator &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1185" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1185" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a3df497b1d3977f071b488ecac1401517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_convertible&lt; BasicJsonType, T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::valarray&lt; T &gt; &amp;l)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::valarray&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1201" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1201" bodyend="1209"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1ac53673a5ce29fb69b96d41dad33cb3b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleArrayType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, CompatibleArrayType &amp;arr, priority_tag&lt; 0 &gt;)</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1212" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1212" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a57f93ed57254a1639087cdc316e0fb83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleArrayType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, CompatibleArrayType &amp;arr, priority_tag&lt; 1 &gt;) -&gt; decltype(arr.reserve(std::declval&lt; typename CompatibleArrayType::size_type &gt;()), void())</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 1 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1226" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1226" bodyend="1241"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a46b0781205d0bdc5a959343b389966a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, std::array&lt; T, N &gt; &amp;arr, priority_tag&lt; 2 &gt;)</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980faf1f713c9e000f5d3f280adbd124df4f5" kindref="member">std::array</ref>&lt; T, N &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 2 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1244" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1244" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a8dcac00852dbe1f61d1e78135b19d428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_array_type&lt; BasicJsonType, CompatibleArrayType &gt;::value and std::is_convertible&lt; BasicJsonType, typename CompatibleArrayType::value_type &gt;::value and not std::is_same&lt; typename BasicJsonType::array_t, CompatibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, CompatibleArrayType &amp;arr)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1256" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1256" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a5e7a3674e8ac46f8feebad9712d7c55f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleObjectType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_object_type&lt; BasicJsonType, CompatibleObjectType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, CompatibleObjectType &amp;obj)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleObjectType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1268" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1268" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a839b0ab50d2c9bce669068f56bc41202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ArithmeticType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_arithmetic&lt; ArithmeticType &gt;::value and not std::is_same&lt; ArithmeticType, typename BasicJsonType::number_unsigned_t &gt;::value and not std::is_same&lt; ArithmeticType, typename BasicJsonType::number_integer_t &gt;::value and not std::is_same&lt; ArithmeticType, typename BasicJsonType::number_float_t &gt;::value and not std::is_same&lt; ArithmeticType, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ArithmeticType &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ArithmeticType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1298" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1298" bodyend="1326"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1aae9f9c2601074e323d49428132cc293d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename A1</type>
          </param>
          <param>
            <type>typename A2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::pair&lt; A1, A2 &gt; &amp;p)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::pair&lt; A1, A2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1329" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1329" bodyend="1332"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a28253915d9db4a0112d60eaee0422949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json_tuple_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, Tuple &amp;t, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>Tuple &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="structnlohmann_1_1detail_1_1index__sequence" kindref="compound">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1335" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1335" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="namespacenlohmann_1_1detail_1a8b99ec9b29f3f20a18fc4281fb784e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="1341" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="1341" bodyend="1344"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>unnamed namespace with internal helper functions </para>    </briefdescription>
    <detaileddescription>
<para>This namespace collects some functions that could not be defined inside the <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> class.</para><para><simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="177" column="1"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classnlohmann_1_1json__pointer" kind="class" language="C++" prot="public">
    <compoundname>nlohmann::json_pointer</compoundname>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnlohmann_1_1json__pointer_1ada3100cdb8700566051828f1355fa745" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class basic_json</definition>
        <argsstring></argsstring>
        <name>basic_json</name>
        <briefdescription>
<para>allow <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> to access private members </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6904" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6904" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1json__pointer_1a4667ef558c8c3f8a646bfda0c6654653" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(json_pointer const &amp;lhs, json_pointer const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classnlohmann_1_1json__pointer" kindref="compound">json_pointer</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1json__pointer" kindref="compound">json_pointer</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7200" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="14606" bodyend="14609"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1json__pointer_1a6779edcf28e6f018a3bbb29c0b4b5e1e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(json_pointer const &amp;lhs, json_pointer const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classnlohmann_1_1json__pointer" kindref="compound">json_pointer</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1json__pointer" kindref="compound">json_pointer</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7203" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="14611" bodyend="14614"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnlohmann_1_1json__pointer_1afe4b0d7a3a9c3a91c6e7247842ab2e58" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; nlohmann::json_pointer::reference_tokens</definition>
        <argsstring></argsstring>
        <name>reference_tokens</name>
        <briefdescription>
<para>the reference tokens </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7207" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="7207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_a203910314c0be11c6b2b2cb53a9ad3aa_1a203910314c0be11c6b2b2cb53a9ad3aa" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::json_pointer::json_pointer</definition>
        <argsstring>(const std::string &amp;s=&quot;&quot;)</argsstring>
        <name>json_pointer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>create JSON pointer </para>        </briefdescription>
        <detaileddescription>
<para>Create a JSON pointer according to the syntax described in <ulink url="https://tools.ietf.org/html/rfc6901#section-3">Section 3 of RFC6901</ulink>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string representing the JSON pointer; if omitted, the empty string is assumed which references the whole JSON value</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.107</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given JSON pointer <emphasis>s</emphasis> is nonempty and does not begin with a slash (<computeroutput>/</computeroutput>); see example below</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.108</parametername>
</parameternamelist>
<parameterdescription>
<para>if a tilde (<computeroutput>~</computeroutput>) in the given JSON pointer <emphasis>s</emphasis> is not followed by <computeroutput>0</computeroutput> (representing <computeroutput>~</computeroutput>) or <computeroutput>1</computeroutput> (representing <computeroutput>/</computeroutput>); see example below</para></parameterdescription>
</parameteritem>
</parameterlist>
{The example shows the construction several valid JSON pointers as well as the exceptional behavior.,<ref refid="classnlohmann_1_1json__pointer" kindref="compound">json_pointer</ref>}</para><para><simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6928" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6928" bodyend="6928"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_a0920ebb015398813880e3c0f8464526e_1a0920ebb015398813880e3c0f8464526e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nlohmann::json_pointer::to_string</definition>
        <argsstring>() const noexcept</argsstring>
        <name>to_string</name>
        <briefdescription>
<para>return a string representation of the JSON pointer </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="invariant"><para>For each JSON pointer <computeroutput>ptr</computeroutput>, it holds: <programlisting filename=".cpp"><codeline><highlight class="normal">ptr<sp/>==<sp/><ref refid="classnlohmann_1_1json__pointer_a203910314c0be11c6b2b2cb53a9ad3aa_1a203910314c0be11c6b2b2cb53a9ad3aa" kindref="member">json_pointer</ref>(ptr.to_string());</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="return"><para>a string representation of the JSON pointer</para></simplesect>
{The example shows the result of <computeroutput>to_string</computeroutput>., json_pointer__to_string}</para><para><simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6945" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6945" bodyend="6953"/>
        <referencedby refid="classnlohmann_1_1json__pointer_a7c2d84318102529336beab1b5952bba0_1a7c2d84318102529336beab1b5952bba0" compoundref="json_8hpp" startline="6956" endline="6959">operator std::string</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_a7c2d84318102529336beab1b5952bba0_1a7c2d84318102529336beab1b5952bba0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::json_pointer::operator std::string</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string</name>
        <briefdescription>
<para>return a string representation of the JSON pointer </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="invariant"><para>For each JSON pointer <computeroutput>ptr</computeroutput>, it holds: <programlisting filename=".cpp"><codeline><highlight class="normal">ptr<sp/>==<sp/><ref refid="classnlohmann_1_1json__pointer_a203910314c0be11c6b2b2cb53a9ad3aa_1a203910314c0be11c6b2b2cb53a9ad3aa" kindref="member">json_pointer</ref>(ptr.to_string());</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="return"><para>a string representation of the JSON pointer</para></simplesect>
{The example shows the result of <computeroutput>to_string</computeroutput>., json_pointer__to_string}</para><para><simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6956" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6956" bodyend="6959"/>
        <references refid="classnlohmann_1_1json__pointer_a0920ebb015398813880e3c0f8464526e_1a0920ebb015398813880e3c0f8464526e" compoundref="json_8hpp" startline="6945" endline="6953">to_string</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1aa20613aff3a3009f7eab2a8bdc49cc7a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nlohmann::json_pointer::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>remove and return last reference pointer </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range.405</parametername>
</parameternamelist>
<parameterdescription>
<para>if JSON pointer has no parent </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6966" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6966" bodyend="6976"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1a30ec01d8fac350b76613e703378c67e9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nlohmann::json_pointer::is_root</definition>
        <argsstring>() const</argsstring>
        <name>is_root</name>
        <briefdescription>
<para>return whether pointer points to the root document </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6979" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6979" bodyend="6982"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1a7540462fec50cce499ee3aa54b90168e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1json__pointer" kindref="compound">json_pointer</ref></type>
        <definition>json_pointer nlohmann::json_pointer::top</definition>
        <argsstring>() const</argsstring>
        <name>top</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6984" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6984" bodyend="6994"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1a7600ad453d73319bbba5150e39a1002c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NLOHMANN_BASIC_JSON_TPL_DECLARATION NLOHMANN_BASIC_JSON_TPL &amp;</type>
        <definition>NLOHMANN_BASIC_JSON_TPL_DECLARATION NLOHMANN_BASIC_JSON_TPL &amp; nlohmann::json_pointer::get_and_create</definition>
        <argsstring>(NLOHMANN_BASIC_JSON_TPL &amp;j) const</argsstring>
        <name>get_and_create</name>
        <param>
          <type>NLOHMANN_BASIC_JSON_TPL &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create and return a reference to the pointed to value </para>        </briefdescription>
        <detaileddescription>
<para>Linear in the number of reference tokens.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if array index is not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.313</parametername>
</parameternamelist>
<parameterdescription>
<para>if value cannot be unflattened </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7006" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="14228" bodyend="14287"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1a007215a46d474142e8d92eb9a49f5457" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NLOHMANN_BASIC_JSON_TPL_DECLARATION NLOHMANN_BASIC_JSON_TPL &amp;</type>
        <definition>NLOHMANN_BASIC_JSON_TPL_DECLARATION NLOHMANN_BASIC_JSON_TPL &amp; nlohmann::json_pointer::get_unchecked</definition>
        <argsstring>(NLOHMANN_BASIC_JSON_TPL *ptr) const</argsstring>
        <name>get_unchecked</name>
        <param>
          <type>NLOHMANN_BASIC_JSON_TPL *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>return a reference to the pointed to value </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This version does not throw if a value is not present, but tries to create nested values instead. For instance, calling this function with pointer <computeroutput>&quot;/this/that&quot;</computeroutput> on a null value is equivalent to calling <computeroutput>operator[](&quot;this&quot;).operator[](&quot;that&quot;)</computeroutput> on that value, effectively changing the null value to an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the JSON value pointed to by the JSON pointer</para></simplesect>
Linear in the length of the JSON pointer.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7028" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="14291" bodyend="14359"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1a7e7142c629f2eb642541f12765d399aa" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NLOHMANN_BASIC_JSON_TPL_DECLARATION NLOHMANN_BASIC_JSON_TPL &amp;</type>
        <definition>NLOHMANN_BASIC_JSON_TPL_DECLARATION NLOHMANN_BASIC_JSON_TPL &amp; nlohmann::json_pointer::get_checked</definition>
        <argsstring>(NLOHMANN_BASIC_JSON_TPL *ptr) const</argsstring>
        <name>get_checked</name>
        <param>
          <type>NLOHMANN_BASIC_JSON_TPL *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7037" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="14363" bodyend="14413"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1aac6c56e0cb579cea2410b71754c9aa94" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NLOHMANN_BASIC_JSON_TPL_DECLARATION const NLOHMANN_BASIC_JSON_TPL &amp;</type>
        <definition>NLOHMANN_BASIC_JSON_TPL_DECLARATION const NLOHMANN_BASIC_JSON_TPL &amp; nlohmann::json_pointer::get_unchecked</definition>
        <argsstring>(const NLOHMANN_BASIC_JSON_TPL *ptr) const</argsstring>
        <name>get_unchecked</name>
        <param>
          <type>const NLOHMANN_BASIC_JSON_TPL *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>return a const reference to the pointed to value </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the JSON value pointed to by the JSON pointer</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7053" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="14417" bodyend="14468"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1afc7bd0e13e337bd530210270daa4014d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NLOHMANN_BASIC_JSON_TPL_DECLARATION const NLOHMANN_BASIC_JSON_TPL &amp;</type>
        <definition>NLOHMANN_BASIC_JSON_TPL_DECLARATION const NLOHMANN_BASIC_JSON_TPL &amp; nlohmann::json_pointer::get_checked</definition>
        <argsstring>(const NLOHMANN_BASIC_JSON_TPL *ptr) const</argsstring>
        <name>get_checked</name>
        <param>
          <type>const NLOHMANN_BASIC_JSON_TPL *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7062" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="14472" bodyend="14522"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1a6b25f61df350b64e35ac4ff6e7743e60" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt;std::string&gt; nlohmann::json_pointer::split</definition>
        <argsstring>(const std::string &amp;reference_string)</argsstring>
        <name>split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference_string</declname>
        </param>
        <briefdescription>
<para>split the string input to reference tokens </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is only called by the <ref refid="classnlohmann_1_1json__pointer" kindref="compound">json_pointer</ref> constructor. All exceptions below are documented there.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.107</parametername>
</parameternamelist>
<parameterdescription>
<para>if the pointer is not empty or begins with &apos;/&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.108</parametername>
</parameternamelist>
<parameterdescription>
<para>if character &apos;~&apos; is not followed by &apos;0&apos; or &apos;1&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7073" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="7073" bodyend="7133"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1a8b1a675b44c0a0bd0a87afea8fface59" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::json_pointer::replace_substring</definition>
        <argsstring>(std::string &amp;s, const std::string &amp;f, const std::string &amp;t)</argsstring>
        <name>replace_substring</name>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>replace all occurrences of a substring by another string </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to manipulate; changed so that all occurrences of <emphasis>f</emphasis> are replaced with <emphasis>t</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>the substring to replace with <emphasis>t</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to replace <emphasis>f</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The search string <emphasis>f</emphasis> must not be empty. <bold>This precondition is enforced with an assertion.</bold></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7148" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="7148" bodyend="7157"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1aae90b2a0cc8f3921b77596a5b43e6831" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string nlohmann::json_pointer::escape</definition>
        <argsstring>(std::string s)</argsstring>
        <name>escape</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>escape &quot;~&quot;&quot; to &quot;~0&quot; and &quot;/&quot; to &quot;~1" </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7160" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="7160" bodyend="7165"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1a63bcac401ff660d894837a9e044c3be9" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::json_pointer::unescape</definition>
        <argsstring>(std::string &amp;s)</argsstring>
        <name>unescape</name>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>unescape &quot;~1&quot; to tilde and &quot;~0&quot; to slash (order is important!) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7168" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="7168" bodyend="7172"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1ad830d0aac06e68bb0e432dfc3df052df" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NLOHMANN_BASIC_JSON_TPL_DECLARATION void</type>
        <definition>NLOHMANN_BASIC_JSON_TPL_DECLARATION void nlohmann::json_pointer::flatten</definition>
        <argsstring>(const std::string &amp;reference_string, const NLOHMANN_BASIC_JSON_TPL &amp;value, NLOHMANN_BASIC_JSON_TPL &amp;result)</argsstring>
        <name>flatten</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference_string</declname>
        </param>
        <param>
          <type>const NLOHMANN_BASIC_JSON_TPL &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>NLOHMANN_BASIC_JSON_TPL &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reference_string</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference string to the current value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">result</parametername>
</parameternamelist>
<parameterdescription>
<para>the result object to insert values to</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Empty objects or arrays are flattened to <computeroutput>null</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7182" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="14525" bodyend="14575"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1json__pointer_1a51ae9f482d93b7a2ca035aca65e776f2" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NLOHMANN_BASIC_JSON_TPL_DECLARATION NLOHMANN_BASIC_JSON_TPL</type>
        <definition>NLOHMANN_BASIC_JSON_TPL_DECLARATION NLOHMANN_BASIC_JSON_TPL nlohmann::json_pointer::unflatten</definition>
        <argsstring>(const NLOHMANN_BASIC_JSON_TPL &amp;value)</argsstring>
        <name>unflatten</name>
        <param>
          <type>const NLOHMANN_BASIC_JSON_TPL &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>flattened JSON</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unflattened JSON</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if array index is not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.314</parametername>
</parameternamelist>
<parameterdescription>
<para>if value is not an object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.315</parametername>
</parameternamelist>
<parameterdescription>
<para>if object values are not primitive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.313</parametername>
</parameternamelist>
<parameterdescription>
<para>if value cannot be unflattened </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="7198" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="14579" bodyend="14604"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>JSON Pointer. </para>    </briefdescription>
    <detaileddescription>
<para>A JSON pointer defines a string syntax for identifying a specific value within a JSON document. It can be used with functions <computeroutput>at</computeroutput> and <computeroutput>operator[]</computeroutput>. Furthermore, JSON pointers are the base for JSON patches.</para><para><simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901</ulink></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6901" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6900" bodyend="7208"/>
    <listofallmembers>
      <member refid="classnlohmann_1_1json__pointer_1ada3100cdb8700566051828f1355fa745" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>basic_json</name></member>
      <member refid="classnlohmann_1_1json__pointer_1aae90b2a0cc8f3921b77596a5b43e6831" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>escape</name></member>
      <member refid="classnlohmann_1_1json__pointer_1ad830d0aac06e68bb0e432dfc3df052df" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>flatten</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a7600ad453d73319bbba5150e39a1002c" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>get_and_create</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a7e7142c629f2eb642541f12765d399aa" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>get_checked</name></member>
      <member refid="classnlohmann_1_1json__pointer_1afc7bd0e13e337bd530210270daa4014d" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>get_checked</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a007215a46d474142e8d92eb9a49f5457" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>get_unchecked</name></member>
      <member refid="classnlohmann_1_1json__pointer_1aac6c56e0cb579cea2410b71754c9aa94" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>get_unchecked</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a30ec01d8fac350b76613e703378c67e9" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>is_root</name></member>
      <member refid="classnlohmann_1_1json__pointer_a203910314c0be11c6b2b2cb53a9ad3aa_1a203910314c0be11c6b2b2cb53a9ad3aa" prot="public" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>json_pointer</name></member>
      <member refid="classnlohmann_1_1json__pointer_a7c2d84318102529336beab1b5952bba0_1a7c2d84318102529336beab1b5952bba0" prot="public" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>operator std::string</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a6779edcf28e6f018a3bbb29c0b4b5e1e" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>operator!=</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a4667ef558c8c3f8a646bfda0c6654653" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>operator==</name></member>
      <member refid="classnlohmann_1_1json__pointer_1aa20613aff3a3009f7eab2a8bdc49cc7a" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>pop_back</name></member>
      <member refid="classnlohmann_1_1json__pointer_1afe4b0d7a3a9c3a91c6e7247842ab2e58" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>reference_tokens</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a8b1a675b44c0a0bd0a87afea8fface59" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>replace_substring</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a6b25f61df350b64e35ac4ff6e7743e60" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>split</name></member>
      <member refid="classnlohmann_1_1json__pointer_a0920ebb015398813880e3c0f8464526e_1a0920ebb015398813880e3c0f8464526e" prot="public" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>to_string</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a7540462fec50cce499ee3aa54b90168e" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>top</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a63bcac401ff660d894837a9e044c3be9" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>unescape</name></member>
      <member refid="classnlohmann_1_1json__pointer_1a51ae9f482d93b7a2ca035aca65e776f2" prot="private" virt="non-virtual"><scope>nlohmann::json_pointer</scope><name>unflatten</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classngraph_1_1descriptor_1_1Output" kind="class" language="C++" prot="public">
    <compoundname>ngraph::descriptor::Output</compoundname>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classngraph_1_1descriptor_1_1Output_1a6b249a863aeb0fe8780a7bcf2bcf7627" prot="protected" static="no" mutable="no">
        <type><ref refid="classngraph_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>Node* ngraph::descriptor::Output::m_node</definition>
        <argsstring></argsstring>
        <name>m_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="66" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1descriptor_1_1Output_1a3180028c8378d177b98156dc5020aa58" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t ngraph::descriptor::Output::m_index</definition>
        <argsstring></argsstring>
        <name>m_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="67" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1descriptor_1_1Output_1a022b72db624cf940f8119c71d692ada1" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1descriptor_1_1TensorView" kindref="compound">TensorView</ref> &gt;</type>
        <definition>std::shared_ptr&lt;TensorView&gt; ngraph::descriptor::Output::m_tensor_view</definition>
        <argsstring></argsstring>
        <name>m_tensor_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="68" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classngraph_1_1descriptor_1_1Output_1ac167d5bf0caff7366f6ba8b10906073e" prot="protected" static="no" mutable="no">
        <type>std::set&lt; <ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">Input</ref> * &gt;</type>
        <definition>std::set&lt;Input*&gt; ngraph::descriptor::Output::m_inputs</definition>
        <argsstring></argsstring>
        <name>m_inputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="69" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_a99b5df0b98174a36eeee6ada2e81c724_1a99b5df0b98174a36eeee6ada2e81c724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ngraph::descriptor::Output::Output</definition>
        <argsstring>(Node *node, size_t index, const std::shared_ptr&lt; TensorView &gt; &amp;tensor_view)</argsstring>
        <name>Output</name>
        <param>
          <type><ref refid="classngraph_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1descriptor_1_1TensorView" kindref="compound">TensorView</ref> &gt; &amp;</type>
          <declname>tensor_view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classngraph_1_1Node" kindref="compound">Node</ref> that owns this output. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the output tensor in all output tensors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensor_view</parametername>
</parameternamelist>
<parameterdescription>
<para>The view of this tensor; where the value will be written </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1af47dfdfd17bb586795fc513d7f08903a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; descriptor::Output::get_node</definition>
        <argsstring>() const</argsstring>
        <name>get_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="45" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1a04885fe6eebe87643e51c36277422ff7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ngraph::descriptor::Output::get_index</definition>
        <argsstring>() const</argsstring>
        <name>get_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="46" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1a1b76248127d40db1ef5dac10b5e0302b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1descriptor_1_1TensorView" kindref="compound">TensorView</ref> &gt;</type>
        <definition>std::shared_ptr&lt;TensorView&gt; ngraph::descriptor::Output::get_tensor_view</definition>
        <argsstring>() const</argsstring>
        <name>get_tensor_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="47" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1ac0e27155d743366fffcded5666a88ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void descriptor::Output::add_input</definition>
        <argsstring>(Input *input)</argsstring>
        <name>add_input</name>
        <param>
          <type><ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">Input</ref> *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="48" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1ab247417cbd541246efb5309441e3e43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void descriptor::Output::remove_input</definition>
        <argsstring>(Input *input)</argsstring>
        <name>remove_input</name>
        <param>
          <type><ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">Input</ref> *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="49" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1a9d85d25052d904692bce025c94c9c2ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::set&lt; <ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">Input</ref> * &gt; &amp;</type>
        <definition>const std::set&lt;Input*&gt;&amp; ngraph::descriptor::Output::get_inputs</definition>
        <argsstring>() const</argsstring>
        <name>get_inputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="50" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1a0a5cede53afd669baaf6f3666c2a0392" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>descriptor::Tensor &amp; descriptor::Output::get_tensor</definition>
        <argsstring>() const</argsstring>
        <name>get_tensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="51" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1aa956dd712bed6bf0101b8f217b5c1e17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ngraph::descriptor::Output::set_is_output</definition>
        <argsstring>()</argsstring>
        <name>set_is_output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="53" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1a4b86bb134164538f13ae30814c74d406" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ngraph::descriptor::Output::is_output</definition>
        <argsstring>()</argsstring>
        <name>is_output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="54" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_a4139e7fb611937e8034edb6e8942aff1_1a4139e7fb611937e8034edb6e8942aff1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref> &amp;</type>
        <definition>const Shape &amp; descriptor::Output::get_shape</definition>
        <argsstring>() const</argsstring>
        <name>get_shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the shape of the output </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="61" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_a1fd3573d0f1c66b01a40fb45436fef6a_1a1fd3573d0f1c66b01a40fb45436fef6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
        <definition>const element::Type &amp; descriptor::Output::get_element_type</definition>
        <argsstring>() const</argsstring>
        <name>get_element_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the element type of the output </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="63" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_a1b11c25aff36dbbb60ae89751d5f42fc_1a1b11c25aff36dbbb60ae89751d5f42fc" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classngraph_1_1TensorViewType" kindref="compound">TensorViewType</ref> &gt;</type>
        <definition>shared_ptr&lt; const TensorViewType &gt; descriptor::Output::get_tensor_view_type</definition>
        <argsstring>() const</argsstring>
        <name>get_tensor_view_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the tensor view type for the output </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="57" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1ad265ed7c7ef2004785d0c43fa0818c20" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ngraph::descriptor::Output::Output</definition>
        <argsstring>(const Output &amp;)=delete</argsstring>
        <name>Output</name>
        <param>
          <type>const <ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">Output</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1a88c30cf859f5e1a3989a50276b45e2e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ngraph::descriptor::Output::Output</definition>
        <argsstring>(Output &amp;&amp;)=delete</argsstring>
        <name>Output</name>
        <param>
          <type><ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">Output</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1descriptor_1_1Output_1a1f0f602507591727aa905a6835d4ecd2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">Output</ref> &amp;</type>
        <definition>Output&amp; ngraph::descriptor::Output::operator=</definition>
        <argsstring>(const Output &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classngraph_1_1descriptor_1_1Output" kindref="compound">Output</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="74" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="105">
        <label>ngraph::Node</label>
        <link refid="classngraph_1_1Node"/>
        <childnode refid="106" relation="public-inheritance">
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>m_outputs</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>liveness_live_list</edgelabel>
          <edgelabel>liveness_free_list</edgelabel>
          <edgelabel>liveness_new_list</edgelabel>
        </childnode>
        <childnode refid="119" relation="usage">
          <edgelabel>m_users</edgelabel>
        </childnode>
        <childnode refid="121" relation="usage">
          <edgelabel>m_inputs</edgelabel>
        </childnode>
        <childnode refid="122" relation="usage">
          <edgelabel>m_adjoint_map</edgelabel>
        </childnode>
        <childnode refid="113" relation="usage">
          <edgelabel>m_node_type</edgelabel>
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="118">
        <label>K</label>
      </node>
      <node id="109">
        <label>T</label>
      </node>
      <node id="119">
        <label>std::multiset&lt; ngraph::Node *&gt;</label>
        <childnode refid="105" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="120" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="125">
        <label>std::unordered_map&lt; K, T &gt;</label>
        <childnode refid="118" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="109" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="122">
        <label>std::unordered_map&lt; ngraph::Node *, ngraph::autodiff::Adjoints &gt;</label>
        <childnode refid="123" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="125" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *, ngraph::autodiff::Adjoints &gt;</edgelabel>
        </childnode>
      </node>
      <node id="112">
        <label>ngraph::element::Type</label>
        <link refid="classngraph_1_1element_1_1Type"/>
      </node>
      <node id="102">
        <label>ngraph::descriptor::Output</label>
        <link refid="classngraph_1_1descriptor_1_1Output"/>
        <childnode refid="103" relation="usage">
          <edgelabel>m_inputs</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>m_node</edgelabel>
        </childnode>
      </node>
      <node id="111">
        <label>ngraph::descriptor::Tensor</label>
        <link refid="classngraph_1_1descriptor_1_1Tensor"/>
        <childnode refid="112" relation="usage">
          <edgelabel>m_element_type</edgelabel>
        </childnode>
        <childnode refid="113" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
        <childnode refid="115" relation="usage">
          <edgelabel>m_primary_tensor_view</edgelabel>
        </childnode>
      </node>
      <node id="115">
        <label>ngraph::descriptor::PrimaryTensorView</label>
        <link refid="classngraph_1_1descriptor_1_1PrimaryTensorView"/>
        <childnode refid="116" relation="public-inheritance">
        </childnode>
        <childnode refid="111" relation="usage">
          <edgelabel>m_tensor</edgelabel>
        </childnode>
      </node>
      <node id="116">
        <label>ngraph::descriptor::TensorView</label>
        <link refid="classngraph_1_1descriptor_1_1TensorView"/>
        <childnode refid="113" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="107">
        <label>std::deque&lt; ngraph::descriptor::Output &gt;</label>
        <childnode refid="102" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="108" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="114">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="106">
        <label>std::enable_shared_from_this&lt; Node &gt;</label>
      </node>
      <node id="103">
        <label>std::set&lt; ngraph::descriptor::Input *&gt;</label>
        <childnode refid="104" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="126" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Input *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="126">
        <label>std::set&lt; K &gt;</label>
        <childnode refid="118" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="104">
        <label>ngraph::descriptor::Input</label>
        <link refid="classngraph_1_1descriptor_1_1Input"/>
        <childnode refid="102" relation="usage">
          <edgelabel>m_output</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>m_node</edgelabel>
        </childnode>
      </node>
      <node id="120">
        <label>std::multiset&lt; K &gt;</label>
        <childnode refid="118" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="121">
        <label>std::deque&lt; ngraph::descriptor::Input &gt;</label>
        <childnode refid="104" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="108" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Input &gt;</edgelabel>
        </childnode>
      </node>
      <node id="117">
        <label>std::unordered_set&lt; K &gt;</label>
        <childnode refid="118" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="124">
        <label>std::unordered_map&lt; ngraph::Node *, std::shared_ptr&lt; ngraph::Node &gt; &gt;</label>
        <childnode refid="105" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="125" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *, std::shared_ptr&lt; ngraph::Node &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="110">
        <label>std::unordered_set&lt; ngraph::descriptor::Tensor *&gt;</label>
        <childnode refid="111" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="117" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Tensor *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="123">
        <label>ngraph::autodiff::Adjoints</label>
        <link refid="classngraph_1_1autodiff_1_1Adjoints"/>
        <childnode refid="124" relation="usage">
          <edgelabel>m_adjoint_map</edgelabel>
        </childnode>
      </node>
      <node id="108">
        <label>std::deque&lt; T &gt;</label>
        <childnode refid="109" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="113">
        <label>std::string</label>
        <childnode refid="114" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" line="38" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/descriptor/output.hpp" bodystart="37" bodyend="75"/>
    <listofallmembers>
      <member refid="classngraph_1_1descriptor_1_1Output_1ac0e27155d743366fffcded5666a88ffc" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>add_input</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_a1fd3573d0f1c66b01a40fb45436fef6a_1a1fd3573d0f1c66b01a40fb45436fef6a" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>get_element_type</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1a04885fe6eebe87643e51c36277422ff7" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>get_index</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1a9d85d25052d904692bce025c94c9c2ec" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>get_inputs</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1af47dfdfd17bb586795fc513d7f08903a" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>get_node</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_a4139e7fb611937e8034edb6e8942aff1_1a4139e7fb611937e8034edb6e8942aff1" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>get_shape</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1a0a5cede53afd669baaf6f3666c2a0392" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>get_tensor</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1a1b76248127d40db1ef5dac10b5e0302b" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>get_tensor_view</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_a1b11c25aff36dbbb60ae89751d5f42fc_1a1b11c25aff36dbbb60ae89751d5f42fc" prot="protected" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>get_tensor_view_type</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1a4b86bb134164538f13ae30814c74d406" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>is_output</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1a3180028c8378d177b98156dc5020aa58" prot="protected" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>m_index</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1ac167d5bf0caff7366f6ba8b10906073e" prot="protected" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>m_inputs</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1a6b249a863aeb0fe8780a7bcf2bcf7627" prot="protected" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>m_node</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1a022b72db624cf940f8119c71d692ada1" prot="protected" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>m_tensor_view</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1a1f0f602507591727aa905a6835d4ecd2" prot="private" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>operator=</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_a99b5df0b98174a36eeee6ada2e81c724_1a99b5df0b98174a36eeee6ada2e81c724" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>Output</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1ad265ed7c7ef2004785d0c43fa0818c20" prot="private" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>Output</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1a88c30cf859f5e1a3989a50276b45e2e2" prot="private" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>Output</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1ab247417cbd541246efb5309441e3e43b" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>remove_input</name></member>
      <member refid="classngraph_1_1descriptor_1_1Output_1aa956dd712bed6bf0101b8f217b5c1e17" prot="public" virt="non-virtual"><scope>ngraph::descriptor::Output</scope><name>set_is_output</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

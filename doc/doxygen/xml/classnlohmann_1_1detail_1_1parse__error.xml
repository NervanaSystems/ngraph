<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classnlohmann_1_1detail_1_1parse__error" kind="class" language="C++" prot="public">
    <compoundname>nlohmann::detail::parse_error</compoundname>
    <basecompoundref refid="classnlohmann_1_1detail_1_1exception" prot="public" virt="non-virtual">nlohmann::detail::exception</basecompoundref>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classnlohmann_1_1detail_1_1parse__error_a9505aaa1ca943be927eec7cc579592ff_1a9505aaa1ca943be927eec7cc579592ff" prot="public" static="no" mutable="no">
        <type>const std::size_t</type>
        <definition>const std::size_t nlohmann::detail::parse_error::byte</definition>
        <argsstring></argsstring>
        <name>byte</name>
        <briefdescription>
<para>byte index of the parse error </para>        </briefdescription>
        <detaileddescription>
<para>The byte index of the last read character in the input file.</para><para><simplesect kind="note"><para>For an input with n bytes, 1 is the index of the first character and n+1 is the index of the terminating null byte or the end of file. This also holds true when reading a byte vector (CBOR or MessagePack). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="306" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1parse__error_a9fd60ad6bce80fd99686ad332faefd37_1a9fd60ad6bce80fd99686ad332faefd37" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1detail_1_1parse__error" kindref="compound">parse_error</ref></type>
        <definition>static parse_error nlohmann::detail::parse_error::create</definition>
        <argsstring>(int id_, std::size_t byte_, const std::string &amp;what_arg)</argsstring>
        <name>create</name>
        <param>
          <type>int</type>
          <declname>id_</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>byte_</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fab45cffe084dd3d20d928bee85e7b0f21" kindref="member">std::string</ref> &amp;</type>
          <declname>what_arg</declname>
        </param>
        <briefdescription>
<para>create a parse error exception </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id_</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the exception </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">byte_</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte index where the error occurred (or 0 if the position cannot be determined) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">what_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>the explanatory string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnlohmann_1_1detail_1_1parse__error" kindref="compound">parse_error</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="289" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="289" bodyend="295"/>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <referencedby refid="classnlohmann_1_1basic__json_a81e0c41a4a9dff4df2f6973f7f8b2a83_1a81e0c41a4a9dff4df2f6973f7f8b2a83" compoundref="json_8hpp" startline="13788" endline="14046">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::patch</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1parse__error_1a0ea816ea3521d7109407948cb1b850f7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::parse_error::parse_error</definition>
        <argsstring>(int id_, std::size_t byte_, const char *what_arg)</argsstring>
        <name>parse_error</name>
        <param>
          <type>int</type>
          <declname>id_</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>byte_</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>what_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="309" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="309" bodyend="310"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>exception indicating a parse error </para>    </briefdescription>
    <detaileddescription>
<para>This excpetion is thrown by the library when a parse error occurs. Parse errors can occur during the deserialization of JSON text, CBOR, MessagePack, as well as when using JSON Patch.</para><para>Member <emphasis>byte</emphasis> holds the byte index of the last read character in the input file.</para><para>Exceptions have ids 1xx.</para><para><table rows="13" cols="3"><row>
<entry thead="yes"><para>name / id  </para></entry><entry thead="yes"><para>example message  </para></entry><entry thead="yes"><para>description ----------<mdash/>   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.101  </para></entry><entry thead="no"><para>parse error at 2: unexpected end of input; expected string literal  </para></entry><entry thead="no"><para>This error indicates a syntax error while deserializing a JSON text. The error message describes that an unexpected token (character) was encountered, and the member <emphasis>byte</emphasis> indicates the error position.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.102  </para></entry><entry thead="no"><para>parse error at 14: missing or wrong low surrogate  </para></entry><entry thead="no"><para>JSON uses the <computeroutput>\uxxxx</computeroutput> format to describe Unicode characters. Code points above above 0xFFFF are split into two <computeroutput>\uxxxx</computeroutput> entries (&quot;surrogate pairs&quot;). This error indicates that the surrogate pair is incomplete or contains an invalid code point.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.103  </para></entry><entry thead="no"><para>parse error: code points above 0x10FFFF are invalid  </para></entry><entry thead="no"><para>Unicode supports code points up to 0x10FFFF. Code points above 0x10FFFF are invalid.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.104  </para></entry><entry thead="no"><para>parse error: JSON patch must be an array of objects  </para></entry><entry thead="no"><para><ulink url="https://tools.ietf.org/html/rfc6902">RFC 6902</ulink> requires a JSON Patch document to be a JSON document that represents an array of objects.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.105  </para></entry><entry thead="no"><para>parse error: operation must have string member &apos;op&apos;  </para></entry><entry thead="no"><para>An operation of a JSON Patch document must contain exactly one &quot;op&quot; member, whose value indicates the operation to perform. Its value must be one of &quot;add&quot;, &quot;remove&quot;, &quot;replace&quot;, &quot;move&quot;, &quot;copy&quot;, or &quot;test&quot;; other values are errors.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.106  </para></entry><entry thead="no"><para>parse error: array index &apos;01&apos; must not begin with &apos;0&apos;  </para></entry><entry thead="no"><para>An array index in a JSON Pointer (<ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901</ulink>) may be <computeroutput>0</computeroutput> or any number wihtout a leading <computeroutput>0</computeroutput>.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.107  </para></entry><entry thead="no"><para>parse error: JSON pointer must be empty or begin with &apos;/&apos; - was: &apos;foo&apos;  </para></entry><entry thead="no"><para>A JSON Pointer must be a Unicode string containing a sequence of zero or more reference tokens, each prefixed by a <computeroutput>/</computeroutput> character.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.108  </para></entry><entry thead="no"><para>parse error: escape character &apos;~&apos; must be followed with &apos;0&apos; or &apos;1&apos;  </para></entry><entry thead="no"><para>In a JSON Pointer, only <computeroutput>~0</computeroutput> and <computeroutput>~1</computeroutput> are valid escape sequences.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.109  </para></entry><entry thead="no"><para>parse error: array index &apos;one&apos; is not a number  </para></entry><entry thead="no"><para>A JSON Pointer array index must be a number.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.110  </para></entry><entry thead="no"><para>parse error at 1: cannot read 2 bytes from vector  </para></entry><entry thead="no"><para>When parsing CBOR or MessagePack, the byte vector ends before the complete value has been read.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.112  </para></entry><entry thead="no"><para>parse error at 1: error reading CBOR; last byte: 0xf8  </para></entry><entry thead="no"><para>Not all types of CBOR or MessagePack are supported. This exception occurs if an unsupported byte was read.   </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.113  </para></entry><entry thead="no"><para>parse error at 2: expected a CBOR string; last byte: 0x98  </para></entry><entry thead="no"><para>While parsing a map key, a value that is not a string has been read.   </para></entry></row>
</table>
</para><para><simplesect kind="note"><para>For an input with n bytes, 1 is the index of the first character and n+1 is the index of the terminating null byte or the end of file. This also holds true when reading a byte vector (CBOR or MessagePack).</para></simplesect>
{The following code shows how a <computeroutput><ref refid="classnlohmann_1_1detail_1_1parse__error" kindref="compound">parse_error</ref></computeroutput> exception can be caught.,<ref refid="classnlohmann_1_1detail_1_1parse__error" kindref="compound">parse_error</ref>}</para><para><simplesect kind="see"><para><ref refid="classnlohmann_1_1detail_1_1exception" kindref="compound">exception</ref> for the base class of the library exceptions </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1detail_1_1invalid__iterator" kindref="compound">invalid_iterator</ref> for exceptions indicating errors with iterators </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1detail_1_1type__error" kindref="compound">type_error</ref> for exceptions indicating executing a member function with a wrong type </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1detail_1_1out__of__range" kindref="compound">out_of_range</ref> for exceptions indicating access out of the defined range </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1detail_1_1other__error" kindref="compound">other_error</ref> for exceptions indicating other library errors</para></simplesect>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="3759">
        <label>nlohmann::detail::parse_error</label>
        <link refid="classnlohmann_1_1detail_1_1parse__error"/>
        <childnode refid="3760" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3761">
        <label>std::exception</label>
      </node>
      <node id="3760">
        <label>nlohmann::detail::exception</label>
        <link refid="classnlohmann_1_1detail_1_1exception"/>
        <childnode refid="3761" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3762">
        <label>nlohmann::detail::parse_error</label>
        <link refid="classnlohmann_1_1detail_1_1parse__error"/>
        <childnode refid="3763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3764">
        <label>std::exception</label>
      </node>
      <node id="3763">
        <label>nlohmann::detail::exception</label>
        <link refid="classnlohmann_1_1detail_1_1exception"/>
        <childnode refid="3764" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="279" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="278" bodyend="311"/>
    <listofallmembers>
      <member refid="classnlohmann_1_1detail_1_1parse__error_a9505aaa1ca943be927eec7cc579592ff_1a9505aaa1ca943be927eec7cc579592ff" prot="public" virt="non-virtual"><scope>nlohmann::detail::parse_error</scope><name>byte</name></member>
      <member refid="classnlohmann_1_1detail_1_1parse__error_a9fd60ad6bce80fd99686ad332faefd37_1a9fd60ad6bce80fd99686ad332faefd37" prot="public" virt="non-virtual"><scope>nlohmann::detail::parse_error</scope><name>create</name></member>
      <member refid="classnlohmann_1_1detail_1_1exception_1ae323ad0d53bc724414c2233164e65657" prot="protected" virt="non-virtual"><scope>nlohmann::detail::parse_error</scope><name>exception</name></member>
      <member refid="classnlohmann_1_1detail_1_1exception_1a0d4589a3fb54e81646d986c05efa3b9a" prot="public" virt="non-virtual"><scope>nlohmann::detail::parse_error</scope><name>id</name></member>
      <member refid="classnlohmann_1_1detail_1_1exception_1abf41a7e9178356314082284e6cfea278" prot="protected" virt="non-virtual"><scope>nlohmann::detail::parse_error</scope><name>name</name></member>
      <member refid="classnlohmann_1_1detail_1_1parse__error_1a0ea816ea3521d7109407948cb1b850f7" prot="private" virt="non-virtual"><scope>nlohmann::detail::parse_error</scope><name>parse_error</name></member>
      <member refid="classnlohmann_1_1detail_1_1exception_1a0672c25ecdf14d1a071d4d6478a65af0" prot="public" virt="non-virtual"><scope>nlohmann::detail::parse_error</scope><name>what</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classngraph_1_1xla_1_1op_1_1Tuple" kind="class" language="C++" prot="public">
    <compoundname>ngraph::xla::op::Tuple</compoundname>
    <basecompoundref refid="classngraph_1_1Node" prot="public" virt="non-virtual">ngraph::Node</basecompoundref>
    <includes refid="xla__tuple_8hpp" local="no">xla_tuple.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classngraph_1_1xla_1_1op_1_1Tuple_1a14710e2dcea094bd5d9b62e1ff8c6e70" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacengraph_1a193a29e9e6878bb1690debde6f87bdee" kindref="member">Nodes</ref></type>
        <definition>Nodes ngraph::xla::op::Tuple::m_elements</definition>
        <argsstring></argsstring>
        <name>m_elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="56" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classngraph_1_1xla_1_1op_1_1Tuple_1a31c3aa448b520705d85d2bd163853634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xla::op::Tuple::Tuple</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Node &gt;&gt; &amp;nodes)</argsstring>
        <name>Tuple</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;&gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="46" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1xla_1_1op_1_1Tuple_1a8a413f929b5ca78dd9a1183b5e23b454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; xla::op::Tuple::get_tuple_element</definition>
        <argsstring>(size_t i)</argsstring>
        <name>get_tuple_element</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="48" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1xla_1_1op_1_1Tuple_1a766ce641b30a19b5c8cb1edf138efc38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xla::op::Tuple::get_tuple_size</definition>
        <argsstring>() const</argsstring>
        <name>get_tuple_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="49" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1xla_1_1op_1_1Tuple_1a979077ea79833cc3953a53b5dbfb4e40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacengraph_1a193a29e9e6878bb1690debde6f87bdee" kindref="member">Nodes</ref> &amp;</type>
        <definition>const vector&lt; shared_ptr&lt; Node &gt; &gt; &amp; xla::op::Tuple::get_elements</definition>
        <argsstring>() const</argsstring>
        <name>get_elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="50" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1xla_1_1op_1_1Tuple_1a9019a571cd2d3bbc7701def3a55c87a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Node &gt; xla::op::Tuple::copy_with_new_args</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Node &gt;&gt; &amp;new_args) const override</argsstring>
        <name>copy_with_new_args</name>
        <reimplements refid="classngraph_1_1Node_1a0c3c1afcdb7effe100c653b86a2eb56e">copy_with_new_args</reimplements>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classngraph_1_1Node" kindref="compound">Node</ref> &gt;&gt; &amp;</type>
          <declname>new_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="52" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.cpp" bodystart="38" bodyend="41"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A special Op for constructing graphs with XLA tuples. Can only be used as an argument to the get_tuple_element function, which returns the node that was used when the tuple was constructed; the constructed graph should have no <ref refid="classngraph_1_1xla_1_1op_1_1Tuple" kindref="compound">Tuple</ref> nodes in it. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3517">
        <label>ngraph::xla::op::Tuple</label>
        <link refid="classngraph_1_1xla_1_1op_1_1Tuple"/>
        <childnode refid="3518" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3518">
        <label>ngraph::Node</label>
        <link refid="classngraph_1_1Node"/>
        <childnode refid="3519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3519">
        <label>std::enable_shared_from_this&lt; Node &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3520">
        <label>ngraph::xla::op::Tuple</label>
        <link refid="classngraph_1_1xla_1_1op_1_1Tuple"/>
        <childnode refid="3521" relation="public-inheritance">
        </childnode>
        <childnode refid="3546" relation="usage">
          <edgelabel>m_elements</edgelabel>
        </childnode>
      </node>
      <node id="3521">
        <label>ngraph::Node</label>
        <link refid="classngraph_1_1Node"/>
        <childnode refid="3522" relation="public-inheritance">
        </childnode>
        <childnode refid="3523" relation="usage">
          <edgelabel>m_outputs</edgelabel>
        </childnode>
        <childnode refid="3531" relation="usage">
          <edgelabel>liveness_live_list</edgelabel>
          <edgelabel>liveness_free_list</edgelabel>
          <edgelabel>liveness_new_list</edgelabel>
        </childnode>
        <childnode refid="3539" relation="usage">
          <edgelabel>m_users</edgelabel>
        </childnode>
        <childnode refid="3541" relation="usage">
          <edgelabel>m_inputs</edgelabel>
        </childnode>
        <childnode refid="3542" relation="usage">
          <edgelabel>m_adjoint_map</edgelabel>
        </childnode>
        <childnode refid="3534" relation="usage">
          <edgelabel>m_node_type</edgelabel>
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="3528">
        <label>K</label>
      </node>
      <node id="3530">
        <label>T</label>
      </node>
      <node id="3539">
        <label>std::multiset&lt; ngraph::Node *&gt;</label>
        <childnode refid="3521" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="3540" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="3547">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="3530" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3545">
        <label>std::unordered_map&lt; K, T &gt;</label>
        <childnode refid="3528" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="3530" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3542">
        <label>std::unordered_map&lt; ngraph::Node *, ngraph::autodiff::Adjoints &gt;</label>
        <childnode refid="3543" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="3521" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="3545" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *, ngraph::autodiff::Adjoints &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3533">
        <label>ngraph::element::Type</label>
        <link refid="classngraph_1_1element_1_1Type"/>
      </node>
      <node id="3524">
        <label>ngraph::descriptor::Output</label>
        <link refid="classngraph_1_1descriptor_1_1Output"/>
        <childnode refid="3525" relation="usage">
          <edgelabel>m_inputs</edgelabel>
        </childnode>
        <childnode refid="3521" relation="usage">
          <edgelabel>m_node</edgelabel>
        </childnode>
      </node>
      <node id="3532">
        <label>ngraph::descriptor::Tensor</label>
        <link refid="classngraph_1_1descriptor_1_1Tensor"/>
        <childnode refid="3533" relation="usage">
          <edgelabel>m_element_type</edgelabel>
        </childnode>
        <childnode refid="3534" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
        <childnode refid="3536" relation="usage">
          <edgelabel>m_primary_tensor_view</edgelabel>
        </childnode>
      </node>
      <node id="3536">
        <label>ngraph::descriptor::PrimaryTensorView</label>
        <link refid="classngraph_1_1descriptor_1_1PrimaryTensorView"/>
        <childnode refid="3537" relation="public-inheritance">
        </childnode>
        <childnode refid="3532" relation="usage">
          <edgelabel>m_tensor</edgelabel>
        </childnode>
      </node>
      <node id="3537">
        <label>ngraph::descriptor::TensorView</label>
        <link refid="classngraph_1_1descriptor_1_1TensorView"/>
        <childnode refid="3534" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="3523">
        <label>std::deque&lt; ngraph::descriptor::Output &gt;</label>
        <childnode refid="3524" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="3529" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3535">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="3522">
        <label>std::enable_shared_from_this&lt; Node &gt;</label>
      </node>
      <node id="3525">
        <label>std::set&lt; ngraph::descriptor::Input *&gt;</label>
        <childnode refid="3526" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="3527" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Input *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="3527">
        <label>std::set&lt; K &gt;</label>
        <childnode refid="3528" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="3526">
        <label>ngraph::descriptor::Input</label>
        <link refid="classngraph_1_1descriptor_1_1Input"/>
        <childnode refid="3524" relation="usage">
          <edgelabel>m_output</edgelabel>
        </childnode>
        <childnode refid="3521" relation="usage">
          <edgelabel>m_node</edgelabel>
        </childnode>
      </node>
      <node id="3540">
        <label>std::multiset&lt; K &gt;</label>
        <childnode refid="3528" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="3541">
        <label>std::deque&lt; ngraph::descriptor::Input &gt;</label>
        <childnode refid="3526" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="3529" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Input &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3546">
        <label>std::vector&lt; std::shared_ptr&lt; Node &gt; &gt;</label>
        <childnode refid="3547" relation="template-instance">
          <edgelabel>&lt; std::shared_ptr&lt; Node &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3538">
        <label>std::unordered_set&lt; K &gt;</label>
        <childnode refid="3528" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="3544">
        <label>std::unordered_map&lt; ngraph::Node *, std::shared_ptr&lt; ngraph::Node &gt; &gt;</label>
        <childnode refid="3521" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="3545" relation="template-instance">
          <edgelabel>&lt; ngraph::Node *, std::shared_ptr&lt; ngraph::Node &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3531">
        <label>std::unordered_set&lt; ngraph::descriptor::Tensor *&gt;</label>
        <childnode refid="3532" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="3538" relation="template-instance">
          <edgelabel>&lt; ngraph::descriptor::Tensor *&gt;</edgelabel>
        </childnode>
      </node>
      <node id="3543">
        <label>ngraph::autodiff::Adjoints</label>
        <link refid="classngraph_1_1autodiff_1_1Adjoints"/>
        <childnode refid="3544" relation="usage">
          <edgelabel>m_adjoint_map</edgelabel>
        </childnode>
      </node>
      <node id="3529">
        <label>std::deque&lt; T &gt;</label>
        <childnode refid="3530" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3534">
        <label>std::string</label>
        <childnode refid="3535" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="44" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" bodystart="43" bodyend="57"/>
    <listofallmembers>
      <member refid="classngraph_1_1Node_1a1bac19895a096bb5772f6a6c120b3813" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>add_output</name></member>
      <member refid="classngraph_1_1Node_1a5f3de445063d95cb31842e3a44e487c8" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>backprop_node</name></member>
      <member refid="classngraph_1_1Node_1a99c230728fde81ca9e64ed393d0728c4" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>clear_arguments</name></member>
      <member refid="classngraph_1_1xla_1_1op_1_1Tuple_1a9019a571cd2d3bbc7701def3a55c87a4" prot="public" virt="virtual"><scope>ngraph::xla::op::Tuple</scope><name>copy_with_new_args</name></member>
      <member refid="classngraph_1_1Node_1a92598fdffd86cf6fd3adf0081e041d2f" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>description</name></member>
      <member refid="classngraph_1_1Node_1a423c05a93bb628e8c311b631fb6a582c" prot="protected" virt="virtual"><scope>ngraph::xla::op::Tuple</scope><name>generate_adjoints</name></member>
      <member refid="classngraph_1_1Node_1a08ce613a6a22b1083c05321f0dced2a6" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_element_type</name></member>
      <member refid="classngraph_1_1xla_1_1op_1_1Tuple_1a979077ea79833cc3953a53b5dbfb4e40" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_elements</name></member>
      <member refid="classngraph_1_1Node_1abb77c47e270bdf0622587ee86919b492" prot="public" virt="virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_functions</name></member>
      <member refid="classngraph_1_1Node_1a98841a99a32bdcf64a371ff2aed2abc1" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_input_element_type</name></member>
      <member refid="classngraph_1_1Node_1aa7aaefcd4db958482315af48cb221a6c" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_input_op</name></member>
      <member refid="classngraph_1_1Node_1ac9b5aed803ef1f50a02a87dc81034ffe" prot="public" virt="virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_input_ops</name></member>
      <member refid="classngraph_1_1Node_1a9ff5f656d6b183cc00af753ec6b6144a" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_input_shape</name></member>
      <member refid="classngraph_1_1Node_1a69c6620b65b11187bf367a2d0e440699" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_input_size</name></member>
      <member refid="classngraph_1_1Node_1a3e88cf704f45f337a48d79a16a54e2c7" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_inputs</name></member>
      <member refid="classngraph_1_1Node_1a3d47e40f640c1469db01a33611a993e0" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_inputs</name></member>
      <member refid="classngraph_1_1Node_1a7a189270f6c1d02aa62c11b82d837bfb" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_instance_id</name></member>
      <member refid="classngraph_1_1Node_1ab0228a9136af1c06e6c32503871aa037" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_name</name></member>
      <member refid="classngraph_1_1Node_1a49900b3c7bc6ee44c466a622ccf52f71" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_node_id</name></member>
      <member refid="classngraph_1_1Node_1a91ccdcd6a30ca5a265c74f0f2734210b" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_output_element_type</name></member>
      <member refid="classngraph_1_1Node_1a68967e741c4045d22b712c5f644f5fa7" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_output_inputs</name></member>
      <member refid="classngraph_1_1Node_1a29bad373294c6939549d3302c6c5b45c" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_output_shape</name></member>
      <member refid="classngraph_1_1Node_1a9257d1be4e21fd9b4e834ee763c9ab03" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_output_size</name></member>
      <member refid="classngraph_1_1Node_1a0cb34ea18330939c53fbf7fe15603c32" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_output_tensor</name></member>
      <member refid="classngraph_1_1Node_1a1d7465ea8dda0f2f22c13929656d4291" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_output_tensor</name></member>
      <member refid="classngraph_1_1Node_1a45ae2b4b094d1d91d1c867dc30143d7a" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_output_tensor_view</name></member>
      <member refid="classngraph_1_1Node_1a75b38938bbc73474c8ea083b36da876c" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_output_tensor_view</name></member>
      <member refid="classngraph_1_1Node_1ac9aae122c66b9d82c240fd35c1e45250" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_outputs</name></member>
      <member refid="classngraph_1_1Node_1aed735e2ef3cda31846ec7f0a85ebd5d8" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_outputs</name></member>
      <member refid="classngraph_1_1Node_1a7a690a13f82f2420e221be4ef0987f56" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_shape</name></member>
      <member refid="classngraph_1_1xla_1_1op_1_1Tuple_1a8a413f929b5ca78dd9a1183b5e23b454" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_tuple_element</name></member>
      <member refid="classngraph_1_1xla_1_1op_1_1Tuple_1a766ce641b30a19b5c8cb1edf138efc38" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>get_tuple_size</name></member>
      <member refid="classngraph_1_1Node_1a17548877a029631148b2fa00c2f11fcb" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>has_same_type</name></member>
      <member refid="classngraph_1_1Node_1ad0a48043e7858c06a2c91b25c2e88030" prot="public" virt="virtual"><scope>ngraph::xla::op::Tuple</scope><name>is_commutative</name></member>
      <member refid="classngraph_1_1Node_1aa560b6ff7736831265cf1ce1346e6376" prot="public" virt="virtual"><scope>ngraph::xla::op::Tuple</scope><name>is_constant</name></member>
      <member refid="classngraph_1_1Node_1ad3ae6e9bcbf2462a074847fdf47ab986" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>is_output</name></member>
      <member refid="classngraph_1_1Node_1ab700ac2bc2dec9138e3e1575b49075c6" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>is_parameter</name></member>
      <member refid="classngraph_1_1Node_ad69bb7920f3c6898754e0e938461fa8c_1ad69bb7920f3c6898754e0e938461fa8c" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>is_same_op_type</name></member>
      <member refid="classngraph_1_1Node_1a4f36c2c5ae51d1073d5bc23ab44cd72f" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>liveness_free_list</name></member>
      <member refid="classngraph_1_1Node_1aa58e8eb953c65c957dbdc56d7aa1dca5" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>liveness_live_list</name></member>
      <member refid="classngraph_1_1Node_1a572f0f0ef5cb7d309a86b1ffddda7da1" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>liveness_new_list</name></member>
      <member refid="classngraph_1_1Node_1a881dacc03050bbe8dc679455c99bfaa8" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>m_adjoint_map</name></member>
      <member refid="classngraph_1_1xla_1_1op_1_1Tuple_1a14710e2dcea094bd5d9b62e1ff8c6e70" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>m_elements</name></member>
      <member refid="classngraph_1_1Node_1a4f55bb2b70a88ddcc407a2930da034e7" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>m_inputs</name></member>
      <member refid="classngraph_1_1Node_1ae927d96858146fd4aad4f7a9d6c03e8e" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>m_instance_id</name></member>
      <member refid="classngraph_1_1Node_1a034da5cfe5401a01045f2fd8a9374ca7" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>m_is_output</name></member>
      <member refid="classngraph_1_1Node_1af72ec96a91723b94174886a947835f93" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>m_name</name></member>
      <member refid="classngraph_1_1Node_1afc2e9023e2895f9d7465062ce7bbd49e" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>m_next_instance_id</name></member>
      <member refid="classngraph_1_1Node_1a9d06e17d8a569f809d6d322edb405b24" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>m_node_type</name></member>
      <member refid="classngraph_1_1Node_1a177ab91b7609c16e8d57e1a7182f2bd0" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>m_outputs</name></member>
      <member refid="classngraph_1_1Node_1ad0f9c97f26a1ad8a42b7308f0e4773f5" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>m_users</name></member>
      <member refid="classngraph_1_1Node_1a0259d67ef3d6d82e38dbafa62d1463e2" prot="protected" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>Node</name></member>
      <member refid="classngraph_1_1Node_1a7bcdb7230a14c3c76a38392bfeacea1a" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>set_is_output</name></member>
      <member refid="classngraph_1_1Node_1a21c1e9e47d5447ba37982d1bbc57e79c" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>set_name</name></member>
      <member refid="classngraph_1_1Node_1a0a2d35a1430bc4671184eec8e1425640" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>set_value_type_checked</name></member>
      <member refid="classngraph_1_1Node_1a7500930e175b8f522d26988796727ce1" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>set_value_type_checked</name></member>
      <member refid="classngraph_1_1xla_1_1op_1_1Tuple_1a31c3aa448b520705d85d2bd163853634" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>Tuple</name></member>
      <member refid="classngraph_1_1Node_1a1ca1186be7560ca6fd3a4bc1819526a1" prot="public" virt="non-virtual"><scope>ngraph::xla::op::Tuple</scope><name>users</name></member>
      <member refid="classngraph_1_1Node_1a2a6579e8a1f70539b8e47d100eb06ae6" prot="protected" virt="virtual"><scope>ngraph::xla::op::Tuple</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager" kind="class" language="C++" prot="public">
    <compoundname>ngraph::runtime::gpu::GPU_Manager</compoundname>
    <basecompoundref refid="classngraph_1_1runtime_1_1Manager" prot="public" virt="non-virtual">ngraph::runtime::Manager</basecompoundref>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager_1afec0acc4c2805b9ee374a725ef84c20d" prot="public" static="yes" mutable="no">
        <type>Factory</type>
        <definition>ngraph::runtime::Manager::Factory GPU_Manager::factory</definition>
        <argsstring></argsstring>
        <name>factory</name>
        <initializer>= ngraph::runtime::Manager::register_factory(
    &quot;GPU&quot;, [](const std::string&amp; name) -&gt; std::shared_ptr&lt;<ref refid="classngraph_1_1runtime_1_1Manager" kindref="compound">ngraph::runtime::Manager</ref>&gt; {
        return std::make_shared&lt;<ref refid="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager" kindref="compound">GPU_Manager</ref>&gt;();
    })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_manager.hpp" line="35" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_manager.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager_ad2ea48a1e94169a50adaa158610e2176_1ad2ea48a1e94169a50adaa158610e2176" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1runtime_1_1Backend" kindref="compound">Backend</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ngraph::runtime::Backend &gt; GPU_Manager::allocate_backend</definition>
        <argsstring>() override</argsstring>
        <name>allocate_backend</name>
        <reimplements refid="classngraph_1_1runtime_1_1Manager_a2f9cbafb77478482bb8d9f8fdc2971d7_1a2f9cbafb77478482bb8d9f8fdc2971d7">allocate_backend</reimplements>
        <briefdescription>
<para>Allocate a backend for this transformer. </para>        </briefdescription>
        <detaileddescription>
<para>Specific transformers may provide addtional methods for allocating customized backends. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_manager.hpp" line="30" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_manager.cpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager_1a6858701e5ce4241c567e7150a9e30eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1runtime_1_1ExternalFunction" kindref="compound">ngraph::runtime::ExternalFunction</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ngraph::runtime::ExternalFunction &gt; GPU_Manager::compile</definition>
        <argsstring>(const std::shared_ptr&lt; ngraph::Function &gt; &amp;fun) override</argsstring>
        <name>compile</name>
        <reimplements refid="classngraph_1_1runtime_1_1Manager_1a523ec9dba1d6a0ecccf7935c161ef45e">compile</reimplements>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classngraph_1_1Function" kindref="compound">ngraph::Function</ref> &gt; &amp;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Convert a function to a form that can be run on a backend. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_manager.hpp" line="33" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_manager.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3458">
        <label>ngraph::runtime::gpu::GPU_Manager</label>
        <link refid="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager"/>
        <childnode refid="3459" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3459">
        <label>ngraph::runtime::Manager</label>
        <link refid="classngraph_1_1runtime_1_1Manager"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3460">
        <label>ngraph::runtime::gpu::GPU_Manager</label>
        <link refid="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager"/>
        <childnode refid="3461" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3461">
        <label>ngraph::runtime::Manager</label>
        <link refid="classngraph_1_1runtime_1_1Manager"/>
      </node>
    </collaborationgraph>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_manager.hpp" line="28" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/gpu/gpu_manager.hpp" bodystart="27" bodyend="36"/>
    <listofallmembers>
      <member refid="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager_ad2ea48a1e94169a50adaa158610e2176_1ad2ea48a1e94169a50adaa158610e2176" prot="public" virt="virtual"><scope>ngraph::runtime::gpu::GPU_Manager</scope><name>allocate_backend</name></member>
      <member refid="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager_1a6858701e5ce4241c567e7150a9e30eec" prot="public" virt="virtual"><scope>ngraph::runtime::gpu::GPU_Manager</scope><name>compile</name></member>
      <member refid="classngraph_1_1runtime_1_1gpu_1_1GPU__Manager_1afec0acc4c2805b9ee374a725ef84c20d" prot="public" virt="non-virtual"><scope>ngraph::runtime::gpu::GPU_Manager</scope><name>factory</name></member>
      <member refid="classngraph_1_1runtime_1_1Manager_1ae0a72c6e0faedd7020f34c0c5d1997c4" prot="public" virt="non-virtual"><scope>ngraph::runtime::gpu::GPU_Manager</scope><name>Factory</name></member>
      <member refid="classngraph_1_1runtime_1_1Manager_1af0941afa18edb4141ae9a14f7fba79e7" prot="public" virt="non-virtual"><scope>ngraph::runtime::gpu::GPU_Manager</scope><name>get</name></member>
      <member refid="classngraph_1_1runtime_1_1Manager_1af29b39fa63884584bff4f123e092cf3d" prot="public" virt="non-virtual"><scope>ngraph::runtime::gpu::GPU_Manager</scope><name>register_factory</name></member>
      <member refid="classngraph_1_1runtime_1_1Manager_1a512f1ab87ecb6122703dd1a2e8e185ed" prot="public" virt="virtual"><scope>ngraph::runtime::gpu::GPU_Manager</scope><name>~Manager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classnlohmann_1_1detail_1_1serializer" kind="class" language="C++" prot="public">
    <compoundname>nlohmann::detail::serializer</compoundname>
    <templateparamlist>
      <param>
        <type>typename BasicJsonType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classnlohmann_1_1detail_1_1serializer_1ad08aa54fac1dd0a453320c54137d45ba" prot="private" static="no">
        <type>typename BasicJsonType::string_t</type>
        <definition>using nlohmann::detail::serializer&lt; BasicJsonType &gt;::string_t =  typename BasicJsonType::string_t</definition>
        <argsstring></argsstring>
        <name>string_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6090" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030" prot="private" static="no">
        <type>typename BasicJsonType::number_float_t</type>
        <definition>using nlohmann::detail::serializer&lt; BasicJsonType &gt;::number_float_t =  typename BasicJsonType::number_float_t</definition>
        <argsstring></argsstring>
        <name>number_float_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6091" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1detail_1_1serializer_1ae7b1df1c70bdec1371f297567726a198" prot="private" static="no">
        <type>typename BasicJsonType::number_integer_t</type>
        <definition>using nlohmann::detail::serializer&lt; BasicJsonType &gt;::number_integer_t =  typename BasicJsonType::number_integer_t</definition>
        <argsstring></argsstring>
        <name>number_integer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6092" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6092" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391" prot="private" static="no">
        <type>typename BasicJsonType::number_unsigned_t</type>
        <definition>using nlohmann::detail::serializer&lt; BasicJsonType &gt;::number_unsigned_t =  typename BasicJsonType::number_unsigned_t</definition>
        <argsstring></argsstring>
        <name>number_unsigned_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6093" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6093" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnlohmann_1_1detail_1_1serializer_1acf3c88660d3cbc65fc71c4d84f2a9f59" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556" kindref="member">output_adapter_t</ref>&lt; char &gt;</type>
        <definition>output_adapter_t&lt;char&gt; nlohmann::detail::serializer&lt; BasicJsonType &gt;::o</definition>
        <argsstring></argsstring>
        <name>o</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>the output of the serializer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6757" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980faf1f713c9e000f5d3f280adbd124df4f5" kindref="member">std::array</ref>&lt; char, 64 &gt;</type>
        <definition>std::array&lt;char, 64&gt; nlohmann::detail::serializer&lt; BasicJsonType &gt;::number_buffer</definition>
        <argsstring></argsstring>
        <name>number_buffer</name>
        <initializer>{{}}</initializer>
        <briefdescription>
<para>a (hopefully) large enough character buffer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6760" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6760" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589" prot="private" static="no" mutable="no">
        <type>const std::lconv *</type>
        <definition>const std::lconv* nlohmann::detail::serializer&lt; BasicJsonType &gt;::loc</definition>
        <argsstring></argsstring>
        <name>loc</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>the locale </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6763" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14" prot="private" static="no" mutable="no">
        <type>const char</type>
        <definition>const char nlohmann::detail::serializer&lt; BasicJsonType &gt;::thousands_sep</definition>
        <argsstring></argsstring>
        <name>thousands_sep</name>
        <initializer>= &apos;\0&apos;</initializer>
        <briefdescription>
<para>the locale&apos;s thousand separator character </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6765" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a" prot="private" static="no" mutable="no">
        <type>const char</type>
        <definition>const char nlohmann::detail::serializer&lt; BasicJsonType &gt;::decimal_point</definition>
        <argsstring></argsstring>
        <name>decimal_point</name>
        <initializer>= &apos;\0&apos;</initializer>
        <briefdescription>
<para>the locale&apos;s decimal point character </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6767" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnlohmann_1_1detail_1_1serializer_1a9a55e6b028d09676fe35aefa0c72ea5b" prot="private" static="no" mutable="no">
        <type>const char</type>
        <definition>const char nlohmann::detail::serializer&lt; BasicJsonType &gt;::indent_char</definition>
        <argsstring></argsstring>
        <name>indent_char</name>
        <briefdescription>
<para>the indentation character </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6770" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6" prot="private" static="no" mutable="no">
        <type>string_t</type>
        <definition>string_t nlohmann::detail::serializer&lt; BasicJsonType &gt;::indent_string</definition>
        <argsstring></argsstring>
        <name>indent_string</name>
        <briefdescription>
<para>the indentation string </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6773" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6773" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1serializer_a3076c4514179654cc81d17048439c24a_1a3076c4514179654cc81d17048439c24a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::serializer&lt; BasicJsonType &gt;::serializer</definition>
        <argsstring>(output_adapter_t&lt; char &gt; s, const char ichar)</argsstring>
        <name>serializer</name>
        <param>
          <type><ref refid="namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556" kindref="member">output_adapter_t</ref>&lt; char &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>ichar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream to serialize to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ichar</parametername>
</parameternamelist>
<parameterdescription>
<para>indentation character to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6099" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6099" bodyend="6103"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1serializer_1ae3771351ec4cb892bec707edeb56dc31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::serializer&lt; BasicJsonType &gt;::serializer</definition>
        <argsstring>(const serializer &amp;)=delete</argsstring>
        <name>serializer</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1detail_1_1serializer" kindref="compound">serializer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1serializer_1a5f14c33012477b9f9876dc54d97009a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1detail_1_1serializer" kindref="compound">serializer</ref> &amp;</type>
        <definition>serializer&amp; nlohmann::detail::serializer&lt; BasicJsonType &gt;::operator=</definition>
        <argsstring>(const serializer &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1detail_1_1serializer" kindref="compound">serializer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1serializer_a95460ebd1a535a543e5a0ec52e00f48b_1a95460ebd1a535a543e5a0ec52e00f48b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::detail::serializer&lt; BasicJsonType &gt;::dump</definition>
        <argsstring>(const BasicJsonType &amp;val, const bool pretty_print, const bool ensure_ascii, const unsigned int indent_step, const unsigned int current_indent=0)</argsstring>
        <name>dump</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>pretty_print</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>ensure_ascii</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>indent_step</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>current_indent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>internal implementation of the serialization function </para>        </briefdescription>
        <detaileddescription>
<para>This function is called by the public member function dump and organizes the serialization internally. The indentation level is propagated as additional parameter. In case of arrays and objects, the function is called recursively.</para><para><itemizedlist>
<listitem><para>strings and object keys are escaped using <computeroutput>escape_string()</computeroutput></para></listitem><listitem><para>integer numbers are converted implicitly via <computeroutput>operator&lt;&lt;</computeroutput></para></listitem><listitem><para>floating-point numbers are converted to a string using <computeroutput>&quot;%g&quot;</computeroutput> format</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to serialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pretty_print</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the output shall be pretty-printed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indent_step</parametername>
</parameternamelist>
<parameterdescription>
<para>the indent level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">current_indent</parametername>
</parameternamelist>
<parameterdescription>
<para>the current indent level (only used internally) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6126" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6126" bodyend="6316"/>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980faa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980faf1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fa84e2c64f38f78ba3ea5c905ab5a2da27">nlohmann::detail::boolean</references>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fa5763da164f8659d94a56e29df64b4bcc">nlohmann::detail::number_integer</references>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fadce7cc8ec29055c4158828921f2f265e">nlohmann::detail::number_unsigned</references>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fad9966ecb59667235a57b4b999a649eef">nlohmann::detail::number_float</references>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fa94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="namespacenlohmann_1_1detail_a90aa5ef615aa8305e9ea20d8a947980f_1a90aa5ef615aa8305e9ea20d8a947980fa37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
        <referencedby refid="classnlohmann_1_1basic__json_a5adea76fedba9898d404fef8598aa663_1a5adea76fedba9898d404fef8598aa663" compoundref="json_8hpp" startline="8981" endline="8997">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::dump</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1serializer_1a5e9be8c73505b3ba8d42811ecacf5e41" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::size_t</type>
        <definition>static constexpr std::size_t nlohmann::detail::serializer&lt; BasicJsonType &gt;::bytes_following</definition>
        <argsstring>(const uint8_t u)</argsstring>
        <name>bytes_following</name>
        <param>
          <type>const uint8_t</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>returns the number of expected bytes following in UTF-8 string </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">u</parametername>
</parameternamelist>
<parameterdescription>
<para>the first byte of a UTF-8 string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of expected bytes following </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6325" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6325" bodyend="6331"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1serializer_1ab58de23ed061fc9a3af7cba489da1543" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t nlohmann::detail::serializer&lt; BasicJsonType &gt;::extra_space</definition>
        <argsstring>(const string_t &amp;s, const bool ensure_ascii) noexcept</argsstring>
        <name>extra_space</name>
        <param>
          <type>const string_t &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>ensure_ascii</declname>
        </param>
        <briefdescription>
<para>calculates the extra space to escape a JSON string </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to escape </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ensure_ascii</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to escape non-ASCII characters with  sequences </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of characters required to escape string <emphasis>s</emphasis> </para></simplesect>
Linear in the length of string <emphasis>s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6343" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6343" bodyend="6435"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1serializer_1a45eca4f3dd9f08f81f3c50c9f41cac82" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::detail::serializer&lt; BasicJsonType &gt;::escape_codepoint</definition>
        <argsstring>(int codepoint, string_t &amp;result, std::size_t &amp;pos)</argsstring>
        <name>escape_codepoint</name>
        <param>
          <type>int</type>
          <declname>codepoint</declname>
        </param>
        <param>
          <type>string_t &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6437" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6437" bodyend="6486"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1serializer_1af5907f16fed93831d422c958829b304a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::detail::serializer&lt; BasicJsonType &gt;::dump_escaped</definition>
        <argsstring>(const string_t &amp;s, const bool ensure_ascii) const</argsstring>
        <name>dump_escaped</name>
        <param>
          <type>const string_t &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>ensure_ascii</declname>
        </param>
        <briefdescription>
<para>dump escaped string </para>        </briefdescription>
        <detaileddescription>
<para>Escape a string by replacing certain special characters by a sequence of an escape character (backslash) and another character and other control characters by a sequence of &quot;\u&quot; followed by a four-digit hex representation. The escaped string is written to output stream <emphasis>o</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to escape </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ensure_ascii</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to escape non-ASCII characters with  sequences</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the length of string <emphasis>s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6502" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6502" bodyend="6642"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1serializer_1a944f6dea8dbe2961da145d2f62fa2c2f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NumberType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; std::is_same&lt; NumberType, number_unsigned_t &gt;::value or std::is_same&lt; NumberType, number_integer_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::detail::serializer&lt; BasicJsonType &gt;::dump_integer</definition>
        <argsstring>(NumberType x)</argsstring>
        <name>dump_integer</name>
        <param>
          <type>NumberType</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>dump an integer </para>        </briefdescription>
        <detaileddescription>
<para>Dump a given integer to output stream <emphasis>o</emphasis>. Works internally with <emphasis>number_buffer</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>integer number (signed or unsigned) to dump </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NumberType</parametername>
</parameternamelist>
<parameterdescription>
<para>either <emphasis>number_integer_t</emphasis> or <emphasis>number_unsigned_t</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6658" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6658" bodyend="6689"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1detail_1_1serializer_1a6d652a3bfa581cf1cd7790d6d11ea52f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::detail::serializer&lt; BasicJsonType &gt;::dump_float</definition>
        <argsstring>(number_float_t x)</argsstring>
        <name>dump_float</name>
        <param>
          <type>number_float_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>dump a floating-point number </para>        </briefdescription>
        <detaileddescription>
<para>Dump a given floating-point number to output stream <emphasis>o</emphasis>. Works internally with <emphasis>number_buffer</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>floating-point number to dump </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6699" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6699" bodyend="6753"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" line="6089" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/json.hpp" bodystart="6088" bodyend="6774"/>
    <listofallmembers>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a5e9be8c73505b3ba8d42811ecacf5e41" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>bytes_following</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>decimal_point</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_a95460ebd1a535a543e5a0ec52e00f48b_1a95460ebd1a535a543e5a0ec52e00f48b" prot="public" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>dump</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1af5907f16fed93831d422c958829b304a" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>dump_escaped</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a6d652a3bfa581cf1cd7790d6d11ea52f" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>dump_float</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a944f6dea8dbe2961da145d2f62fa2c2f" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>dump_integer</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a45eca4f3dd9f08f81f3c50c9f41cac82" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>escape_codepoint</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1ab58de23ed061fc9a3af7cba489da1543" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>extra_space</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a9a55e6b028d09676fe35aefa0c72ea5b" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>indent_char</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>indent_string</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>loc</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>number_buffer</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>number_float_t</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1ae7b1df1c70bdec1371f297567726a198" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>number_integer_t</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>number_unsigned_t</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1acf3c88660d3cbc65fc71c4d84f2a9f59" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>o</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a5f14c33012477b9f9876dc54d97009a0" prot="public" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>operator=</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_a3076c4514179654cc81d17048439c24a_1a3076c4514179654cc81d17048439c24a" prot="public" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>serializer</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1ae3771351ec4cb892bec707edeb56dc31" prot="public" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>serializer</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1ad08aa54fac1dd0a453320c54137d45ba" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>string_t</name></member>
      <member refid="classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14" prot="private" virt="non-virtual"><scope>nlohmann::detail::serializer</scope><name>thousands_sep</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

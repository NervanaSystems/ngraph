<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="liveness_8cpp" kind="file" language="C++">
    <compoundname>liveness.cpp</compoundname>
    <includes local="no">exception</includes>
    <includes local="no">sstream</includes>
    <includes local="no">unordered_set</includes>
    <includes refid="input_8hpp" local="yes">ngraph/descriptor/input.hpp</includes>
    <includes refid="output_8hpp" local="yes">ngraph/descriptor/output.hpp</includes>
    <includes refid="graph__util_8hpp" local="yes">ngraph/graph_util.hpp</includes>
    <includes refid="log_8hpp" local="yes">ngraph/log.hpp</includes>
    <includes refid="node_8hpp" local="yes">ngraph/node.hpp</includes>
    <includes refid="liveness_8hpp" local="yes">ngraph/pass/liveness.hpp</includes>
    <includes refid="util_8hpp" local="yes">ngraph/util.hpp</includes>
    <incdepgraph>
      <node id="10571">
        <label>list</label>
      </node>
      <node id="10574">
        <label>atomic</label>
      </node>
      <node id="10570">
        <label>functional</label>
      </node>
      <node id="10548">
        <label>ngraph/descriptor/tensor.hpp</label>
        <link refid="tensor_8hpp_source"/>
        <childnode refid="10549" relation="include">
        </childnode>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
        <childnode refid="10551" relation="include">
        </childnode>
      </node>
      <node id="10551">
        <label>ngraph/types/type.hpp</label>
        <link refid="type_8hpp_source"/>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
        <childnode refid="10552" relation="include">
        </childnode>
        <childnode refid="10557" relation="include">
        </childnode>
      </node>
      <node id="10565">
        <label>ngraph/descriptor/output.hpp</label>
        <link refid="output_8hpp_source"/>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10555" relation="include">
        </childnode>
        <childnode refid="10546" relation="include">
        </childnode>
        <childnode refid="10566" relation="include">
        </childnode>
      </node>
      <node id="10573">
        <label>ngraph/node.hpp</label>
        <link refid="node_8hpp_source"/>
        <childnode refid="10574" relation="include">
        </childnode>
        <childnode refid="10564" relation="include">
        </childnode>
        <childnode refid="10549" relation="include">
        </childnode>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10555" relation="include">
        </childnode>
        <childnode refid="10559" relation="include">
        </childnode>
        <childnode refid="10575" relation="include">
        </childnode>
        <childnode refid="10572" relation="include">
        </childnode>
        <childnode refid="10545" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
        <childnode refid="10576" relation="include">
        </childnode>
        <childnode refid="10554" relation="include">
        </childnode>
        <childnode refid="10546" relation="include">
        </childnode>
        <childnode refid="10565" relation="include">
        </childnode>
        <childnode refid="10548" relation="include">
        </childnode>
        <childnode refid="10551" relation="include">
        </childnode>
      </node>
      <node id="10563">
        <label>ngraph/log.hpp</label>
        <link refid="log_8hpp_source"/>
        <childnode refid="10564" relation="include">
        </childnode>
        <childnode refid="10544" relation="include">
        </childnode>
        <childnode refid="10562" relation="include">
        </childnode>
      </node>
      <node id="10562">
        <label>stdexcept</label>
      </node>
      <node id="10578">
        <label>ngraph/pass/pass.hpp</label>
        <link refid="pass_8hpp_source"/>
        <childnode refid="10571" relation="include">
        </childnode>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
        <childnode refid="10579" relation="include">
        </childnode>
        <childnode refid="10573" relation="include">
        </childnode>
        <childnode refid="10584" relation="include">
        </childnode>
      </node>
      <node id="10559">
        <label>string</label>
      </node>
      <node id="10558">
        <label>map</label>
      </node>
      <node id="10545">
        <label>unordered_set</label>
      </node>
      <node id="10567">
        <label>ngraph/graph_util.hpp</label>
        <link refid="graph__util_8hpp_source"/>
        <childnode refid="10568" relation="include">
        </childnode>
        <childnode refid="10569" relation="include">
        </childnode>
        <childnode refid="10564" relation="include">
        </childnode>
        <childnode refid="10570" relation="include">
        </childnode>
        <childnode refid="10549" relation="include">
        </childnode>
        <childnode refid="10571" relation="include">
        </childnode>
        <childnode refid="10558" relation="include">
        </childnode>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10544" relation="include">
        </childnode>
        <childnode refid="10559" relation="include">
        </childnode>
        <childnode refid="10572" relation="include">
        </childnode>
        <childnode refid="10545" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
      </node>
      <node id="10543">
        <label>exception</label>
      </node>
      <node id="10557">
        <label>ngraph/types/element_type.hpp</label>
        <link refid="element__type_8hpp_source"/>
        <childnode refid="10558" relation="include">
        </childnode>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10544" relation="include">
        </childnode>
        <childnode refid="10559" relation="include">
        </childnode>
        <childnode refid="10560" relation="include">
        </childnode>
        <childnode refid="10554" relation="include">
        </childnode>
        <childnode refid="10561" relation="include">
        </childnode>
        <childnode refid="10563" relation="include">
        </childnode>
      </node>
      <node id="10554">
        <label>ngraph/common.hpp</label>
        <link refid="common_8hpp_source"/>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10555" relation="include">
        </childnode>
        <childnode refid="10556" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
      </node>
      <node id="10577">
        <label>ngraph/pass/liveness.hpp</label>
        <link refid="liveness_8hpp_source"/>
        <childnode refid="10548" relation="include">
        </childnode>
        <childnode refid="10578" relation="include">
        </childnode>
      </node>
      <node id="10546">
        <label>ngraph/descriptor/input.hpp</label>
        <link refid="input_8hpp_source"/>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10548" relation="include">
        </childnode>
        <childnode refid="10551" relation="include">
        </childnode>
      </node>
      <node id="10552">
        <label>ngraph/shape.hpp</label>
        <link refid="shape_8hpp_source"/>
        <childnode refid="10553" relation="include">
        </childnode>
        <childnode refid="10549" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
        <childnode refid="10554" relation="include">
        </childnode>
      </node>
      <node id="10576">
        <label>ngraph/autodiff/adjoints.hpp</label>
        <link refid="adjoints_8hpp_source"/>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10572" relation="include">
        </childnode>
        <childnode refid="10554" relation="include">
        </childnode>
      </node>
      <node id="10583">
        <label>ngraph/ops/parameter.hpp</label>
        <link refid="parameter_8hpp_source"/>
        <childnode refid="10581" relation="include">
        </childnode>
        <childnode refid="10551" relation="include">
        </childnode>
      </node>
      <node id="10581">
        <label>ngraph/ops/op.hpp</label>
        <link refid="op_8hpp_source"/>
        <childnode refid="10559" relation="include">
        </childnode>
        <childnode refid="10554" relation="include">
        </childnode>
        <childnode refid="10573" relation="include">
        </childnode>
        <childnode refid="10582" relation="include">
        </childnode>
      </node>
      <node id="10553">
        <label>cstdio</label>
      </node>
      <node id="10550">
        <label>vector</label>
      </node>
      <node id="10556">
        <label>utility</label>
      </node>
      <node id="10544">
        <label>sstream</label>
      </node>
      <node id="10542">
        <label>/home/indie/libraries/private-ngraph-cpp/src/ngraph/pass/liveness.cpp</label>
        <link refid="liveness_8cpp"/>
        <childnode refid="10543" relation="include">
        </childnode>
        <childnode refid="10544" relation="include">
        </childnode>
        <childnode refid="10545" relation="include">
        </childnode>
        <childnode refid="10546" relation="include">
        </childnode>
        <childnode refid="10565" relation="include">
        </childnode>
        <childnode refid="10567" relation="include">
        </childnode>
        <childnode refid="10563" relation="include">
        </childnode>
        <childnode refid="10573" relation="include">
        </childnode>
        <childnode refid="10577" relation="include">
        </childnode>
        <childnode refid="10585" relation="include">
        </childnode>
      </node>
      <node id="10579">
        <label>ngraph/function.hpp</label>
        <link refid="function_8hpp_source"/>
        <childnode refid="10574" relation="include">
        </childnode>
        <childnode refid="10580" relation="include">
        </childnode>
        <childnode refid="10571" relation="include">
        </childnode>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10559" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
        <childnode refid="10565" relation="include">
        </childnode>
        <childnode refid="10566" relation="include">
        </childnode>
        <childnode refid="10563" relation="include">
        </childnode>
        <childnode refid="10573" relation="include">
        </childnode>
        <childnode refid="10581" relation="include">
        </childnode>
        <childnode refid="10583" relation="include">
        </childnode>
        <childnode refid="10551" relation="include">
        </childnode>
      </node>
      <node id="10549">
        <label>iostream</label>
      </node>
      <node id="10582">
        <label>ngraph/ops/util/op_annotations.hpp</label>
        <link refid="op__annotations_8hpp_source"/>
      </node>
      <node id="10564">
        <label>deque</label>
      </node>
      <node id="10572">
        <label>unordered_map</label>
      </node>
      <node id="10569">
        <label>chrono</label>
      </node>
      <node id="10561">
        <label>ngraph/except.hpp</label>
        <link refid="except_8hpp_source"/>
        <childnode refid="10562" relation="include">
        </childnode>
      </node>
      <node id="10560">
        <label>type_traits</label>
      </node>
      <node id="10555">
        <label>set</label>
      </node>
      <node id="10566">
        <label>ngraph/descriptor/tensor_view.hpp</label>
        <link refid="descriptor_2tensor__view_8hpp_source"/>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10552" relation="include">
        </childnode>
      </node>
      <node id="10568">
        <label>algorithm</label>
      </node>
      <node id="10585">
        <label>ngraph/util.hpp</label>
        <link refid="util_8hpp_source"/>
        <childnode refid="10568" relation="include">
        </childnode>
        <childnode refid="10569" relation="include">
        </childnode>
        <childnode refid="10564" relation="include">
        </childnode>
        <childnode refid="10570" relation="include">
        </childnode>
        <childnode refid="10549" relation="include">
        </childnode>
        <childnode refid="10571" relation="include">
        </childnode>
        <childnode refid="10558" relation="include">
        </childnode>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10544" relation="include">
        </childnode>
        <childnode refid="10559" relation="include">
        </childnode>
        <childnode refid="10572" relation="include">
        </childnode>
        <childnode refid="10545" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
      </node>
      <node id="10584">
        <label>ngraph/pass/manager_state.hpp</label>
        <link refid="manager__state_8hpp_source"/>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
        <childnode refid="10579" relation="include">
        </childnode>
      </node>
      <node id="10547">
        <label>memory</label>
      </node>
      <node id="10580">
        <label>initializer_list</label>
      </node>
      <node id="10575">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>2017-2018<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/descriptor/input.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/descriptor/output.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/graph_util.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/log.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/node.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/pass/liveness.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/util.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacengraph" kindref="compound">ngraph</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pass::Liveness::run_on_call_graph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>list&lt;shared_ptr&lt;Node&gt;&gt;&amp;<sp/>ops)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_set&lt;descriptor::Tensor*&gt;<sp/>currently_live;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>ops.rbegin();<sp/>it<sp/>!=<sp/>ops.rend();<sp/>it++)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Node&gt;<sp/>node<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;liveness_live_list.clear();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;liveness_new_list.clear();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;liveness_free_list.clear();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_set&lt;descriptor::Tensor*&gt;<sp/>input_tensor_decls;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">descriptor::Input</ref>&amp;<sp/>input_decl<sp/>:<sp/>node-&gt;get_inputs())</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref>&amp;<sp/>tensor<sp/>=<sp/>input_decl.get_tensor();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_temporary(tensor))</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_tensor_decls.insert(&amp;tensor);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_set&lt;descriptor::Tensor*&gt;<sp/>output_tensor_decls;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>node-&gt;get_output_size();<sp/>++i)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref>&amp;<sp/>tensor<sp/>=<sp/>node-&gt;get_output_tensor(i);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_temporary(tensor))</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_tensor_decls.insert(&amp;tensor);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_set&lt;descriptor::Tensor*&gt;<sp/>free_tensor_decls;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_set&lt;descriptor::Tensor*&gt;<sp/>new_tensor_decls;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_set&lt;descriptor::Tensor*&gt;<sp/>all_tensor_decls<sp/>=<sp/>input_tensor_decls;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_tensor_decls.insert(output_tensor_decls.begin(),<sp/>output_tensor_decls.end());</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref>*<sp/>tensor_decl<sp/>:<sp/>all_tensor_decls)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!contains(currently_live,<sp/>tensor_decl))</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>last<sp/>node<sp/>that<sp/>value<sp/>is<sp/>seen<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>it<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>op</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currently_live.insert(tensor_decl);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_tensor_decls.insert(tensor_decl);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;liveness_live_list<sp/>=<sp/>currently_live;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref>*<sp/>output_decl<sp/>:<sp/>output_tensor_decls)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contains(currently_live,<sp/>output_decl))</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_tensor_decls.insert(output_decl);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currently_live.erase(output_decl);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;liveness_free_list<sp/>=<sp/>free_tensor_decls;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;liveness_new_list<sp/>=<sp/>new_tensor_decls;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Anything<sp/>marked<sp/>as<sp/>output<sp/>must<sp/>remain<sp/>live<sp/>for<sp/>the<sp/>remainder<sp/>of<sp/>the<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>outputs<sp/>to<sp/>live_list<sp/>and<sp/>remove<sp/>from<sp/>free_list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_set&lt;descriptor::Tensor*&gt;<sp/>outputs;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_set&lt;descriptor::Tensor*&gt;<sp/>seen;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Node&gt;<sp/>node<sp/>:<sp/>ops)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref>*<sp/>tensor<sp/>:<sp/>node-&gt;liveness_live_list)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor-&gt;is_output())</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputs.insert(tensor);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref>*<sp/>tensor<sp/>:<sp/>outputs)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;liveness_live_list.insert(tensor);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;liveness_free_list.erase(tensor);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contains(node-&gt;liveness_new_list,<sp/>tensor))</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contains(seen,<sp/>tensor))</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;liveness_new_list.erase(tensor);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seen.insert(tensor);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validate_liveness(ops);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pass::Liveness::is_temporary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref>&amp;<sp/>tensor)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensor.is_persistent()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>tensor.is_input()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor.is_output()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>tensor.is_constant()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&amp;&amp;<sp/>tensor.is_compile_only()<sp/>==<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pass::Liveness::validate_liveness(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>list&lt;Node*&gt;&amp;<sp/>ops)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_set&lt;descriptor::Tensor*&gt;<sp/>dead_tensors;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>*<sp/>node<sp/>:<sp/>ops)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>active<sp/>=<sp/>node-&gt;liveness_live_list;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active.insert(node-&gt;liveness_new_list.begin(),<sp/>node-&gt;liveness_new_list.end());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active.insert(node-&gt;liveness_free_list.begin(),<sp/>node-&gt;liveness_free_list.end());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Tensor" kindref="compound">descriptor::Tensor</ref>*<sp/>tensor<sp/>:<sp/>active)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contains(dead_tensors,<sp/>tensor))</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>runtime_error(</highlight><highlight class="stringliteral">&quot;Liveness:<sp/>Dead<sp/>tensors<sp/>intersect<sp/>active<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dead_tensors.insert(node-&gt;liveness_free_list.begin(),<sp/>node-&gt;liveness_free_list.end());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/pass/liveness.cpp"/>
  </compounddef>
</doxygen>

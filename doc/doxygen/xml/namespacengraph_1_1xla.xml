<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespacengraph_1_1xla" kind="namespace" language="C++">
    <compoundname>ngraph::xla</compoundname>
    <innerclass refid="classngraph_1_1xla_1_1XLAFunction" prot="public">ngraph::xla::XLAFunction</innerclass>
    <innerclass refid="classngraph_1_1xla_1_1XLATuple" prot="public">ngraph::xla::XLATuple</innerclass>
    <innernamespace refid="namespacengraph_1_1xla_1_1op">ngraph::xla::op</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacengraph_1_1xla_1ac129acd25b6f1cefd96b83ec8113c92b" prot="public" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classngraph_1_1runtime_1_1TensorView" kindref="compound">runtime::TensorView</ref> &gt; &gt;</type>
        <definition>using ngraph::xla::XLAValues = typedef std::vector&lt;std::shared_ptr&lt;runtime::TensorView&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>XLAValues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="72" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacengraph_1_1xla_1a7023ff67a214d27d291cb524be2e5ce2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1xla_1_1XLATuple" kindref="compound">XLATuple</ref> &gt;</type>
        <definition>std::shared_ptr&lt;XLATuple&gt; ngraph::xla::make_tuple</definition>
        <argsstring>(const XLAValues &amp;elements)</argsstring>
        <name>make_tuple</name>
        <param>
          <type>const XLAValues &amp;</type>
          <declname>elements</declname>
        </param>
        <briefdescription>
<para>Convenience function for making a runtime tuple. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="92" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1xla_1aed8823b44c862824466daa20ee89bc40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1runtime_1_1TensorView" kindref="compound">runtime::TensorView</ref> &gt;</type>
        <definition>std::shared_ptr&lt;runtime::TensorView&gt; ngraph::xla::get_tuple_element</definition>
        <argsstring>(std::shared_ptr&lt; XLATuple &gt; xla_tuple, size_t i)</argsstring>
        <name>get_tuple_element</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classngraph_1_1xla_1_1XLATuple" kindref="compound">XLATuple</ref> &gt;</type>
          <declname>xla_tuple</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Convenience function for accessing a tuple element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacengraph_1_1xla_1a93e067defa3fafd238080b54a65ab12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ngraph::xla::call</definition>
        <argsstring>(std::shared_ptr&lt; runtime::CallFrame &gt; call_frame, const ngraph::runtime::TensorViewPtrs &amp;inputs, const ngraph::runtime::TensorViewPtrs &amp;outputs)</argsstring>
        <name>call</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classngraph_1_1runtime_1_1CallFrame" kindref="compound">runtime::CallFrame</ref> &gt;</type>
          <declname>call_frame</declname>
        </param>
        <param>
          <type>const ngraph::runtime::TensorViewPtrs &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const ngraph::runtime::TensorViewPtrs &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Invoke a call frame where some arguments might be XLATuples. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="102" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Code to facilitate nGraph&apos;s support for XLA/HLO. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/builder/xla_tuple.hpp" line="36" column="1"/>
  </compounddef>
</doxygen>

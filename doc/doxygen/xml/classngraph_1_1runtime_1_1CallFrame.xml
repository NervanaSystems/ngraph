<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classngraph_1_1runtime_1_1CallFrame" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>ngraph::runtime::CallFrame</compoundname>
    <derivedcompoundref refid="classngraph_1_1runtime_1_1cpu_1_1CPU__CallFrame" prot="public" virt="non-virtual">ngraph::runtime::cpu::CPU_CallFrame</derivedcompoundref>
    <derivedcompoundref refid="classngraph_1_1runtime_1_1gpu_1_1GPU__CallFrame" prot="public" virt="non-virtual">ngraph::runtime::gpu::GPU_CallFrame</derivedcompoundref>
    <derivedcompoundref refid="classngraph_1_1runtime_1_1interpreter_1_1INT__CallFrame" prot="public" virt="non-virtual">ngraph::runtime::interpreter::INT_CallFrame</derivedcompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classngraph_1_1runtime_1_1CallFrame_1a37e6cbe23dc687451a8f52a067054c3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ngraph::runtime::CallFrame::~CallFrame</definition>
        <argsstring>()</argsstring>
        <name>~CallFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/call_frame.hpp" line="55" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/call_frame.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1runtime_1_1CallFrame_1ac420690641ece0b6a9b5a3dc5f045db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ngraph::runtime::CallFrame::call</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; runtime::TensorView &gt;&gt; &amp;inputs, const std::vector&lt; std::shared_ptr&lt; runtime::TensorView &gt;&gt; &amp;outputs)=0</argsstring>
        <name>call</name>
        <reimplementedby refid="classngraph_1_1runtime_1_1cpu_1_1CPU__CallFrame_ac4cf30c7ab703cc587924913742098a0_1ac4cf30c7ab703cc587924913742098a0">call</reimplementedby>
        <reimplementedby refid="classngraph_1_1runtime_1_1gpu_1_1GPU__CallFrame_a2e7bb3ba89dfd7c69ee1234e3df92708_1a2e7bb3ba89dfd7c69ee1234e3df92708">call</reimplementedby>
        <reimplementedby refid="classngraph_1_1runtime_1_1interpreter_1_1INT__CallFrame_a5259131a45b47f9670e80eb77864100b_1a5259131a45b47f9670e80eb77864100b">call</reimplementedby>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classngraph_1_1runtime_1_1TensorView" kindref="compound">runtime::TensorView</ref> &gt;&gt; &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classngraph_1_1runtime_1_1TensorView" kindref="compound">runtime::TensorView</ref> &gt;&gt; &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Invoke the function with values matching the signature of the function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/call_frame.hpp" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1runtime_1_1CallFrame_1a611514d20e9a298fb48deaf611ff0cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ngraph::runtime::CallFrame::tensor_call</definition>
        <argsstring>(const TensorViewPtrs &amp;inputs, const TensorViewPtrs &amp;outputs)=0</argsstring>
        <name>tensor_call</name>
        <param>
          <type>const TensorViewPtrs &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const TensorViewPtrs &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Invoke the function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/call_frame.hpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classngraph_1_1runtime_1_1CallFrame_1a7e1246898c12577fa16f7319d23a3297" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; <ref refid="classngraph_1_1runtime_1_1PerformanceCounter" kindref="compound">PerformanceCounter</ref> &gt;</type>
        <definition>virtual std::vector&lt;PerformanceCounter&gt; ngraph::runtime::CallFrame::get_performance_data</definition>
        <argsstring>() const</argsstring>
        <name>get_performance_data</name>
        <reimplementedby refid="classngraph_1_1runtime_1_1cpu_1_1CPU__CallFrame_1aa12573ae025aa119297fce1b284e633a">get_performance_data</reimplementedby>
        <reimplementedby refid="classngraph_1_1runtime_1_1interpreter_1_1INT__CallFrame_1a315771bcdb6e71b65a97366dfbde5da4">get_performance_data</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/call_frame.hpp" line="65" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/call_frame.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3315">
        <label>ngraph::runtime::cpu::CPU_CallFrame</label>
        <link refid="classngraph_1_1runtime_1_1cpu_1_1CPU__CallFrame"/>
        <childnode refid="3314" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3316">
        <label>ngraph::runtime::gpu::GPU_CallFrame</label>
        <link refid="classngraph_1_1runtime_1_1gpu_1_1GPU__CallFrame"/>
        <childnode refid="3314" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3314">
        <label>ngraph::runtime::CallFrame</label>
        <link refid="classngraph_1_1runtime_1_1CallFrame"/>
      </node>
      <node id="3317">
        <label>ngraph::runtime::interpreter::INT_CallFrame</label>
        <link refid="classngraph_1_1runtime_1_1interpreter_1_1INT__CallFrame"/>
        <childnode refid="3314" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/call_frame.hpp" line="53" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/runtime/call_frame.hpp" bodystart="52" bodyend="69"/>
    <listofallmembers>
      <member refid="classngraph_1_1runtime_1_1CallFrame_1ac420690641ece0b6a9b5a3dc5f045db4" prot="public" virt="pure-virtual"><scope>ngraph::runtime::CallFrame</scope><name>call</name></member>
      <member refid="classngraph_1_1runtime_1_1CallFrame_1a7e1246898c12577fa16f7319d23a3297" prot="public" virt="virtual"><scope>ngraph::runtime::CallFrame</scope><name>get_performance_data</name></member>
      <member refid="classngraph_1_1runtime_1_1CallFrame_1a611514d20e9a298fb48deaf611ff0cba" prot="public" virt="pure-virtual"><scope>ngraph::runtime::CallFrame</scope><name>tensor_call</name></member>
      <member refid="classngraph_1_1runtime_1_1CallFrame_1a37e6cbe23dc687451a8f52a067054c3f" prot="public" virt="virtual"><scope>ngraph::runtime::CallFrame</scope><name>~CallFrame</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

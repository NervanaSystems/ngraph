<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="serializer_8cpp" kind="file" language="C++">
    <compoundname>serializer.cpp</compoundname>
    <includes refid="serializer_8hpp" local="yes">ngraph/serializer.hpp</includes>
    <includes refid="graph__util_8hpp" local="yes">ngraph/graph_util.hpp</includes>
    <includes refid="ops_2abs_8hpp" local="yes">ngraph/ops/abs.hpp</includes>
    <includes refid="ops_2acos_8hpp" local="yes">ngraph/ops/acos.hpp</includes>
    <includes refid="ops_2add_8hpp" local="yes">ngraph/ops/add.hpp</includes>
    <includes refid="ops_2asin_8hpp" local="yes">ngraph/ops/asin.hpp</includes>
    <includes refid="ops_2atan_8hpp" local="yes">ngraph/ops/atan.hpp</includes>
    <includes refid="ops_2avg__pool_8hpp" local="yes">ngraph/ops/avg_pool.hpp</includes>
    <includes refid="batch__norm_8hpp" local="yes">ngraph/ops/batch_norm.hpp</includes>
    <includes refid="ops_2broadcast_8hpp" local="yes">ngraph/ops/broadcast.hpp</includes>
    <includes refid="ops_2ceiling_8hpp" local="yes">ngraph/ops/ceiling.hpp</includes>
    <includes refid="concatenate_8hpp" local="yes">ngraph/ops/concatenate.hpp</includes>
    <includes refid="ops_2constant_8hpp" local="yes">ngraph/ops/constant.hpp</includes>
    <includes refid="ops_2convert_8hpp" local="yes">ngraph/ops/convert.hpp</includes>
    <includes refid="ops_2convolution_8hpp" local="yes">ngraph/ops/convolution.hpp</includes>
    <includes refid="ops_2cos_8hpp" local="yes">ngraph/ops/cos.hpp</includes>
    <includes refid="ops_2cosh_8hpp" local="yes">ngraph/ops/cosh.hpp</includes>
    <includes refid="ops_2divide_8hpp" local="yes">ngraph/ops/divide.hpp</includes>
    <includes refid="ops_2dot_8hpp" local="yes">ngraph/ops/dot.hpp</includes>
    <includes refid="ops_2equal_8hpp" local="yes">ngraph/ops/equal.hpp</includes>
    <includes refid="ops_2exp_8hpp" local="yes">ngraph/ops/exp.hpp</includes>
    <includes refid="ops_2floor_8hpp" local="yes">ngraph/ops/floor.hpp</includes>
    <includes refid="function__call_8hpp" local="yes">ngraph/ops/function_call.hpp</includes>
    <includes refid="get__output__element_8hpp" local="yes">ngraph/ops/get_output_element.hpp</includes>
    <includes refid="ops_2greater_8hpp" local="yes">ngraph/ops/greater.hpp</includes>
    <includes refid="ops_2greater__eq_8hpp" local="yes">ngraph/ops/greater_eq.hpp</includes>
    <includes refid="ops_2less_8hpp" local="yes">ngraph/ops/less.hpp</includes>
    <includes refid="ops_2less__eq_8hpp" local="yes">ngraph/ops/less_eq.hpp</includes>
    <includes refid="ops_2log_8hpp" local="yes">ngraph/ops/log.hpp</includes>
    <includes refid="ops_2max_8hpp" local="yes">ngraph/ops/max.hpp</includes>
    <includes refid="ops_2max__pool_8hpp" local="yes">ngraph/ops/max_pool.hpp</includes>
    <includes refid="ops_2maximum_8hpp" local="yes">ngraph/ops/maximum.hpp</includes>
    <includes refid="ops_2min_8hpp" local="yes">ngraph/ops/min.hpp</includes>
    <includes refid="ops_2minimum_8hpp" local="yes">ngraph/ops/minimum.hpp</includes>
    <includes refid="ops_2multiply_8hpp" local="yes">ngraph/ops/multiply.hpp</includes>
    <includes refid="negative_8hpp" local="yes">ngraph/ops/negative.hpp</includes>
    <includes refid="ops_2not_8hpp" local="yes">ngraph/ops/not.hpp</includes>
    <includes refid="ops_2not__equal_8hpp" local="yes">ngraph/ops/not_equal.hpp</includes>
    <includes refid="ops_2one__hot_8hpp" local="yes">ngraph/ops/one_hot.hpp</includes>
    <includes refid="ops_2pad_8hpp" local="yes">ngraph/ops/pad.hpp</includes>
    <includes refid="ops_2power_8hpp" local="yes">ngraph/ops/power.hpp</includes>
    <includes refid="ops_2product_8hpp" local="yes">ngraph/ops/product.hpp</includes>
    <includes refid="ops_2reduce_8hpp" local="yes">ngraph/ops/reduce.hpp</includes>
    <includes refid="ops_2reduce__window_8hpp" local="yes">ngraph/ops/reduce_window.hpp</includes>
    <includes refid="ops_2relu_8hpp" local="yes">ngraph/ops/relu.hpp</includes>
    <includes refid="remainder_8hpp" local="yes">ngraph/ops/remainder.hpp</includes>
    <includes refid="ops_2replace__slice_8hpp" local="yes">ngraph/ops/replace_slice.hpp</includes>
    <includes refid="ops_2reshape_8hpp" local="yes">ngraph/ops/reshape.hpp</includes>
    <includes refid="ops_2reverse_8hpp" local="yes">ngraph/ops/reverse.hpp</includes>
    <includes refid="ops_2select_8hpp" local="yes">ngraph/ops/select.hpp</includes>
    <includes refid="ops_2select__and__scatter_8hpp" local="yes">ngraph/ops/select_and_scatter.hpp</includes>
    <includes refid="ops_2sign_8hpp" local="yes">ngraph/ops/sign.hpp</includes>
    <includes refid="ops_2sin_8hpp" local="yes">ngraph/ops/sin.hpp</includes>
    <includes refid="ops_2sinh_8hpp" local="yes">ngraph/ops/sinh.hpp</includes>
    <includes refid="ops_2slice_8hpp" local="yes">ngraph/ops/slice.hpp</includes>
    <includes refid="ops_2sqrt_8hpp" local="yes">ngraph/ops/sqrt.hpp</includes>
    <includes refid="ops_2subtract_8hpp" local="yes">ngraph/ops/subtract.hpp</includes>
    <includes refid="ops_2sum_8hpp" local="yes">ngraph/ops/sum.hpp</includes>
    <includes refid="ops_2tan_8hpp" local="yes">ngraph/ops/tan.hpp</includes>
    <includes refid="ops_2tanh_8hpp" local="yes">ngraph/ops/tanh.hpp</includes>
    <includes refid="util_8hpp" local="yes">ngraph/util.hpp</includes>
    <incdepgraph>
      <node id="15515">
        <label>list</label>
      </node>
      <node id="15561">
        <label>locale</label>
      </node>
      <node id="15628">
        <label>ngraph/ops/subtract.hpp</label>
        <link refid="ops_2subtract_8hpp_source"/>
        <childnode refid="15572" relation="include">
        </childnode>
      </node>
      <node id="15563">
        <label>valarray</label>
      </node>
      <node id="15513">
        <label>atomic</label>
      </node>
      <node id="15589">
        <label>ngraph/ops/equal.hpp</label>
        <link refid="ops_2equal_8hpp_source"/>
        <childnode refid="15590" relation="include">
        </childnode>
      </node>
      <node id="15587">
        <label>ngraph/ops/divide.hpp</label>
        <link refid="ops_2divide_8hpp_source"/>
        <childnode refid="15572" relation="include">
        </childnode>
      </node>
      <node id="15557">
        <label>iomanip</label>
      </node>
      <node id="15556">
        <label>functional</label>
      </node>
      <node id="15625">
        <label>ngraph/ops/sinh.hpp</label>
        <link refid="ops_2sinh_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15617">
        <label>ngraph/ops/remainder.hpp</label>
        <link refid="remainder_8hpp_source"/>
        <childnode refid="15572" relation="include">
        </childnode>
      </node>
      <node id="15560">
        <label>limits</label>
      </node>
      <node id="15559">
        <label>iterator</label>
      </node>
      <node id="15566">
        <label>ngraph/ops/abs.hpp</label>
        <link refid="ops_2abs_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15616">
        <label>ngraph/ops/relu.hpp</label>
        <link refid="ops_2relu_8hpp_source"/>
        <childnode refid="15537" relation="include">
        </childnode>
        <childnode refid="15541" relation="include">
        </childnode>
        <childnode refid="15569" relation="include">
        </childnode>
        <childnode refid="15567" relation="include">
        </childnode>
        <childnode refid="15578" relation="include">
        </childnode>
        <childnode refid="15510" relation="include">
        </childnode>
      </node>
      <node id="15521">
        <label>ngraph/descriptor/tensor.hpp</label>
        <link refid="tensor_8hpp_source"/>
        <childnode refid="15522" relation="include">
        </childnode>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15517" relation="include">
        </childnode>
        <childnode refid="15523" relation="include">
        </childnode>
      </node>
      <node id="15584">
        <label>ngraph/ops/convolution.hpp</label>
        <link refid="ops_2convolution_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15552">
        <label>cstdint</label>
      </node>
      <node id="15523">
        <label>ngraph/types/type.hpp</label>
        <link refid="type_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15517" relation="include">
        </childnode>
        <childnode refid="15524" relation="include">
        </childnode>
        <childnode refid="15528" relation="include">
        </childnode>
      </node>
      <node id="15518">
        <label>ngraph/descriptor/output.hpp</label>
        <link refid="output_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15519" relation="include">
        </childnode>
        <childnode refid="15520" relation="include">
        </childnode>
        <childnode refid="15536" relation="include">
        </childnode>
      </node>
      <node id="15595">
        <label>ngraph/ops/greater.hpp</label>
        <link refid="ops_2greater_8hpp_source"/>
        <childnode refid="15590" relation="include">
        </childnode>
      </node>
      <node id="15537">
        <label>ngraph/node.hpp</label>
        <link refid="node_8hpp_source"/>
        <childnode refid="15513" relation="include">
        </childnode>
        <childnode refid="15535" relation="include">
        </childnode>
        <childnode refid="15522" relation="include">
        </childnode>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15519" relation="include">
        </childnode>
        <childnode refid="15516" relation="include">
        </childnode>
        <childnode refid="15538" relation="include">
        </childnode>
        <childnode refid="15511" relation="include">
        </childnode>
        <childnode refid="15539" relation="include">
        </childnode>
        <childnode refid="15517" relation="include">
        </childnode>
        <childnode refid="15540" relation="include">
        </childnode>
        <childnode refid="15526" relation="include">
        </childnode>
        <childnode refid="15520" relation="include">
        </childnode>
        <childnode refid="15518" relation="include">
        </childnode>
        <childnode refid="15521" relation="include">
        </childnode>
        <childnode refid="15523" relation="include">
        </childnode>
      </node>
      <node id="15585">
        <label>ngraph/ops/cos.hpp</label>
        <link refid="ops_2cos_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15618">
        <label>ngraph/ops/replace_slice.hpp</label>
        <link refid="ops_2replace__slice_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15550">
        <label>cmath</label>
      </node>
      <node id="15547">
        <label>cassert</label>
      </node>
      <node id="15534">
        <label>ngraph/log.hpp</label>
        <link refid="log_8hpp_source"/>
        <childnode refid="15535" relation="include">
        </childnode>
        <childnode refid="15530" relation="include">
        </childnode>
        <childnode refid="15533" relation="include">
        </childnode>
      </node>
      <node id="15508">
        <label>/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp</label>
        <link refid="serializer_8cpp"/>
        <childnode refid="15509" relation="include">
        </childnode>
        <childnode refid="15564" relation="include">
        </childnode>
        <childnode refid="15566" relation="include">
        </childnode>
        <childnode refid="15570" relation="include">
        </childnode>
        <childnode refid="15571" relation="include">
        </childnode>
        <childnode refid="15574" relation="include">
        </childnode>
        <childnode refid="15575" relation="include">
        </childnode>
        <childnode refid="15576" relation="include">
        </childnode>
        <childnode refid="15577" relation="include">
        </childnode>
        <childnode refid="15579" relation="include">
        </childnode>
        <childnode refid="15580" relation="include">
        </childnode>
        <childnode refid="15581" relation="include">
        </childnode>
        <childnode refid="15582" relation="include">
        </childnode>
        <childnode refid="15583" relation="include">
        </childnode>
        <childnode refid="15584" relation="include">
        </childnode>
        <childnode refid="15585" relation="include">
        </childnode>
        <childnode refid="15586" relation="include">
        </childnode>
        <childnode refid="15587" relation="include">
        </childnode>
        <childnode refid="15588" relation="include">
        </childnode>
        <childnode refid="15589" relation="include">
        </childnode>
        <childnode refid="15591" relation="include">
        </childnode>
        <childnode refid="15592" relation="include">
        </childnode>
        <childnode refid="15593" relation="include">
        </childnode>
        <childnode refid="15594" relation="include">
        </childnode>
        <childnode refid="15595" relation="include">
        </childnode>
        <childnode refid="15596" relation="include">
        </childnode>
        <childnode refid="15597" relation="include">
        </childnode>
        <childnode refid="15598" relation="include">
        </childnode>
        <childnode refid="15599" relation="include">
        </childnode>
        <childnode refid="15600" relation="include">
        </childnode>
        <childnode refid="15602" relation="include">
        </childnode>
        <childnode refid="15603" relation="include">
        </childnode>
        <childnode refid="15604" relation="include">
        </childnode>
        <childnode refid="15605" relation="include">
        </childnode>
        <childnode refid="15606" relation="include">
        </childnode>
        <childnode refid="15607" relation="include">
        </childnode>
        <childnode refid="15608" relation="include">
        </childnode>
        <childnode refid="15609" relation="include">
        </childnode>
        <childnode refid="15610" relation="include">
        </childnode>
        <childnode refid="15611" relation="include">
        </childnode>
        <childnode refid="15612" relation="include">
        </childnode>
        <childnode refid="15613" relation="include">
        </childnode>
        <childnode refid="15614" relation="include">
        </childnode>
        <childnode refid="15615" relation="include">
        </childnode>
        <childnode refid="15616" relation="include">
        </childnode>
        <childnode refid="15617" relation="include">
        </childnode>
        <childnode refid="15618" relation="include">
        </childnode>
        <childnode refid="15619" relation="include">
        </childnode>
        <childnode refid="15620" relation="include">
        </childnode>
        <childnode refid="15621" relation="include">
        </childnode>
        <childnode refid="15622" relation="include">
        </childnode>
        <childnode refid="15623" relation="include">
        </childnode>
        <childnode refid="15624" relation="include">
        </childnode>
        <childnode refid="15625" relation="include">
        </childnode>
        <childnode refid="15626" relation="include">
        </childnode>
        <childnode refid="15627" relation="include">
        </childnode>
        <childnode refid="15628" relation="include">
        </childnode>
        <childnode refid="15629" relation="include">
        </childnode>
        <childnode refid="15630" relation="include">
        </childnode>
        <childnode refid="15631" relation="include">
        </childnode>
        <childnode refid="15578" relation="include">
        </childnode>
      </node>
      <node id="15533">
        <label>stdexcept</label>
      </node>
      <node id="15562">
        <label>numeric</label>
      </node>
      <node id="15569">
        <label>ngraph/ops/util/requires_tensor_view_args.hpp</label>
        <link refid="requires__tensor__view__args_8hpp_source"/>
        <childnode refid="15526" relation="include">
        </childnode>
        <childnode refid="15541" relation="include">
        </childnode>
      </node>
      <node id="15516">
        <label>string</label>
      </node>
      <node id="15586">
        <label>ngraph/ops/cosh.hpp</label>
        <link refid="ops_2cosh_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15571">
        <label>ngraph/ops/add.hpp</label>
        <link refid="ops_2add_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15572" relation="include">
        </childnode>
      </node>
      <node id="15529">
        <label>map</label>
      </node>
      <node id="15602">
        <label>ngraph/ops/max_pool.hpp</label>
        <link refid="ops_2max__pool_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15539">
        <label>unordered_set</label>
      </node>
      <node id="15564">
        <label>ngraph/graph_util.hpp</label>
        <link refid="graph__util_8hpp_source"/>
        <childnode refid="15545" relation="include">
        </childnode>
        <childnode refid="15565" relation="include">
        </childnode>
        <childnode refid="15535" relation="include">
        </childnode>
        <childnode refid="15556" relation="include">
        </childnode>
        <childnode refid="15522" relation="include">
        </childnode>
        <childnode refid="15515" relation="include">
        </childnode>
        <childnode refid="15529" relation="include">
        </childnode>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15530" relation="include">
        </childnode>
        <childnode refid="15516" relation="include">
        </childnode>
        <childnode refid="15511" relation="include">
        </childnode>
        <childnode refid="15539" relation="include">
        </childnode>
        <childnode refid="15517" relation="include">
        </childnode>
      </node>
      <node id="15575">
        <label>ngraph/ops/atan.hpp</label>
        <link refid="ops_2atan_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15611">
        <label>ngraph/ops/pad.hpp</label>
        <link refid="ops_2pad_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15604">
        <label>ngraph/ops/min.hpp</label>
        <link refid="ops_2min_8hpp_source"/>
        <childnode refid="15601" relation="include">
        </childnode>
      </node>
      <node id="15610">
        <label>ngraph/ops/one_hot.hpp</label>
        <link refid="ops_2one__hot_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15598">
        <label>ngraph/ops/less_eq.hpp</label>
        <link refid="ops_2less__eq_8hpp_source"/>
        <childnode refid="15590" relation="include">
        </childnode>
      </node>
      <node id="15609">
        <label>ngraph/ops/not_equal.hpp</label>
        <link refid="ops_2not__equal_8hpp_source"/>
        <childnode refid="15590" relation="include">
        </childnode>
      </node>
      <node id="15528">
        <label>ngraph/types/element_type.hpp</label>
        <link refid="element__type_8hpp_source"/>
        <childnode refid="15529" relation="include">
        </childnode>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15530" relation="include">
        </childnode>
        <childnode refid="15516" relation="include">
        </childnode>
        <childnode refid="15531" relation="include">
        </childnode>
        <childnode refid="15526" relation="include">
        </childnode>
        <childnode refid="15532" relation="include">
        </childnode>
        <childnode refid="15534" relation="include">
        </childnode>
      </node>
      <node id="15593">
        <label>ngraph/ops/function_call.hpp</label>
        <link refid="function__call_8hpp_source"/>
        <childnode refid="15537" relation="include">
        </childnode>
      </node>
      <node id="15526">
        <label>ngraph/common.hpp</label>
        <link refid="common_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15519" relation="include">
        </childnode>
        <childnode refid="15527" relation="include">
        </childnode>
        <childnode refid="15517" relation="include">
        </childnode>
      </node>
      <node id="15544">
        <label>ngraph/json.hpp</label>
        <link refid="json_8hpp_source"/>
        <childnode refid="15545" relation="include">
        </childnode>
        <childnode refid="15546" relation="include">
        </childnode>
        <childnode refid="15547" relation="include">
        </childnode>
        <childnode refid="15548" relation="include">
        </childnode>
        <childnode refid="15549" relation="include">
        </childnode>
        <childnode refid="15550" relation="include">
        </childnode>
        <childnode refid="15551" relation="include">
        </childnode>
        <childnode refid="15552" relation="include">
        </childnode>
        <childnode refid="15553" relation="include">
        </childnode>
        <childnode refid="15554" relation="include">
        </childnode>
        <childnode refid="15555" relation="include">
        </childnode>
        <childnode refid="15556" relation="include">
        </childnode>
        <childnode refid="15514" relation="include">
        </childnode>
        <childnode refid="15557" relation="include">
        </childnode>
        <childnode refid="15558" relation="include">
        </childnode>
        <childnode refid="15559" relation="include">
        </childnode>
        <childnode refid="15560" relation="include">
        </childnode>
        <childnode refid="15561" relation="include">
        </childnode>
        <childnode refid="15529" relation="include">
        </childnode>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15562" relation="include">
        </childnode>
        <childnode refid="15530" relation="include">
        </childnode>
        <childnode refid="15516" relation="include">
        </childnode>
        <childnode refid="15531" relation="include">
        </childnode>
        <childnode refid="15527" relation="include">
        </childnode>
        <childnode refid="15563" relation="include">
        </childnode>
        <childnode refid="15517" relation="include">
        </childnode>
      </node>
      <node id="15627">
        <label>ngraph/ops/sqrt.hpp</label>
        <link refid="ops_2sqrt_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15626">
        <label>ngraph/ops/slice.hpp</label>
        <link refid="ops_2slice_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15580">
        <label>ngraph/ops/ceiling.hpp</label>
        <link refid="ops_2ceiling_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15620">
        <label>ngraph/ops/reverse.hpp</label>
        <link refid="ops_2reverse_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15520">
        <label>ngraph/descriptor/input.hpp</label>
        <link refid="input_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15521" relation="include">
        </childnode>
        <childnode refid="15523" relation="include">
        </childnode>
      </node>
      <node id="15613">
        <label>ngraph/ops/product.hpp</label>
        <link refid="ops_2product_8hpp_source"/>
        <childnode refid="15601" relation="include">
        </childnode>
      </node>
      <node id="15629">
        <label>ngraph/ops/sum.hpp</label>
        <link refid="ops_2sum_8hpp_source"/>
        <childnode refid="15601" relation="include">
        </childnode>
      </node>
      <node id="15524">
        <label>ngraph/shape.hpp</label>
        <link refid="shape_8hpp_source"/>
        <childnode refid="15525" relation="include">
        </childnode>
        <childnode refid="15522" relation="include">
        </childnode>
        <childnode refid="15517" relation="include">
        </childnode>
        <childnode refid="15526" relation="include">
        </childnode>
      </node>
      <node id="15614">
        <label>ngraph/ops/reduce.hpp</label>
        <link refid="ops_2reduce_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15588">
        <label>ngraph/ops/dot.hpp</label>
        <link refid="ops_2dot_8hpp_source"/>
        <childnode refid="15527" relation="include">
        </childnode>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15583">
        <label>ngraph/ops/convert.hpp</label>
        <link refid="ops_2convert_8hpp_source"/>
        <childnode refid="15568" relation="include">
        </childnode>
        <childnode refid="15523" relation="include">
        </childnode>
      </node>
      <node id="15540">
        <label>ngraph/autodiff/adjoints.hpp</label>
        <link refid="adjoints_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15511" relation="include">
        </childnode>
        <childnode refid="15526" relation="include">
        </childnode>
      </node>
      <node id="15543">
        <label>ngraph/ops/parameter.hpp</label>
        <link refid="parameter_8hpp_source"/>
        <childnode refid="15541" relation="include">
        </childnode>
        <childnode refid="15523" relation="include">
        </childnode>
      </node>
      <node id="15573">
        <label>ngraph/ops/util/binary_elementwise.hpp</label>
        <link refid="binary__elementwise_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15541">
        <label>ngraph/ops/op.hpp</label>
        <link refid="op_8hpp_source"/>
        <childnode refid="15516" relation="include">
        </childnode>
        <childnode refid="15526" relation="include">
        </childnode>
        <childnode refid="15537" relation="include">
        </childnode>
        <childnode refid="15542" relation="include">
        </childnode>
      </node>
      <node id="15592">
        <label>ngraph/ops/floor.hpp</label>
        <link refid="ops_2floor_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15631">
        <label>ngraph/ops/tanh.hpp</label>
        <link refid="ops_2tanh_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15567">
        <label>ngraph/ops/util/unary_elementwise_arithmetic.hpp</label>
        <link refid="unary__elementwise__arithmetic_8hpp_source"/>
        <childnode refid="15568" relation="include">
        </childnode>
      </node>
      <node id="15525">
        <label>cstdio</label>
      </node>
      <node id="15622">
        <label>ngraph/ops/select_and_scatter.hpp</label>
        <link refid="ops_2select__and__scatter_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15615">
        <label>ngraph/ops/reduce_window.hpp</label>
        <link refid="ops_2reduce__window_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15579">
        <label>ngraph/ops/broadcast.hpp</label>
        <link refid="ops_2broadcast_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15590">
        <label>ngraph/ops/util/binary_elementwise_comparison.hpp</label>
        <link refid="binary__elementwise__comparison_8hpp_source"/>
        <childnode refid="15573" relation="include">
        </childnode>
      </node>
      <node id="15517">
        <label>vector</label>
      </node>
      <node id="15548">
        <label>ciso646</label>
      </node>
      <node id="15599">
        <label>ngraph/ops/log.hpp</label>
        <link refid="ops_2log_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15630">
        <label>ngraph/ops/tan.hpp</label>
        <link refid="ops_2tan_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15527">
        <label>utility</label>
      </node>
      <node id="15546">
        <label>array</label>
      </node>
      <node id="15570">
        <label>ngraph/ops/acos.hpp</label>
        <link refid="ops_2acos_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15572">
        <label>ngraph/ops/util/binary_elementwise_arithmetic.hpp</label>
        <link refid="binary__elementwise__arithmetic_8hpp_source"/>
        <childnode refid="15573" relation="include">
        </childnode>
      </node>
      <node id="15530">
        <label>sstream</label>
      </node>
      <node id="15605">
        <label>ngraph/ops/minimum.hpp</label>
        <link refid="ops_2minimum_8hpp_source"/>
        <childnode refid="15572" relation="include">
        </childnode>
      </node>
      <node id="15582">
        <label>ngraph/ops/constant.hpp</label>
        <link refid="ops_2constant_8hpp_source"/>
        <childnode refid="15554" relation="include">
        </childnode>
        <childnode refid="15530" relation="include">
        </childnode>
        <childnode refid="15534" relation="include">
        </childnode>
        <childnode refid="15537" relation="include">
        </childnode>
        <childnode refid="15528" relation="include">
        </childnode>
        <childnode refid="15578" relation="include">
        </childnode>
      </node>
      <node id="15594">
        <label>ngraph/ops/get_output_element.hpp</label>
        <link refid="get__output__element_8hpp_source"/>
        <childnode refid="15537" relation="include">
        </childnode>
      </node>
      <node id="15596">
        <label>ngraph/ops/greater_eq.hpp</label>
        <link refid="ops_2greater__eq_8hpp_source"/>
        <childnode refid="15590" relation="include">
        </childnode>
      </node>
      <node id="15558">
        <label>iosfwd</label>
      </node>
      <node id="15553">
        <label>cstdlib</label>
      </node>
      <node id="15621">
        <label>ngraph/ops/select.hpp</label>
        <link refid="ops_2select_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15512">
        <label>ngraph/function.hpp</label>
        <link refid="function_8hpp_source"/>
        <childnode refid="15513" relation="include">
        </childnode>
        <childnode refid="15514" relation="include">
        </childnode>
        <childnode refid="15515" relation="include">
        </childnode>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15516" relation="include">
        </childnode>
        <childnode refid="15517" relation="include">
        </childnode>
        <childnode refid="15518" relation="include">
        </childnode>
        <childnode refid="15536" relation="include">
        </childnode>
        <childnode refid="15534" relation="include">
        </childnode>
        <childnode refid="15537" relation="include">
        </childnode>
        <childnode refid="15541" relation="include">
        </childnode>
        <childnode refid="15543" relation="include">
        </childnode>
        <childnode refid="15523" relation="include">
        </childnode>
      </node>
      <node id="15549">
        <label>clocale</label>
      </node>
      <node id="15606">
        <label>ngraph/ops/multiply.hpp</label>
        <link refid="ops_2multiply_8hpp_source"/>
        <childnode refid="15572" relation="include">
        </childnode>
      </node>
      <node id="15522">
        <label>iostream</label>
      </node>
      <node id="15568">
        <label>ngraph/ops/util/unary_elementwise.hpp</label>
        <link refid="unary__elementwise_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15542">
        <label>ngraph/ops/util/op_annotations.hpp</label>
        <link refid="op__annotations_8hpp_source"/>
      </node>
      <node id="15551">
        <label>cstddef</label>
      </node>
      <node id="15535">
        <label>deque</label>
      </node>
      <node id="15612">
        <label>ngraph/ops/power.hpp</label>
        <link refid="ops_2power_8hpp_source"/>
        <childnode refid="15572" relation="include">
        </childnode>
      </node>
      <node id="15511">
        <label>unordered_map</label>
      </node>
      <node id="15623">
        <label>ngraph/ops/sign.hpp</label>
        <link refid="ops_2sign_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15600">
        <label>ngraph/ops/max.hpp</label>
        <link refid="ops_2max_8hpp_source"/>
        <childnode refid="15601" relation="include">
        </childnode>
      </node>
      <node id="15607">
        <label>ngraph/ops/negative.hpp</label>
        <link refid="negative_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15565">
        <label>chrono</label>
      </node>
      <node id="15532">
        <label>ngraph/except.hpp</label>
        <link refid="except_8hpp_source"/>
        <childnode refid="15533" relation="include">
        </childnode>
      </node>
      <node id="15601">
        <label>ngraph/ops/util/arithmetic_reduction.hpp</label>
        <link refid="arithmetic__reduction_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15608">
        <label>ngraph/ops/not.hpp</label>
        <link refid="ops_2not_8hpp_source"/>
        <childnode refid="15568" relation="include">
        </childnode>
      </node>
      <node id="15574">
        <label>ngraph/ops/asin.hpp</label>
        <link refid="ops_2asin_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15531">
        <label>type_traits</label>
      </node>
      <node id="15519">
        <label>set</label>
      </node>
      <node id="15603">
        <label>ngraph/ops/maximum.hpp</label>
        <link refid="ops_2maximum_8hpp_source"/>
        <childnode refid="15572" relation="include">
        </childnode>
      </node>
      <node id="15597">
        <label>ngraph/ops/less.hpp</label>
        <link refid="ops_2less_8hpp_source"/>
        <childnode refid="15590" relation="include">
        </childnode>
      </node>
      <node id="15581">
        <label>ngraph/ops/concatenate.hpp</label>
        <link refid="concatenate_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15577">
        <label>ngraph/ops/batch_norm.hpp</label>
        <link refid="batch__norm_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15537" relation="include">
        </childnode>
        <childnode refid="15569" relation="include">
        </childnode>
        <childnode refid="15578" relation="include">
        </childnode>
      </node>
      <node id="15536">
        <label>ngraph/descriptor/tensor_view.hpp</label>
        <link refid="descriptor_2tensor__view_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15524" relation="include">
        </childnode>
      </node>
      <node id="15555">
        <label>forward_list</label>
      </node>
      <node id="15545">
        <label>algorithm</label>
      </node>
      <node id="15576">
        <label>ngraph/ops/avg_pool.hpp</label>
        <link refid="ops_2avg__pool_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15578">
        <label>ngraph/util.hpp</label>
        <link refid="util_8hpp_source"/>
        <childnode refid="15545" relation="include">
        </childnode>
        <childnode refid="15565" relation="include">
        </childnode>
        <childnode refid="15535" relation="include">
        </childnode>
        <childnode refid="15556" relation="include">
        </childnode>
        <childnode refid="15522" relation="include">
        </childnode>
        <childnode refid="15515" relation="include">
        </childnode>
        <childnode refid="15529" relation="include">
        </childnode>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15530" relation="include">
        </childnode>
        <childnode refid="15516" relation="include">
        </childnode>
        <childnode refid="15511" relation="include">
        </childnode>
        <childnode refid="15539" relation="include">
        </childnode>
        <childnode refid="15517" relation="include">
        </childnode>
      </node>
      <node id="15554">
        <label>cstring</label>
      </node>
      <node id="15509">
        <label>ngraph/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="15510" relation="include">
        </childnode>
        <childnode refid="15511" relation="include">
        </childnode>
        <childnode refid="15512" relation="include">
        </childnode>
        <childnode refid="15544" relation="include">
        </childnode>
        <childnode refid="15537" relation="include">
        </childnode>
      </node>
      <node id="15510">
        <label>memory</label>
      </node>
      <node id="15619">
        <label>ngraph/ops/reshape.hpp</label>
        <link refid="ops_2reshape_8hpp_source"/>
        <childnode refid="15569" relation="include">
        </childnode>
      </node>
      <node id="15514">
        <label>initializer_list</label>
      </node>
      <node id="15591">
        <label>ngraph/ops/exp.hpp</label>
        <link refid="ops_2exp_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
      <node id="15538">
        <label>typeindex</label>
      </node>
      <node id="15624">
        <label>ngraph/ops/sin.hpp</label>
        <link refid="ops_2sin_8hpp_source"/>
        <childnode refid="15567" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="serializer_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" prot="public" static="no">
        <type><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref></type>
        <definition>using json =  nlohmann::json</definition>
        <argsstring></argsstring>
        <name>json</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" line="85" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="serializer_8cpp_1aa193722d3f95d3a851041af66d8f1fad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classngraph_1_1Function" kindref="compound">ngraph::Function</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;ngraph::Function&gt; read_function</definition>
        <argsstring>(const json &amp;, std::unordered_map&lt; std::string, std::shared_ptr&lt; Function &gt;&gt; &amp;)</argsstring>
        <name>read_function</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; <ref refid="classngraph_1_1Function" kindref="compound">Function</ref> &gt;&gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="serializer_8cpp_1ae500045276140a00cd28d1b0d46e13aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref></type>
        <definition>static json write</definition>
        <argsstring>(const ngraph::Function &amp;)</argsstring>
        <name>write</name>
        <param>
          <type>const <ref refid="classngraph_1_1Function" kindref="compound">ngraph::Function</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" line="90" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" bodystart="245" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="serializer_8cpp_1ac85d34653af5dd5fa342538e7cec0adf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref></type>
        <definition>static json write</definition>
        <argsstring>(const ngraph::Node &amp;)</argsstring>
        <name>write</name>
        <param>
          <type>const <ref refid="classngraph_1_1Node" kindref="compound">ngraph::Node</ref> &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" line="91" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" bodystart="818" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="serializer_8cpp_1a2b0b12b21b012b28c6be8026d9e36a80" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
        <definition>static const element::Type&amp; to_ref</definition>
        <argsstring>(const element::Type &amp;t)</argsstring>
        <name>to_ref</name>
        <param>
          <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" line="95" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" bodystart="95" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="serializer_8cpp_1aa357dc4bba1e97fb7b3ac57f538ff6c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref></type>
        <definition>static json write_element_type</definition>
        <argsstring>(const ngraph::element::Type &amp;n)</argsstring>
        <name>write_element_type</name>
        <param>
          <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">ngraph::element::Type</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" line="144" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" bodystart="144" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="serializer_8cpp_1a5aa883795de42c6c6061577f6577e587" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
        <definition>static const element::Type&amp; read_element_type</definition>
        <argsstring>(const json &amp;j)</argsstring>
        <name>read_element_type</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" line="151" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" bodystart="151" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="serializer_8cpp_1ac0983a1c91d6fb5e20367aaaf542cdb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref></type>
        <definition>static json write_tensor_type</definition>
        <argsstring>(const element::Type &amp;element_type, const Shape &amp;shape)</argsstring>
        <name>write_tensor_type</name>
        <param>
          <type>const <ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref> &amp;</type>
          <declname>element_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" line="182" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="serializer_8cpp_1ab40fa87c5defd3ff00677ddbbc302391" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classngraph_1_1TensorViewType" kindref="compound">TensorViewType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const TensorViewType&gt; read_tensor_type</definition>
        <argsstring>(const json &amp;j, const string &amp;type, const string &amp;sshape)</argsstring>
        <name>read_tensor_type</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>sshape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" line="191" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" bodystart="191" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="serializer_8cpp_1a76cc2a7ea076caa07f7e6d89df39916a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shared_ptr&lt; <ref refid="classngraph_1_1Function" kindref="compound">ngraph::Function</ref> &gt;</type>
        <definition>static shared_ptr&lt;ngraph::Function&gt; read_function</definition>
        <argsstring>(const json &amp;func_js, unordered_map&lt; string, shared_ptr&lt; Function &gt;&gt; &amp;function_map)</argsstring>
        <name>read_function</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref> &amp;</type>
          <declname>func_js</declname>
        </param>
        <param>
          <type>unordered_map&lt; string, shared_ptr&lt; <ref refid="classngraph_1_1Function" kindref="compound">Function</ref> &gt;&gt; &amp;</type>
          <declname>function_map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" line="303" column="1" bodyfile="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp" bodystart="303" bodyend="816"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>2017-2018<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/serializer.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/graph_util.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/abs.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/acos.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/add.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/asin.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/atan.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/avg_pool.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/batch_norm.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/broadcast.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/ceiling.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/concatenate.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/constant.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/convert.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/convolution.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/cos.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/cosh.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/divide.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/dot.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/equal.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/exp.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/floor.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/function_call.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/get_output_element.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/greater.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/greater_eq.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/less.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/less_eq.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/log.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/max.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/max_pool.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/maximum.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/min.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/minimum.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/multiply.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/negative.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/not.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/not_equal.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/one_hot.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/pad.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/power.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/product.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/reduce.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/reduce_window.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/relu.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/remainder.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/replace_slice.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/reshape.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/reverse.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/select.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/select_and_scatter.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/sign.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/sin.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/sinh.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/slice.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/sqrt.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/subtract.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/sum.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/tan.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/tanh.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/util.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NGRAPH_DISTRIBUTED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngraph/ops/allreduce.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacengraph" kindref="compound">ngraph</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ngraph::Function&gt;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>read_function(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref>&amp;,<sp/>std::unordered_map&lt;std::string,<sp/>std::shared_ptr&lt;Function&gt;&gt;&amp;);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1Function" kindref="compound">ngraph::Function</ref>&amp;);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1Node" kindref="compound">ngraph::Node</ref>&amp;);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>be<sp/>a<sp/>map<sp/>from<sp/>element<sp/>type<sp/>names<sp/>to<sp/>element<sp/>types<sp/>so<sp/>deserialization<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>singletons<sp/>and<sp/>serialization<sp/>can<sp/>serialize<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref>&amp;<sp/>to_ref(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::boolean)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::boolean;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::f32)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::f32;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::f64)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::f64;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::i8)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::i8;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::i16)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::i16;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::i32)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::i32;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::i64)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::i64;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::u8)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::u8;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::u16)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::u16;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::u32)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::u32;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>element::u64)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element::u64;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>runtime_error(</highlight><highlight class="stringliteral">&quot;type<sp/>not<sp/>valid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>write_element_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1element_1_1Type" kindref="compound">ngraph::element::Type</ref>&amp;<sp/>n)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>j;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>n.c_type_string();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref>&amp;<sp/>read_element_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref>&amp;<sp/>j)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bitwidth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_real;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>c_type_string;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j.<ref refid="classnlohmann_1_1basic__json_af8f511af124e82e4579f444b4175787c_1af8f511af124e82e4579f444b4175787c" kindref="member">is_object</ref>())</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitwidth<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;bitwidth&quot;</highlight><highlight class="normal">).<ref refid="classnlohmann_1_1basic__json_a6b187a22994c12c8cae0dd5ee99dc85e_1a6b187a22994c12c8cae0dd5ee99dc85e" kindref="member">get</ref>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_real<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;is_real&quot;</highlight><highlight class="normal">).<ref refid="classnlohmann_1_1basic__json_a6b187a22994c12c8cae0dd5ee99dc85e_1a6b187a22994c12c8cae0dd5ee99dc85e" kindref="member">get</ref>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_signed<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;is_signed&quot;</highlight><highlight class="normal">).<ref refid="classnlohmann_1_1basic__json_a6b187a22994c12c8cae0dd5ee99dc85e_1a6b187a22994c12c8cae0dd5ee99dc85e" kindref="member">get</ref>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_type_string<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;c_type_string&quot;</highlight><highlight class="normal">).<ref refid="classnlohmann_1_1basic__json_a6b187a22994c12c8cae0dd5ee99dc85e_1a6b187a22994c12c8cae0dd5ee99dc85e" kindref="member">get</ref>&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>c_type<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a6b187a22994c12c8cae0dd5ee99dc85e_1a6b187a22994c12c8cae0dd5ee99dc85e" kindref="member">get</ref>&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref>*<sp/>t<sp/>:<sp/>element::Type::get_known_types())</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;c_type_string()<sp/>==<sp/>c_type)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitwidth<sp/>=<sp/>t-&gt;bitwidth();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_real<sp/>=<sp/>t-&gt;is_real();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_signed<sp/>=<sp/>t-&gt;is_signed();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_type_string<sp/>=<sp/>t-&gt;c_type_string();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_ref(<ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref>(bitwidth,<sp/>is_real,<sp/>is_signed,<sp/>c_type_string));</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>write_tensor_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref>&amp;<sp/>element_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref>&amp;<sp/>shape)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>j;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>j[</highlight><highlight class="stringliteral">&quot;element_type&quot;</highlight><highlight class="normal">]<sp/>=<sp/>write_element_type(element_type);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>j[</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>shape;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>TensorViewType&gt;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>read_tensor_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref>&amp;<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>sshape)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1element_1_1Type" kindref="compound">element::Type</ref>&amp;<sp/>et<sp/>=<sp/>read_element_type(j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(type));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref><sp/>shape<sp/>=</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j.<ref refid="classnlohmann_1_1basic__json_a0d74bfcf65662f1d66d14c34b0027098_1a0d74bfcf65662f1d66d14c34b0027098" kindref="member">count</ref>(sshape)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(sshape).<ref refid="classnlohmann_1_1basic__json_a6b187a22994c12c8cae0dd5ee99dc85e_1a6b187a22994c12c8cae0dd5ee99dc85e" kindref="member">get</ref>&lt;vector&lt;size_t&gt;&gt;()</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespacengraph_1a4389a36f258ceab3d6622e166a24e3bb" kindref="member">Shape</ref>{}<sp/></highlight><highlight class="comment">/*HACK,<sp/>so<sp/>we<sp/>could<sp/>call<sp/>read_tensor_type<sp/>uniformly<sp/>@<sp/>each<sp/>callsite*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_shared&lt;TensorViewType&gt;(et,<sp/>shape);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ngraph::serialize(shared_ptr&lt;ngraph::Function&gt;<sp/>func,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>j;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;json&gt;<sp/>functions;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>traverse_functions(func,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](shared_ptr&lt;ngraph::Function&gt;<sp/>f)<sp/>{<sp/>functions.push_back(write(*f));<sp/>});</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>functions.rbegin();<sp/>it<sp/>!=<sp/>functions.rend();<sp/>it++)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j.<ref refid="classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_1ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" kindref="member">push_back</ref>(*it);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indent<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a5adea76fedba9898d404fef8598aa663_1a5adea76fedba9898d404fef8598aa663" kindref="member">dump</ref>();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a5adea76fedba9898d404fef8598aa663_1a5adea76fedba9898d404fef8598aa663" kindref="member">dump</ref>(indent);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">shared_ptr&lt;ngraph::Function&gt;<sp/>ngraph::deserialize(istream&amp;<sp/>in)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>in.rdbuf();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>deserialize(ss.str());</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">shared_ptr&lt;ngraph::Function&gt;<sp/>ngraph::deserialize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>js<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_aa9676414f2e36383c4b181fe856aa3c0_1aa9676414f2e36383c4b181fe856aa3c0" kindref="member">json::parse</ref>(s);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_ptr&lt;Function&gt;<sp/>rc;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_map&lt;string,<sp/>shared_ptr&lt;Function&gt;&gt;<sp/>function_map;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>func<sp/>:<sp/>js)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Function&gt;<sp/>f<sp/>=<sp/>read_function(func,<sp/>function_map);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1Function" kindref="compound">Function</ref>&amp;<sp/>f)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">]<sp/>=<sp/>f.get_name();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>param<sp/>:<sp/>f.<ref refid="classngraph_1_1Function_1ac20686ba123b3a9d38b32f3bffae6474" kindref="member">get_parameters</ref>())</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;parameters&quot;</highlight><highlight class="normal">].push_back(param-&gt;get_name());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Functions<sp/>can<sp/>return<sp/>multiple<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>f.<ref refid="classngraph_1_1Function_1a041c69423241cb251fdd1e1779aaeb6a" kindref="member">get_output_size</ref>();<sp/>++i)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">].push_back(f.<ref refid="classngraph_1_1Function_1abcf44df0bfb45c41605a36318b27d6e8" kindref="member">get_output_op</ref>(i)-&gt;get_name());</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;shared_ptr&lt;Node&gt;&gt;<sp/>result_list;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deque&lt;Node*&gt;<sp/>independent_nodes;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_map&lt;const<sp/>Node*,<sp/>size_t&gt;<sp/>node_depencency_count;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_map&lt;Node*,<sp/>shared_ptr&lt;Node&gt;&gt;<sp/>node_map;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traverse_nodes(const_cast&lt;Function*&gt;(&amp;f),<sp/>[&amp;](shared_ptr&lt;Node&gt;<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_map[node.get()]<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_depencency_count[node.get()]<sp/>=<sp/>node-&gt;get_input_ops().size();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;get_input_ops().size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>independent_nodes.push_back(node.get());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(independent_nodes.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>independent_node<sp/>=<sp/>independent_nodes.front();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_list.push_back(node_map[independent_node]);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>independent_nodes.pop_front();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user<sp/>:<sp/>independent_node-&gt;users())</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_depencency_count[user]<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>node_depencency_count[user];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>independent_nodes.push_back(user);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>nodes;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(shared_ptr&lt;Node&gt;<sp/>node<sp/>:<sp/>result_list)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes.<ref refid="classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_1ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" kindref="member">push_back</ref>(write(*node));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;ops&quot;</highlight><highlight class="normal">]<sp/>=<sp/>nodes;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>shared_ptr&lt;ngraph::Function&gt;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>read_function(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref>&amp;<sp/>func_js,<sp/>unordered_map&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>shared_ptr&lt;Function&gt;&gt;&amp;<sp/>function_map)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_ptr&lt;ngraph::Function&gt;<sp/>rc;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>func_name<sp/>=<sp/>func_js.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">).<ref refid="classnlohmann_1_1basic__json_a6b187a22994c12c8cae0dd5ee99dc85e_1a6b187a22994c12c8cae0dd5ee99dc85e" kindref="member">get</ref>&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>func_parameters<sp/>=<sp/>func_js.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;parameters&quot;</highlight><highlight class="normal">).<ref refid="classnlohmann_1_1basic__json_a6b187a22994c12c8cae0dd5ee99dc85e_1a6b187a22994c12c8cae0dd5ee99dc85e" kindref="member">get</ref>&lt;vector&lt;string&gt;&gt;();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>func_result<sp/>=<sp/>func_js.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">).<ref refid="classnlohmann_1_1basic__json_a6b187a22994c12c8cae0dd5ee99dc85e_1a6b187a22994c12c8cae0dd5ee99dc85e" kindref="member">get</ref>&lt;vector&lt;string&gt;&gt;();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_map&lt;string,<sp/>shared_ptr&lt;Node&gt;&gt;<sp/>node_map;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>node_js<sp/>:<sp/>func_js.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;ops&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>node_name<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>node_op<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;op&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>node_inputs<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;inputs&quot;</highlight><highlight class="normal">).get&lt;vector&lt;string&gt;&gt;();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>node_outputs<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;outputs&quot;</highlight><highlight class="normal">).get&lt;vector&lt;string&gt;&gt;();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Node&gt;<sp/>node;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;shared_ptr&lt;Node&gt;&gt;<sp/>args;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>name<sp/>:<sp/>node_inputs)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.push_back(node_map.at(name));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Abs&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Abs&gt;(args[0]);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Acos&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Acos&gt;(args[0]);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Add&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Add&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NGRAPH_DISTRIBUTED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AllReduce&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::AllReduce&gt;(args[0]);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Asin&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Asin&gt;(args[0]);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Atan&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Atan&gt;(args[0]);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AvgPool&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_movement_strides<sp/>=</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_below<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_above<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>include_padding_in_avg_computation<sp/>=</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;include_padding_in_avg_computation&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::AvgPool&gt;(args[0],</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_shape,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_movement_strides,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_below,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_above,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_padding_in_avg_computation);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AvgPoolBackprop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>forward_arg_shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;forward_arg_shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_movement_strides<sp/>=</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_below<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_above<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>include_padding_in_avg_computation<sp/>=</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;include_padding_in_avg_computation&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::AvgPoolBackprop&gt;(forward_arg_shape,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[0],</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_shape,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_movement_strides,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_below,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_above,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_padding_in_avg_computation);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BatchNorm&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::BatchNorm&gt;(epsilon,<sp/>args[0],<sp/>args[1],<sp/>args[2],<sp/>args[3],<sp/>args[4]);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Broadcast&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>axes<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;axes&quot;</highlight><highlight class="normal">).get&lt;set&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Broadcast&gt;(args[0],<sp/>shape,<sp/>axes);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Ceiling&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Ceiling&gt;(args[0]);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Concat&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;axis&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Concat&gt;(args,<sp/>axis);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Constant&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type_node_js<sp/>=</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.count(</highlight><highlight class="stringliteral">&quot;element_type&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>?<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;value_type&quot;</highlight><highlight class="normal">)<sp/>:<sp/>node_js;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element_type<sp/>=<sp/>read_element_type(type_node_js.at(</highlight><highlight class="stringliteral">&quot;element_type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>type_node_js.at(</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">).get&lt;vector&lt;string&gt;&gt;();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Constant&gt;(element_type,<sp/>shape,<sp/>value);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Convert&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>target_type<sp/>=<sp/>read_element_type(node_js.at(</highlight><highlight class="stringliteral">&quot;target_type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Convert&gt;(args[0],<sp/>target_type);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Convolution&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_movement_strides<sp/>=</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_dilation_strides<sp/>=</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_dilation_strides&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_below<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">).get&lt;vector&lt;std::ptrdiff_t&gt;&gt;();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_above<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">).get&lt;vector&lt;std::ptrdiff_t&gt;&gt;();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>backwards<sp/>compatibility,<sp/>we<sp/>accept<sp/>&quot;image_dilation_strides&quot;<sp/>in<sp/>place<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;data_dilation_strides&quot;,<sp/>and<sp/>we<sp/>also<sp/>allow<sp/>it<sp/>to<sp/>be<sp/>omitted<sp/>altogether.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data_dilation_strides_maybe<sp/>=<sp/>node_js[</highlight><highlight class="stringliteral">&quot;data_dilation_strides&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data_dilation_strides_maybe.empty())</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_dilation_strides_maybe<sp/>=<sp/>node_js[</highlight><highlight class="stringliteral">&quot;image_dilation_strides&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data_dilation_strides_maybe.empty())</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Convolution&gt;(args[0],</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[1],</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_movement_strides,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_dilation_strides,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_below,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_above);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Convolution&gt;(</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[0],</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[1],</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_movement_strides,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_dilation_strides,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_below,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_above,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_dilation_strides_maybe.get&lt;std::vector&lt;size_t&gt;&gt;());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ConvolutionBackpropData&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data_batch_shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;data_batch_shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_movement_strides_forward<sp/>=</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_movement_strides_forward&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_dilation_strides_forward<sp/>=</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_dilation_strides_forward&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_below_forward<sp/>=</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_below_forward&quot;</highlight><highlight class="normal">).get&lt;vector&lt;std::ptrdiff_t&gt;&gt;();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_above_forward<sp/>=</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_above_forward&quot;</highlight><highlight class="normal">).get&lt;vector&lt;std::ptrdiff_t&gt;&gt;();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data_dilation_strides_forward<sp/>=</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;data_dilation_strides_forward&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::ConvolutionBackpropData&gt;(data_batch_shape,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[0],</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[1],</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_movement_strides_forward,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_dilation_strides_forward,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_below_forward,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_above_forward,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_dilation_strides_forward);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ConvolutionBackpropFilters&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>filters_shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;filters_shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_movement_strides_forward<sp/>=</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_movement_strides_forward&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_dilation_strides_forward<sp/>=</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_dilation_strides_forward&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_below_forward<sp/>=</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_below_forward&quot;</highlight><highlight class="normal">).get&lt;vector&lt;std::ptrdiff_t&gt;&gt;();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_above_forward<sp/>=</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_above_forward&quot;</highlight><highlight class="normal">).get&lt;vector&lt;std::ptrdiff_t&gt;&gt;();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data_dilation_strides_forward<sp/>=</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;data_dilation_strides_forward&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::ConvolutionBackpropFilters&gt;(args[0],</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filters_shape,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[1],</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_movement_strides_forward,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_dilation_strides_forward,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_below_forward,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_above_forward,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_dilation_strides_forward);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Cos&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Cos&gt;(args[0]);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Cosh&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Cosh&gt;(args[0]);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Divide&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Divide&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Dot&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>backwards<sp/>compatibility,<sp/>reduction_axes_count<sp/>is<sp/>optional.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>node_js[</highlight><highlight class="stringliteral">&quot;reduction_axes_count&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.empty())</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Dot&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reduction_axes_count<sp/>=<sp/>obj.get&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Dot&gt;(args[0],<sp/>args[1],<sp/>reduction_axes_count);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Equal&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Equal&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Exp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Exp&gt;(args[0]);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Floor&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Floor&gt;(args[0]);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;FunctionCall&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>function_name<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Function&gt;<sp/>f_ptr<sp/>=<sp/>function_map.at(function_name);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::FunctionCall&gt;(f_ptr,<sp/>args);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>if<sp/>(node_op<sp/>==<sp/>&quot;GetOutputElement&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::GetOutputElement&gt;(args[0]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Greater&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Greater&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;GreaterEq&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::GreaterEq&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Less&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Less&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;LessEq&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::LessEq&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Log&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Log&gt;(args[0]);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Max&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reduction_axes<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;reduction_axes&quot;</highlight><highlight class="normal">).get&lt;set&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Max&gt;(args[0],<sp/>reduction_axes);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MaxPool&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_movement_strides<sp/>=</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>backwards<sp/>compatibility,<sp/>both<sp/>(but<sp/>not<sp/>just<sp/>one)<sp/>of<sp/>the<sp/>padding_<sp/>fields<sp/>may<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>omitted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_below_maybe<sp/>=<sp/>node_js[</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_above_maybe<sp/>=<sp/>node_js[</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(padding_below_maybe.empty()<sp/>&amp;&amp;<sp/>!padding_above_maybe.empty())</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>runtime_error(</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MaxPool:<sp/>padding_below<sp/>is<sp/>absent<sp/>but<sp/>padding_above<sp/>is<sp/>present&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!padding_below_maybe.empty()<sp/>&amp;&amp;<sp/>padding_above_maybe.empty())</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>runtime_error(</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MaxPool:<sp/>padding_below<sp/>is<sp/>present<sp/>but<sp/>padding_above<sp/>is<sp/>absent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!padding_below_maybe.empty()<sp/>&amp;&amp;<sp/>!padding_above_maybe.empty())</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_below<sp/>=<sp/>padding_below_maybe.get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_above<sp/>=<sp/>padding_above_maybe.get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::MaxPool&gt;(</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[0],<sp/>window_shape,<sp/>window_movement_strides,<sp/>padding_below,<sp/>padding_above);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::MaxPool&gt;(args[0],<sp/>window_shape,<sp/>window_movement_strides);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MaxPoolBackprop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_movement_strides<sp/>=</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_below<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_above<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::MaxPoolBackprop&gt;(args[0],</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[1],</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_shape,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_movement_strides,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_below,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_above);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Maximum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Maximum&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Min&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reduction_axes<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;reduction_axes&quot;</highlight><highlight class="normal">).get&lt;set&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Min&gt;(args[0],<sp/>reduction_axes);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Minimum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Minimum&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Multiply&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Multiply&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Negative&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Negative&gt;(args[0]);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;NotEqual&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::NotEqual&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Not&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Not&gt;(args[0]);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;OneHot&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>one_hot_axis<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;one_hot_axis&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::OneHot&gt;(args[0],<sp/>shape,<sp/>one_hot_axis);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Pad&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_below<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_above<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_interior<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;padding_interior&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Pad&gt;(</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[0],<sp/>args[1],<sp/>padding_below,<sp/>padding_above,<sp/>padding_interior);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Parameter&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type_node_js<sp/>=</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.count(</highlight><highlight class="stringliteral">&quot;element_type&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>?<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;value_type&quot;</highlight><highlight class="normal">)<sp/>:<sp/>node_js;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element_type<sp/>=<sp/>read_element_type(type_node_js.at(</highlight><highlight class="stringliteral">&quot;element_type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>type_node_js.at(</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Parameter&gt;(element_type,<sp/>shape);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Power&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Power&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Product&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reduction_axes<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;reduction_axes&quot;</highlight><highlight class="normal">).get&lt;set&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Product&gt;(args[0],<sp/>reduction_axes);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Reduce&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reduction_axes<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;reduction_axes&quot;</highlight><highlight class="normal">).get&lt;set&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>function_name<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Function&gt;<sp/>f_ptr<sp/>=<sp/>function_map.at(function_name);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Reduce&gt;(args[0],<sp/>args[1],<sp/>f_ptr,<sp/>reduction_axes);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ReduceWindow&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_movement_strides<sp/>=</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>function_name<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Function&gt;<sp/>f_ptr<sp/>=<sp/>function_map.at(function_name);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::ReduceWindow&gt;(</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[0],<sp/>args[1],<sp/>f_ptr,<sp/>window_shape,<sp/>window_movement_strides);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Remainder&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Remainder&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Relu&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Relu&gt;(args[0]);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ReluBackprop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::ReluBackprop&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ReplaceSlice&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lower_bounds<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;lower_bounds&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>upper_bounds<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;upper_bounds&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strides<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;strides&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::ReplaceSlice&gt;(</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[0],<sp/>args[1],<sp/>lower_bounds,<sp/>upper_bounds,<sp/>strides);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Reshape&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_order<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;input_order&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output_shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;output_shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Reshape&gt;(args[0],<sp/>input_order,<sp/>output_shape);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Reverse&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reversed_axes<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;reversed_axes&quot;</highlight><highlight class="normal">).get&lt;set&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Reverse&gt;(args[0],<sp/>reversed_axes);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Select&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Select&gt;(args[0],<sp/>args[1],<sp/>args[2]);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;SelectAndScatter&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>selection_function_name<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;selection_function&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Function&gt;<sp/>selection_f_ptr<sp/>=<sp/>function_map.at(selection_function_name);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>scatter_function_name<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;scatter_function&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Function&gt;<sp/>scatter_f_ptr<sp/>=<sp/>function_map.at(scatter_function_name);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_shape<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_movement_strides<sp/>=</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::SelectAndScatter&gt;(args[0],</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[1],</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[2],</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection_f_ptr,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scatter_f_ptr,</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_shape,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_movement_strides);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sign&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Sign&gt;(args[0]);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sin&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Sin&gt;(args[0]);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sinh&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Sinh&gt;(args[0]);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Slice&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lower_bounds<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;lower_bounds&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>upper_bounds<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;upper_bounds&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strides<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;strides&quot;</highlight><highlight class="normal">).get&lt;vector&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Slice&gt;(args[0],<sp/>lower_bounds,<sp/>upper_bounds,<sp/>strides);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sqrt&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Sqrt&gt;(args[0]);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Subtract&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Subtract&gt;(args[0],<sp/>args[1]);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reduction_axes<sp/>=<sp/>node_js.at(</highlight><highlight class="stringliteral">&quot;reduction_axes&quot;</highlight><highlight class="normal">).get&lt;set&lt;size_t&gt;&gt;();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Sum&gt;(args[0],<sp/>reduction_axes);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Tan&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Tan&gt;(args[0]);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Tanh&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>make_shared&lt;op::Tanh&gt;(args[0]);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>if<sp/>(node_op<sp/>==<sp/>&quot;XLAGetTupleElement&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>op<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node_op;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>runtime_error(ss.str());</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_map[node_name]<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Node&gt;&gt;<sp/>result;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result_name<sp/>:<sp/>func_result)</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(node_map.at(result_name));</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;op::Parameter&gt;&gt;<sp/>params;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>param_name<sp/>:<sp/>func_parameters)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params.push_back(dynamic_pointer_cast&lt;op::Parameter&gt;(node_map.at(param_name)));</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>make_shared&lt;Function&gt;(result,<sp/>params,<sp/>func_name);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>function_map[func_name]<sp/>=<sp/>rc;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1Node" kindref="compound">Node</ref>&amp;<sp/>n)</highlight></codeline>
<codeline lineno="819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>node;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">]<sp/>=<sp/>n.get_name();</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;op&quot;</highlight><highlight class="normal">]<sp/>=<sp/>n.<ref refid="classngraph_1_1Node_1a92598fdffd86cf6fd3adf0081e041d2f" kindref="member">description</ref>();</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Multiple<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>inputs<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_aa80485befaffcadaa39965494e0b4d2e_1aa80485befaffcadaa39965494e0b4d2e" kindref="member">json::array</ref>();</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>outputs<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_aa80485befaffcadaa39965494e0b4d2e_1aa80485befaffcadaa39965494e0b4d2e" kindref="member">json::array</ref>();</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classngraph_1_1descriptor_1_1Input" kindref="compound">descriptor::Input</ref>&amp;<sp/>input<sp/>:<sp/>n.get_inputs())</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs.<ref refid="classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_1ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" kindref="member">push_back</ref>(input.get_output().get_node()-&gt;get_name());</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n.<ref refid="classngraph_1_1Node_1a9257d1be4e21fd9b4e834ee763c9ab03" kindref="member">get_output_size</ref>();<sp/>++i)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputs.<ref refid="classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_1ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" kindref="member">push_back</ref>(n.<ref refid="classngraph_1_1Node_1a0cb34ea18330939c53fbf7fe15603c32" kindref="member">get_output_tensor</ref>(i).get_name());</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;inputs&quot;</highlight><highlight class="normal">]<sp/>=<sp/>inputs;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;outputs&quot;</highlight><highlight class="normal">]<sp/>=<sp/>outputs;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::getenv(</highlight><highlight class="stringliteral">&quot;NGRAPH_SERIALIZER_OUTPUT_SHAPES&quot;</highlight><highlight class="normal">)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json" kindref="compound">json</ref><sp/>output_shapes<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_aa80485befaffcadaa39965494e0b4d2e_1aa80485befaffcadaa39965494e0b4d2e" kindref="member">json::array</ref>();</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n.<ref refid="classngraph_1_1Node_1a9257d1be4e21fd9b4e834ee763c9ab03" kindref="member">get_output_size</ref>();<sp/>++i)</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_shapes.<ref refid="classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_1ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" kindref="member">push_back</ref>(n.<ref refid="classngraph_1_1Node_1a29bad373294c6939549d3302c6c5b45c" kindref="member">get_output_shape</ref>(i));</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;output_shapes&quot;</highlight><highlight class="normal">]<sp/>=<sp/>output_shapes;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>node_op<sp/>=<sp/>n.<ref refid="classngraph_1_1Node_1a92598fdffd86cf6fd3adf0081e041d2f" kindref="member">description</ref>();</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Abs&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Acos&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Add&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AllReduce&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Asin&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Atan&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AvgPool&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1AvgPool" kindref="compound">op::AvgPool</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_shape();</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_movement_strides();</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_below();</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_above();</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;include_padding_in_avg_computation&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_include_padding_in_avg_computation();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AvgPoolBackprop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1AvgPoolBackprop" kindref="compound">op::AvgPoolBackprop</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;forward_arg_shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_forward_arg_shape();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_shape();</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_movement_strides();</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_below();</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_above();</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;include_padding_in_avg_computation&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_include_padding_in_avg_computation();</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BatchNorm&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1BatchNorm" kindref="compound">op::BatchNorm</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_eps_value();</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Broadcast&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Broadcast" kindref="compound">op::Broadcast</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;axes&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_broadcast_axes();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_broadcast_shape();</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Ceiling&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Concat&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Concat" kindref="compound">op::Concat</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;axis&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_concatenation_axis();</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Constant&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Constant" kindref="compound">op::Constant</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_value_strings();</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_shape();</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;element_type&quot;</highlight><highlight class="normal">]<sp/>=<sp/>write_element_type(tmp-&gt;get_element_type());</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Convert&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Convert" kindref="compound">op::Convert</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;target_type&quot;</highlight><highlight class="normal">]<sp/>=<sp/>write_element_type(tmp-&gt;get_convert_element_type());</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Convolution&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Convolution" kindref="compound">op::Convolution</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_movement_strides();</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_dilation_strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_dilation_strides();</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_below();</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_above();</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;data_dilation_strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_data_dilation_strides();</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ConvolutionBackpropData&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1ConvolutionBackpropData" kindref="compound">op::ConvolutionBackpropData</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;data_batch_shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_data_batch_shape();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_movement_strides_forward&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_movement_strides_forward();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_dilation_strides_forward&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_dilation_strides_forward();</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_below_forward&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_below_forward();</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_above_forward&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_above_forward();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;data_dilation_strides_forward&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_data_dilation_strides_forward();</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ConvolutionBackpropFilters&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1ConvolutionBackpropFilters" kindref="compound">op::ConvolutionBackpropFilters</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;filters_shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_filters_shape();</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_movement_strides_forward&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_movement_strides_forward();</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_dilation_strides_forward&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_dilation_strides_forward();</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_below_forward&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_below_forward();</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_above_forward&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_above_forward();</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;data_dilation_strides_forward&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_data_dilation_strides_forward();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Cos&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Cosh&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Divide&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Dot&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Dot" kindref="compound">op::Dot</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;reduction_axes_count&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_reduction_axes_count();</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Equal&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Exp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Floor&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;FunctionCall&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">]<sp/>=<sp/>n.get_functions()[0]-&gt;get_name();</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;GetOutputElement&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Greater&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;GreaterEq&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Less&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;LessEq&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Log&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Max&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Max" kindref="compound">op::Max</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;reduction_axes&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_reduction_axes();</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MaxPool&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1MaxPool" kindref="compound">op::MaxPool</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_shape();</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_movement_strides();</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_below();</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_above();</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MaxPoolBackprop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1MaxPoolBackprop" kindref="compound">op::MaxPoolBackprop</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_shape();</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_movement_strides();</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_below();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_above();</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Maximum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Min&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Min" kindref="compound">op::Min</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;reduction_axes&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_reduction_axes();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Minimum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Multiply&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Negative&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;NotEqual&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Not&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;OneHot&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1OneHot" kindref="compound">op::OneHot</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_shape();</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;one_hot_axis&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_one_hot_axis();</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Pad&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Pad" kindref="compound">op::Pad</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_below&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_below();</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_above&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_above();</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;padding_interior&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_padding_interior();</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Parameter&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Parameter" kindref="compound">op::Parameter</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_shape();</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;element_type&quot;</highlight><highlight class="normal">]<sp/>=<sp/>write_element_type(tmp-&gt;get_element_type());</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Product&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Product" kindref="compound">op::Product</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;reduction_axes&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_reduction_axes();</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Power&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Reduce&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Reduce" kindref="compound">op::Reduce</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_functions()[0]-&gt;get_name();</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;reduction_axes&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_reduction_axes();</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ReduceWindow&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1ReduceWindow" kindref="compound">op::ReduceWindow</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_functions()[0]-&gt;get_name();</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_shape();</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_movement_strides();</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Relu&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ReluBackprop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Remainder&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ReplaceSlice&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1ReplaceSlice" kindref="compound">op::ReplaceSlice</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;lower_bounds&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_lower_bounds();</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;upper_bounds&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_upper_bounds();</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_strides();</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Reshape&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Reshape" kindref="compound">op::Reshape</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;input_order&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_input_order();</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;output_shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_output_shape();</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Reverse&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Reverse" kindref="compound">op::Reverse</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;reversed_axes&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_reversed_axes();</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Select&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;SelectAndScatter&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1SelectAndScatter" kindref="compound">op::SelectAndScatter</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;selection_function&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_functions()[0]-&gt;get_name();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;scatter_function&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_functions()[1]-&gt;get_name();</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_shape&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_shape();</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;window_movement_strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_window_movement_strides();</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sign&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sin&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sinh&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Slice&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Slice" kindref="compound">op::Slice</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;lower_bounds&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_lower_bounds();</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;upper_bounds&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_upper_bounds();</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;strides&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_strides();</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sqrt&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Subtract&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classngraph_1_1op_1_1Sum" kindref="compound">op::Sum</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;n);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;reduction_axes&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tmp-&gt;get_reduction_axes();</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Tan&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Tanh&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_op<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;XLAGetTupleElement&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/indie/libraries/private-ngraph-cpp/src/ngraph/serializer.cpp"/>
  </compounddef>
</doxygen>

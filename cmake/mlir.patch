diff --git a/mlir/include/mlir/Dialect/Affine/EDSC/Builders.h b/mlir/include/mlir/Dialect/Affine/EDSC/Builders.h
index 0d9da1fe0dc..6d139c72e7e 100644
--- a/mlir/include/mlir/Dialect/Affine/EDSC/Builders.h
+++ b/mlir/include/mlir/Dialect/Affine/EDSC/Builders.h
@@ -86,6 +86,10 @@ Value operator^(Value lhs, Value rhs);
 /// Comparison operator overloadings.
 Value eq(Value lhs, Value rhs);
 Value ne(Value lhs, Value rhs);
+Value lt(Value lhs, Value rhs, bool is_signed);
+Value le(Value lhs, Value rhs, bool is_signed);
+Value gt(Value lhs, Value rhs, bool is_signed);
+Value ge(Value lhs, Value rhs, bool is_signed);
 Value operator<(Value lhs, Value rhs);
 Value operator<=(Value lhs, Value rhs);
 Value operator>(Value lhs, Value rhs);
diff --git a/mlir/lib/Dialect/Affine/EDSC/Builders.cpp b/mlir/lib/Dialect/Affine/EDSC/Builders.cpp
index 50e26574b7d..abf7dba1f50 100644
--- a/mlir/lib/Dialect/Affine/EDSC/Builders.cpp
+++ b/mlir/lib/Dialect/Affine/EDSC/Builders.cpp
@@ -251,6 +251,42 @@ Value mlir::edsc::op::ne(Value lhs, Value rhs) {
              ? createFComparisonExpr(CmpFPredicate::ONE, lhs, rhs)
              : createIComparisonExpr(CmpIPredicate::ne, lhs, rhs);
 }
+Value mlir::edsc::op::lt(Value lhs, Value rhs, bool is_signed) {
+  auto type = lhs.getType();
+  if (type.isa<FloatType>()) {
+    return createFComparisonExpr(CmpFPredicate::OLT, lhs, rhs);
+  } else {
+    return is_signed ? createIComparisonExpr(CmpIPredicate::slt, lhs, rhs)
+                     : createIComparisonExpr(CmpIPredicate::ult, lhs, rhs);
+  }
+}
+Value mlir::edsc::op::le(Value lhs, Value rhs, bool is_signed) {
+  auto type = lhs.getType();
+  if (type.isa<FloatType>()) {
+    return createFComparisonExpr(CmpFPredicate::OLE, lhs, rhs);
+  } else {
+    return is_signed ? createIComparisonExpr(CmpIPredicate::sle, lhs, rhs)
+                     : createIComparisonExpr(CmpIPredicate::ule, lhs, rhs);
+  }
+}
+Value mlir::edsc::op::gt(Value lhs, Value rhs, bool is_signed) {
+  auto type = lhs.getType();
+  if (type.isa<FloatType>()) {
+    return createFComparisonExpr(CmpFPredicate::OGT, lhs, rhs);
+  } else {
+    return is_signed ? createIComparisonExpr(CmpIPredicate::sgt, lhs, rhs)
+                     : createIComparisonExpr(CmpIPredicate::ugt, lhs, rhs);
+  }
+}
+Value mlir::edsc::op::ge(Value lhs, Value rhs, bool is_signed) {
+  auto type = lhs.getType();
+  if (type.isa<FloatType>()) {
+    return createFComparisonExpr(CmpFPredicate::OGE, lhs, rhs);
+  } else {
+    return is_signed ? createIComparisonExpr(CmpIPredicate::sge, lhs, rhs)
+                     : createIComparisonExpr(CmpIPredicate::uge, lhs, rhs);
+  }
+}
 Value mlir::edsc::op::operator<(Value lhs, Value rhs) {
   auto type = lhs.getType();
   return type.isa<FloatType>()
